{"version":3,"file":"799.5f592f7ea70157f79ee3.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/ChangePassword.tsx"],"sourcesContent":["import React, { ChangeEvent, FormEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport type { UserResponse } from \"../../ApiClient/generatedcode/generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport UserClient from \"../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../contexts/GeneralContext\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps<{ id: string }> {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    loading: boolean;\n    pwdload?: boolean;\n    user?: UserResponse;\n    userId: number;\n    currentUser: boolean;\n}\n\nclass ChangePassword extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps, context: GeneralContext) {\n        super(props);\n\n        if (!context?.user) {\n            throw Error(\"ChangePassword: this.context?.user is null!\");\n        }\n\n        let id: number;\n        if (props.match.params.id) {\n            id = parseInt(props.match.params.id);\n        } else {\n            id = context.user.id;\n        }\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            userId: id,\n            currentUser: context.user.id === id,\n            loading: true\n        };\n\n        this.submit = this.submit.bind(this);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const user = await UserClient.getUser(this.state.userId);\n        if (user.code == StatusCode.OK) {\n            this.setState({\n                user: user.payload\n            });\n        } else {\n            this.addError(user.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    // noinspection DuplicatedCode\n    private async submit(event: FormEvent<HTMLFormElement>): Promise<void> {\n        if (!this.state.user) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"changepassword submit: this.user is falsy\")\n                })\n            );\n            return;\n        }\n\n        event.preventDefault();\n        let err = false;\n        if (this.state.password1.length < this.context.serverInfo.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        if (err) return;\n\n        this.setState({\n            pwdload: true\n        });\n\n        const res = await UserClient.editUser({\n            password: this.state.password1,\n            id: this.state.user.id\n        });\n        switch (res.code) {\n            case StatusCode.OK: {\n                if (this.state.currentUser) {\n                    // noinspection ES6MissingAwait //we just dont care about what happens, it can fail or succeed\n                    void ServerClient.login({\n                        type: CredentialsType.Password,\n                        userName: this.state.user.name,\n                        password: this.state.password1\n                    });\n                }\n\n                this.props.history.goBack();\n                break;\n            }\n            case StatusCode.ERROR: {\n                this.addError(res.error);\n                //we only unset it here because its going to get redirected anyways\n                this.setState({\n                    pwdload: false\n                });\n                break;\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.info\" />;\n        }\n        if (this.state.pwdload) {\n            return <Loading text=\"loading.passwd\" />;\n        }\n\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <Form onSubmit={this.submit}>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.user ? (\n                        <React.Fragment>\n                            <h3>\n                                <FormattedMessage id=\"view.user.passwd.title\" />\n                                {this.state.user.name}({this.state.user.id})\n                            </h3>\n                            <hr />\n                            <Form.Group controlId=\"password1\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd1Input}\n                                    value={this.state.password1}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.lengthError ? (\n                                        <React.Fragment>\n                                            <FormattedMessage id=\"login.password.repeat.short\" />\n                                            {this.context.serverInfo.minimumPasswordLength}\n                                        </React.Fragment>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId=\"password2\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password.repeat\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd2Input}\n                                    value={this.state.password2}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.matchError ? (\n                                        <FormattedMessage id=\"login.password.repeat.match\" />\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\">\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Button>\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                </Col>\n            </Form>\n        );\n    }\n}\nChangePassword.contextType = GeneralContext;\nexport default withRouter(ChangePassword);\n"],"names":["ChangePassword","React","constructor","props","context","super","user","Error","id","match","params","parseInt","this","state","errors","password1","password2","userId","currentUser","loading","submit","bind","UserClient","code","StatusCode","setState","payload","addError","error","prevState","Array","from","push","event","InternalError","ErrorCode","jsError","preventDefault","err","length","serverInfo","minimumPasswordLength","lengthError","matchError","pwdload","res","password","ServerClient","type","CredentialsType","userName","name","history","goBack","render","text","onSubmit","className","lg","md","map","index","key","onClose","prev","newarr","undefined","controlId","onChange","target","value","isInvalid","contextType","GeneralContext","withRouter"],"sourceRoot":""}