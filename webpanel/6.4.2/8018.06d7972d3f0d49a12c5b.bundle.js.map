{"version":3,"file":"8018.06d7972d3f0d49a12c5b.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Server.tsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\nimport TimeAgo from \"react-timeago\";\nimport { gte as SemVerGte } from \"semver\";\n\nimport DreamDaemonClient from \"../../../../ApiClient/DreamDaemonClient\";\nimport {\n    DreamDaemonRequest,\n    DreamDaemonResponse,\n    DreamDaemonRights,\n    DreamDaemonSecurity,\n    DreamDaemonVisibility,\n    EngineType,\n    WatchdogStatus\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamDaemonRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { ViewDataType, WatchdogData } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum GracefulAction {\n    None,\n    Stop,\n    Restart\n}\n\nfunction Server(props: WrappedComponentProps): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const [watchdogSettings, setWatchdogSettings] = useState<DreamDaemonResponse>();\n    const [loading, setLoading] = useState(false);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void loadWatchdogSettings(), [instanceEditContext.instance.id]);\n\n    async function loadWatchdogSettings(): Promise<void> {\n        if (\n            !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.ReadMetadata\n            )\n        ) {\n            return setWatchdogSettings({});\n        }\n\n        const response = await DreamDaemonClient.getWatchdogStatus(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            setWatchdogSettings(response.payload);\n        }\n    }\n    async function saveWatchdogSettings(newSettings: DreamDaemonRequest): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.updateWatchdogStatus(\n            instanceEditContext.instance.id,\n            newSettings\n        );\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        }\n        await loadWatchdogSettings();\n        setLoading(false);\n    }\n\n    async function startWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.startWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function stopWatchdog(): Promise<void> {\n        if (!confirm(props.intl.formatMessage({ id: \"view.instance.server.prompt.stop\" }))) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.stopWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function restartWatchdog(): Promise<void> {\n        if (!confirm(props.intl.formatMessage({ id: \"view.instance.server.prompt.restart\" }))) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.restartWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function dumpWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.dumpWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.fastmode = 5;\n        }\n        setLoading(false);\n    }\n\n    if (!watchdogSettings) {\n        return <>{displayErrors(errorState)}</>;\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    const fields = {\n        autoStart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostart\",\n            defaultValue: watchdogSettings.autoStart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAutoStart\n            )\n        },\n        startProfiler: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostartprofiler\",\n            defaultValue: watchdogSettings.startProfiler,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetProfiler\n            )\n        },\n        logOutput: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.logoutput\",\n            defaultValue: watchdogSettings.logOutput,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetLogOutput\n            )\n        },\n        port: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.port\",\n            defaultValue: watchdogSettings.port,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        },\n        visibility: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.visibility\",\n            defaultValue: watchdogSettings.visibility,\n            enum: DreamDaemonVisibility,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetVisibility\n            )\n        },\n        securityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.securitylevel\",\n            defaultValue: watchdogSettings.securityLevel,\n            enum: DreamDaemonSecurity,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetSecurity\n            )\n        },\n        startupTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.startup\",\n            defaultValue: watchdogSettings.startupTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetStartupTimeout\n            )\n        },\n        topicRequestTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.topic\",\n            defaultValue: watchdogSettings.topicRequestTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetTopicTimeout\n            )\n        },\n        healthCheckSeconds: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.healthcheck\",\n            defaultValue: watchdogSettings.healthCheckSeconds,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetHealthCheckInterval\n            )\n        },\n        dumpOnHealthCheckRestart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.dumpOnHealthCheckRestart\",\n            defaultValue: watchdogSettings.dumpOnHealthCheckRestart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.CreateDump\n            )\n        },\n        minidumps: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.minidumps\",\n            defaultValue: watchdogSettings.minidumps,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetMinidumps\n            )\n        },\n        allowWebClient: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.allowwebclient\",\n            defaultValue: watchdogSettings.allowWebClient,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetWebClient\n            )\n        },\n        additionalParameters: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.additionalparams\",\n            defaultValue: watchdogSettings.additionalParameters,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAdditionalParameters\n            )\n        },\n        mapThreads: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.mapthreads\",\n            defaultValue: watchdogSettings.mapThreads,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetMapThreads\n            )\n        },\n        openDreamTopicPort: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.od_topic_port\",\n            tooltip: \"fields.instance.watchdog.od_topic_port.desc\",\n            defaultValue: watchdogSettings.openDreamTopicPort,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        }\n    };\n\n    const anyEditableField = Object.values(fields).some(field => !field.disabled);\n\n    const no_perm_tooltip = (\n        <Tooltip id=\"generic.no_perm\">\n            <FormattedMessage id=\"generic.no_perm\" />\n        </Tooltip>\n    );\n\n    const canStart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Start\n    );\n    const canStop = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Shutdown\n    );\n    const canRestart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Restart\n    );\n    const canDump = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.CreateDump\n    );\n    const canMetadata = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadMetadata\n    );\n    const canGracefulAny =\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftShutdown\n        ) ||\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftRestart\n        );\n    const canActionAny = canStart || canStop || canRestart || canDump;\n\n    const canBroadcast = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.BroadcastMessage\n    );\n\n    const broadcastNotAllowed =\n        !canBroadcast ||\n        (canMetadata &&\n            (watchdogSettings.status !== WatchdogStatus.Online ||\n                (watchdogSettings.activeCompileJob?.dmApiVersion != null &&\n                    !SemVerGte(watchdogSettings.activeCompileJob?.dmApiVersion, \"5.7.0\"))));\n\n    const broadcastFields = {\n        message: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.broadcast\",\n            defaultValue: \"\",\n            disabled: broadcastNotAllowed,\n            tooltip: \"fields.instance.watchdog.broadcast.desc\"\n        }\n    };\n\n    const canViewDeployment = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadRevision\n    );\n\n    let deploymentViewData: WatchdogData | null = null;\n    if (watchdogSettings) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.Watchdog,\n            activeCompileJob: watchdogSettings.activeCompileJob,\n            stagedCompileJob: watchdogSettings.stagedCompileJob\n        };\n    }\n\n    const OneGibibyte = 1073741824;\n    const ramUsage = watchdogSettings?.immediateMemoryUsage;\n    const clientCount = watchdogSettings?.clientCount;\n    const hasClientCount = clientCount != null;\n    let cantHaveClientCount =\n        !hasClientCount &&\n        canMetadata &&\n        watchdogSettings?.healthCheckSeconds != null &&\n        watchdogSettings?.healthCheckSeconds > 0 &&\n        (watchdogSettings.activeCompileJob?.dmApiVersion == null ||\n            !SemVerGte(watchdogSettings.activeCompileJob?.dmApiVersion, \"5.10.0\"));\n\n    cantHaveClientCount = false;\n\n    let healthCheckSecondsLeft = 0;\n    if (watchdogSettings?.launchTime && watchdogSettings.healthCheckSeconds) {\n        const startTime = new Date(watchdogSettings.launchTime);\n        const dateDiff = new Date().getTime() - startTime.getTime();\n        const secondsDiff = dateDiff / 1000;\n\n        healthCheckSecondsLeft = Math.floor(watchdogSettings.healthCheckSeconds - secondsDiff);\n    }\n\n    const hasLaunchTime = !!watchdogSettings.launchTime;\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={watchdogSettings} />\n            {displayErrors(errorState)}\n            <h2 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.status\" />\n                <Badge\n                    pill\n                    variant={\n                        watchdogSettings.status === WatchdogStatus.Online\n                            ? \"success\"\n                            : watchdogSettings.status === WatchdogStatus.Offline\n                              ? \"danger\"\n                              : \"warning\"\n                    }>\n                    <FormattedMessage\n                        id={`view.instance.server.status.${\n                            WatchdogStatus[watchdogSettings.status!]\n                        }`}\n                    />\n                </Badge>\n            </h2>\n            <h4>\n                {ramUsage ? (\n                    <Badge\n                        className=\"status-badge\"\n                        pill\n                        variant={\n                            deploymentViewData?.activeCompileJob?.engineVersion.engine ==\n                            EngineType.OpenDream\n                                ? \"success\"\n                                : ramUsage > OneGibibyte * 3\n                                  ? \"danger\"\n                                  : ramUsage > OneGibibyte * 2\n                                    ? \"warning\"\n                                    : \"success\"\n                        }>\n                        <div>\n                            <FormattedMessage id=\"view.instance.server.status.ram\" />\n                            :&nbsp;\n                            {Math.round((ramUsage / OneGibibyte) * 100) / 100}\n                            GB\n                        </div>\n                    </Badge>\n                ) : null}\n                {hasClientCount ? (\n                    <Badge\n                        className=\"status-badge\"\n                        pill\n                        variant={clientCount == 0 ? \"warning\" : \"success\"}>\n                        <div>\n                            <FormattedMessage id=\"view.instance.server.status.client_count\" />\n                            :&nbsp;\n                            {clientCount}\n                        </div>\n                    </Badge>\n                ) : null}\n                {cantHaveClientCount ? (\n                    <Badge className=\"status-badge\" pill variant=\"danger\">\n                        <div>\n                            <FormattedMessage id=\"view.instance.server.status.client_count.cant\" />\n                        </div>\n                    </Badge>\n                ) : null}\n                {!cantHaveClientCount &&\n                !hasClientCount &&\n                watchdogSettings.status === WatchdogStatus.Online ? (\n                    <Badge className=\"status-badge\" pill variant=\"warning\">\n                        <div>\n                            <FormattedMessage\n                                id={\n                                    healthCheckSecondsLeft > 0\n                                        ? \"view.instance.server.status.client_count.pending\"\n                                        : \"view.instance.server.status.client_count.soon\"\n                                }\n                                values={{ healthCheckSecondsLeft }}\n                            />\n                        </div>\n                    </Badge>\n                ) : null}\n                {hasLaunchTime ? (\n                    <Badge\n                        className=\"status-badge\"\n                        pill\n                        variant={(() => {\n                            const launchTime = new Date(watchdogSettings.launchTime!);\n                            const duration = new Date().getMinutes() - launchTime.getMinutes();\n                            if (duration < 5) return \"danger\";\n\n                            if (duration < 15) return \"warning\";\n\n                            return \"success\";\n                            // TODO: https://github.com/nmn/react-timeago/issues/208\n                        })()}>\n                        <div>\n                            <FormattedMessage id=\"view.instance.server.status.uptime\" />\n                            <TimeAgo date={new Date(watchdogSettings.launchTime!)} />\n                        </div>\n                    </Badge>\n                ) : null}\n            </h4>\n            <hr />\n            {canViewDeployment ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.settings\" />\n            </h3>\n            {!canMetadata ? (\n                anyEditableField ? (\n                    <GenericAlert title=\"view.instance.no_metadata\" />\n                ) : (\n                    <GenericAlert title=\"view.instance.server.no_metadata_and_no_settings\" />\n                )\n            ) : null}\n            <InputForm fields={fields} onSave={saveWatchdogSettings} hideDisabled={!canMetadata} />\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.actions\" />\n            </h3>\n            {canActionAny ? (\n                <>\n                    {!canMetadata ? (\n                        <GenericAlert title=\"view.instance.server.no_metadata_actions\" />\n                    ) : null}\n                    <div className=\"text-center mb-3\">\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStart ? false : undefined}>\n                            <Button\n                                variant=\"success\"\n                                className=\"mx-2\"\n                                onClick={() => void startWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Offline) ||\n                                    !canStart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.start\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStop ? false : undefined}>\n                            <Button\n                                variant=\"danger\"\n                                className=\"mx-2\"\n                                onClick={() => void stopWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canStop\n                                }>\n                                <FormattedMessage id=\"view.instance.server.stop\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canRestart ? false : undefined}>\n                            <Button\n                                variant=\"warning\"\n                                className=\"mx-2\"\n                                onClick={() => void restartWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canRestart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.restart\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canDump ? false : undefined}>\n                            <Button\n                                variant=\"info\"\n                                className=\"mx-2\"\n                                onClick={() => void dumpWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canDump\n                                }>\n                                <FormattedMessage id=\"view.instance.server.dump\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </>\n            ) : (\n                <GenericAlert title=\"view.instance.server.no_actions\" />\n            )}\n            {!canMetadata && canGracefulAny ? (\n                <GenericAlert title=\"view.instance.server.no_metadata_graceful\" />\n            ) : null}\n\n            {canMetadata || canGracefulAny ? (\n                <div className=\"w-75 mx-auto\">\n                    <InputField\n                        name=\"view.instance.graceful\"\n                        type={FieldType.Enum}\n                        enum={GracefulAction}\n                        tooltip=\"view.instance.graceful.desc\"\n                        defaultValue={\n                            watchdogSettings.softRestart\n                                ? GracefulAction.Restart\n                                : watchdogSettings.softShutdown\n                                  ? GracefulAction.Stop\n                                  : GracefulAction.None\n                        }\n                        disabled={!canGracefulAny}\n                        onChange={_result => {\n                            const result = _result as GracefulAction;\n\n                            switch (result) {\n                                case GracefulAction.None:\n                                    if (\n                                        !watchdogSettings?.softRestart &&\n                                        !watchdogSettings?.softShutdown\n                                    )\n                                        return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: watchdogSettings.softShutdown\n                                            ? false\n                                            : undefined,\n                                        softRestart: watchdogSettings.softRestart\n                                            ? false\n                                            : undefined\n                                    });\n                                    break;\n                                case GracefulAction.Stop:\n                                    if (watchdogSettings?.softShutdown) return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: true\n                                    });\n                                    break;\n                                case GracefulAction.Restart:\n                                    if (watchdogSettings?.softRestart) return;\n                                    void saveWatchdogSettings({\n                                        softRestart: true\n                                    });\n                                    break;\n                            }\n                        }}\n                    />\n                </div>\n            ) : canActionAny ? (\n                <GenericAlert title=\"view.instance.server.no_graceful\" />\n            ) : null}\n\n            <div className=\"w-75 mx-auto\">\n                <br />\n                <InputForm\n                    fields={broadcastFields}\n                    onSave={fieldsResult => {\n                        void saveWatchdogSettings({\n                            broadcastMessage: fieldsResult.message\n                        });\n                    }}\n                    saveMessageId=\"view.instance.server.broadcast\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default injectIntl(Server);\n"],"names":["GracefulAction","injectIntl","props","instanceEditContext","useContext","InstanceEditContext","watchdogSettings","setWatchdogSettings","useState","loading","setLoading","errorState","async","loadWatchdogSettings","hasDreamDaemonRight","instancePermissionSet","DreamDaemonRights","ReadMetadata","response","DreamDaemonClient","getWatchdogStatus","instance","id","code","StatusCode","ERROR","addError","error","payload","saveWatchdogSettings","newSettings","updateWatchdogStatus","useEffect","React","displayErrors","Loading","fields","autoStart","type","FieldType","Boolean","name","defaultValue","disabled","SetAutoStart","startProfiler","SetProfiler","logOutput","SetLogOutput","port","Number","min","max","SetPort","visibility","Enum","enum","DreamDaemonVisibility","SetVisibility","securityLevel","DreamDaemonSecurity","SetSecurity","startupTimeout","SetStartupTimeout","topicRequestTimeout","SetTopicTimeout","healthCheckSeconds","SetHealthCheckInterval","dumpOnHealthCheckRestart","CreateDump","minidumps","SetMinidumps","allowWebClient","SetWebClient","additionalParameters","String","SetAdditionalParameters","mapThreads","SetMapThreads","openDreamTopicPort","tooltip","anyEditableField","Object","values","some","field","no_perm_tooltip","Tooltip","FormattedMessage","canStart","Start","canStop","Shutdown","canRestart","Restart","canDump","canMetadata","canGracefulAny","SoftShutdown","SoftRestart","canActionAny","broadcastNotAllowed","BroadcastMessage","status","WatchdogStatus","Online","activeCompileJob","dmApiVersion","SemVerGte","broadcastFields","message","canViewDeployment","ReadRevision","deploymentViewData","viewDataType","ViewDataType","Watchdog","stagedCompileJob","OneGibibyte","ramUsage","immediateMemoryUsage","clientCount","hasClientCount","cantHaveClientCount","healthCheckSecondsLeft","launchTime","startTime","Date","secondsDiff","getTime","Math","floor","hasLaunchTime","className","DebugJsonViewer","obj","Badge","pill","variant","Offline","engineVersion","engine","EngineType","OpenDream","round","duration","getMinutes","TimeAgo","date","DeploymentViewer","viewData","GenericAlert","title","InputForm","onSave","hideDisabled","OverlayTrigger","overlay","show","undefined","Button","onClick","startWatchdog","JobsController","registerCallback","fastmode","confirm","intl","formatMessage","stopWatchdog","restartWatchdog","dumpWatchdog","InputField","softRestart","softShutdown","Stop","None","onChange","_result","fieldsResult","broadcastMessage","saveMessageId"],"sourceRoot":""}