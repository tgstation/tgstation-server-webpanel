{"version":3,"file":"8325.f784f0bf9c0f2013a509.bundle.js","mappings":"2KAEA,cAAoB,MACTA,UAAAA,GACH,IAAK,MAAMC,KAAOC,OAAOC,OAAOC,EAAAA,IAC5BC,KAAKC,UAAUL,GAEnBM,QAAQC,IAAI,uBAAwBJ,EAAAA,GACxC,CAEOK,UAAAA,CAAWC,GACd,IAAK,MAAOC,EAAKV,KAAQC,OAAOU,QAAQF,GACpCL,KAAKQ,UAAUF,EAAmCV,GAEtDM,QAAQC,IAAI,sBAAuBJ,EAAAA,GACvC,CAEQU,YAAAA,CAAaC,GACjB,OAAKA,EAAOC,WAEL,GAAGC,OAAOC,SAASC,YAAYJ,EAAOK,KAFdL,EAAOK,EAG1C,CAEQP,SAAAA,CAAUF,EAAiCI,GAC/C,QAAsBM,IAAlBN,GAAQO,MAAqB,OAAOjB,KAAKkB,aAAaZ,GAG1D,OAAQI,EAAOS,MACX,IAAK,MAAO,CAGR,MAAMF,EAAQG,SAASV,EAAOO,OAC9B,GAAII,OAAOC,MAAMZ,EAAOO,OAAQ,OAChC,QAAmBD,IAAfN,EAAOa,KAAqBN,EAAQP,EAAOa,IAAK,OACpD,QAAmBP,IAAfN,EAAOc,KAAqBP,EAAQP,EAAOc,IAAK,OACpDd,EAAOO,MAAQA,EACf,KACJ,EAGAP,EAAOe,UAEPf,EAAOe,SAAS1B,EAAAA,GAAcO,GAAKW,MAAOP,EAAOO,OAErDlB,EAAAA,GAAcO,GAAKW,MAAQP,EAAOO,MAKlC,IACIS,aAAaC,QAAQ3B,KAAKS,aAAaC,GAASkB,KAAKC,UAAUnB,EAAOO,OAE1E,CAAE,MAEF,CACJ,CAEQhB,SAAAA,CAAUS,GACd,IACI,MAAMoB,EAAOJ,aAAaK,QAAQ/B,KAAKS,aAAaC,IACpD,GAAIoB,QAAqC,CAErC,MAAME,EAAOJ,KAAKK,MAAMH,GACpBE,UACAtB,EAAOO,MAAQe,EAGvB,CACJ,CAAE,MAEF,CACJ,CAEQd,YAAAA,CAAaZ,GACjB,IACI,MAAMI,EAASX,EAAAA,GAAcO,GAC7BoB,aAAaQ,WAAWlC,KAAKS,aAAaC,GAE9C,CAAE,MAEF,CACJ,E","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/util/ConfigController.ts"],"sourcesContent":["import configOptions, { BaseConfigOption, ConfigOption, ConfigValue } from \"./config\";\n\nexport default new (class ConfigController {\n    public loadconfig() {\n        for (const val of Object.values(configOptions)) {\n            this.getconfig(val);\n        }\n        console.log(\"Configuration loaded\", configOptions);\n    }\n\n    public saveconfig(newconfig: Partial<typeof configOptions>) {\n        for (const [key, val] of Object.entries(newconfig)) {\n            this.setconfig(key as keyof typeof configOptions, val);\n        }\n        console.log(\"Configuration saved\", configOptions);\n    }\n\n    private getConfigKey(option: BaseConfigOption): string {\n        if (!option.site_local) return option.id;\n\n        return `${window.location.pathname}:${option.id}`;\n    }\n\n    private setconfig(key: keyof typeof configOptions, option: ConfigOption) {\n        if (option?.value === undefined) return this.deleteconfig(key);\n\n        //safeties\n        switch (option.type) {\n            case \"num\": {\n                //this parses strings and numbers alike to numbers and refuses non numbers\n                //@ts-expect-error //parseInt can take numbers\n                const value = parseInt(option.value);\n                if (Number.isNaN(option.value)) return;\n                if (option.min !== undefined && value < option.min) return;\n                if (option.max !== undefined && value > option.max) return;\n                option.value = value;\n                break;\n            }\n        }\n\n        if (option.callback) {\n            // @ts-expect-error Can't be assed to figure this one out\n            option.callback(configOptions[key].value, option.value);\n        }\n        configOptions[key].value = option.value;\n        //configOptions[key].persist = option.persist;\n\n        //if (!option.persist) return this.deleteconfig(key); //idiot proofing, alexkar proofing\n\n        try {\n            localStorage.setItem(this.getConfigKey(option), JSON.stringify(option.value));\n            //option.persist = true;\n        } catch {\n            (() => {})(); //noop\n        }\n    }\n\n    private getconfig(option: ConfigOption): void {\n        try {\n            const data = localStorage.getItem(this.getConfigKey(option));\n            if (data !== undefined && data !== null) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const json = JSON.parse(data);\n                if (json !== null && json !== undefined) {\n                    option.value = json as ConfigValue;\n                }\n                //option.persist = true;\n            }\n        } catch {\n            (() => {})(); //noop\n        }\n    }\n\n    private deleteconfig(key: keyof typeof configOptions): void {\n        try {\n            const option = configOptions[key];\n            localStorage.removeItem(this.getConfigKey(option));\n            //option.persist = false;\n        } catch {\n            (() => {})(); //noop\n        }\n    }\n})();\n"],"names":["loadconfig","val","Object","values","configOptions","this","getconfig","console","log","saveconfig","newconfig","key","entries","setconfig","getConfigKey","option","site_local","window","location","pathname","id","undefined","value","deleteconfig","type","parseInt","Number","isNaN","min","max","callback","localStorage","setItem","JSON","stringify","data","getItem","json","parse","removeItem"],"sourceRoot":""}