{"version":3,"file":"1903.85ef84acfb18a85c046b.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/UserGroupClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    ErrorMessageResponse,\n    PaginatedUserGroupResponse,\n    PermissionSet,\n    UserGroupCreateRequest,\n    UserGroupResponse,\n    UserGroupUpdateRequest\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\n\nexport type UpdateGroupErrors = GenericErrors | ErrorCode.GROUP_NOT_FOUND;\nexport type listGroupsErrors = GenericErrors;\nexport type CreateGroupErrors = GenericErrors;\nexport type DeleteGroupErrors =\n    | GenericErrors\n    | ErrorCode.GROUP_NOT_FOUND\n    | ErrorCode.GROUP_NOT_EMPTY;\n\nexport default new (class UserGroupClient extends ApiClient {\n    public async updateGroup(\n        group: UserGroupUpdateRequest\n    ): Promise<InternalStatus<UserGroupResponse, UpdateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userGroupControllerUpdate(group);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listGroups({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    }): Promise<InternalStatus<PaginatedUserGroupResponse, listGroupsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userGroupControllerList({\n                pageSize: pageSize,\n                page: page\n            });\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedUserGroupResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createGroup(\n        name: string,\n        permissionSet?: PermissionSet\n    ): Promise<InternalStatus<UserGroupResponse, CreateGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userGroupControllerCreate({\n                name: name,\n                permissionSet: permissionSet\n            } as UserGroupCreateRequest);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserGroupResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteGroup(id: number): Promise<InternalStatus<null, DeleteGroupErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userGroupControllerDelete(id);\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_EMPTY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GROUP_NOT_FOUND, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","updateGroup","group","response","ServerClient","wait4Init","apiClient","api","userGroupControllerUpdate","e","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","GROUP_NOT_FOUND","errorMessage","UNHANDLED_RESPONSE","axiosResponse","listGroups","page","pageSize","configOptions","itemsperpage","value","userGroupControllerList","createGroup","name","permissionSet","userGroupControllerCreate","deleteGroup","id","userGroupControllerDelete","GROUP_NOT_EMPTY"],"sourceRoot":""}