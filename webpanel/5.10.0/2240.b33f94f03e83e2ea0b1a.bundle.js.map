{"version":3,"file":"2240.b33f94f03e83e2ea0b1a.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/PageHelper.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Engine.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentPropsWithoutRef } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Popover from \"react-bootstrap/Popover\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    selectPage: (page: number) => void;\n    totalPages: number;\n    currentPage: number;\n} & Partial<ComponentPropsWithoutRef<\"div\">>;\n\ninterface IState {\n    showGoto: boolean;\n    gotoValue: number;\n}\n\nexport default class PageHelper extends React.PureComponent<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showGoto: false,\n            gotoValue: props.currentPage\n        };\n    }\n\n    public render(): React.ReactNode {\n        const items: React.ReactNode[] = [];\n\n        const maxRight = Math.max(this.props.totalPages - this.props.currentPage - 1, 0);\n        const maxLeft = Math.max(this.props.currentPage - 2, 0);\n\n        const min = Math.max(\n            this.props.currentPage -\n                Math.max(\n                    5 - Number(this.props.currentPage !== this.props.totalPages) - maxRight,\n                    2\n                ),\n            2\n        );\n        const max = Math.min(\n            this.props.currentPage +\n                Math.max(5 - Number(this.props.currentPage !== 1) - maxLeft, 2),\n            this.props.totalPages - 1\n        );\n\n        //Start at the second page and stop at the second to last page\n        for (let i = min; i <= max; i++) {\n            items.push(\n                <Pagination.Item\n                    key={i}\n                    active={i === this.props.currentPage}\n                    onClick={() => this.props.selectPage(i)}>\n                    {i}\n                </Pagination.Item>\n            );\n        }\n\n        const ellipsis = this.props.totalPages > 7 ? <Pagination.Ellipsis disabled /> : null;\n\n        const findPopover = (\n            <Popover id=\"popover-gotopage\">\n                <Popover.Title>\n                    <FormattedMessage id=\"generic.goto.title\" />\n                </Popover.Title>\n                <Popover.Content>\n                    <form\n                        className=\"d-flex\"\n                        onSubmit={e => {\n                            e.preventDefault();\n                            this.props.selectPage(this.state.gotoValue);\n                            this.setState({\n                                showGoto: false\n                            });\n                        }}>\n                        <Form.Control\n                            className=\"mr-2\"\n                            type=\"number\"\n                            min={1}\n                            max={this.props.totalPages}\n                            value={this.state.gotoValue}\n                            onChange={e => this.setState({ gotoValue: parseInt(e.target.value) })}\n                            custom\n                        />\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"generic.goto\" />\n                        </Button>\n                    </form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { selectPage: _1, totalPages: _2, currentPage: _3, ...props } = this.props;\n\n        return (\n            <div className=\"text-center\" style={{ position: \"sticky\", bottom: \"1.5em\" }} {...props}>\n                <Pagination className=\"justify-content-center\">\n                    <Pagination.Prev\n                        disabled={this.props.currentPage <= 1}\n                        onClick={() =>\n                            this.props.selectPage(Math.max(this.props.currentPage - 1, 1))\n                        }\n                    />\n                    <Pagination.Item\n                        active={this.props.currentPage <= 1}\n                        onClick={() => this.props.selectPage(1)}>\n                        1\n                    </Pagination.Item>\n                    {ellipsis}\n                    {items}\n                    {ellipsis}\n                    {this.props.totalPages >= 2 ? (\n                        <Pagination.Item\n                            active={this.props.currentPage >= this.props.totalPages}\n                            onClick={() => this.props.selectPage(this.props.totalPages)}>\n                            {this.props.totalPages}\n                        </Pagination.Item>\n                    ) : null}\n                    {this.props.totalPages > 7 ? (\n                        <OverlayTrigger\n                            show={this.state.showGoto}\n                            placement=\"top\"\n                            overlay={findPopover}>\n                            <Pagination.Item\n                                onClick={() =>\n                                    this.setState(prev => {\n                                        return {\n                                            showGoto: !prev.showGoto\n                                        };\n                                    })\n                                }>\n                                <FontAwesomeIcon icon=\"search\" />\n                            </Pagination.Item>\n                        </OverlayTrigger>\n                    ) : null}\n                    <Pagination.Next\n                        disabled={this.props.currentPage >= this.props.totalPages}\n                        onClick={() =>\n                            this.props.selectPage(\n                                Math.min(this.props.currentPage + 1, this.props.totalPages)\n                            )\n                        }\n                    />\n                </Pagination>\n            </div>\n        );\n    }\n}\n","import { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport EngineClient from \"../../../../ApiClient/EngineClient\";\nimport {\n    EngineResponse,\n    EngineRights,\n    EngineType,\n    EngineVersion\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient from \"../../../../utils/GithubClient\";\nimport { hasEngineRight } from \"../../../../utils/misc\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\ninterface IProps {}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    versions: EngineResponse[];\n    activeVersion?: EngineVersion;\n    latestByondVersion: EngineVersion;\n    latestODVersion: EngineVersion;\n    selectedByondVersion?: EngineVersion;\n    selectedODVersion?: EngineVersion;\n    loading: boolean;\n    customFile?: File | null;\n    page: number;\n    maxPage?: number;\n}\n\nclass Engine extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        const initByond = {\n            version: \"514.1589\",\n            engine: EngineType.Byond\n        };\n        const initOD = {\n            engine: EngineType.OpenDream,\n            sourceSHA: \"fab769776dada6b9bcad546094d78c604049e0e9\"\n        };\n        this.state = {\n            versions: [],\n            errors: [],\n            latestByondVersion: initByond,\n            latestODVersion: initOD,\n            loading: true,\n            page: RouteData.byondlistpage ?? 1\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions() {\n        if (hasEngineRight(this.context.instancePermissionSet, EngineRights.ListInstalled)) {\n            const response = await EngineClient.listAllVersions(this.context.instance.id, {\n                page: this.state.page\n            });\n            if (response.code === StatusCode.OK) {\n                if (\n                    this.state.page > response.payload.totalPages &&\n                    response.payload.totalPages !== 0\n                ) {\n                    this.setState({\n                        page: 1\n                    });\n                    return;\n                }\n\n                this.setState({\n                    versions: response.payload.content,\n                    maxPage: response.payload.totalPages\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        if (hasEngineRight(this.context.instancePermissionSet, EngineRights.ReadActive)) {\n            const response2 = await EngineClient.getActiveVersion(this.context.instance.id);\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    activeVersion: response2.payload.engineVersion\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        }\n    }\n\n    private async switchVersion(version: EngineVersion, useCustom: boolean): Promise<void> {\n        this.setState({\n            loading: true\n        });\n        const response = await EngineClient.switchActive(\n            this.context.instance.id,\n            version,\n            useCustom && this.state.customFile\n                ? await this.state.customFile.arrayBuffer()\n                : undefined\n        );\n        if (response.code === StatusCode.ERROR) {\n            this.addError(response.error);\n        } else {\n            if (useCustom) {\n                this.setState({\n                    customFile: null\n                });\n            }\n            if (response.payload.installJob) {\n                JobsController.registerJob(response.payload.installJob, this.context.instance.id);\n                JobsController.registerCallback(\n                    response.payload.installJob.id,\n                    () => void this.loadVersions()\n                );\n            } else {\n                await this.loadVersions();\n            }\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    public async componentDidUpdate(\n        prevProps: Readonly<IProps>,\n        prevState: Readonly<IState>\n    ): Promise<void> {\n        if (prevState.page !== this.state.page) {\n            RouteData.byondlistpage = this.state.page;\n            await this.loadVersions();\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const odGetPromise = GithubClient.getLatestDefaultCommit(\"OpenDreamProject\", \"OpenDream\");\n        fetch(\"https://secure.byond.com/download/version.txt\")\n            .then(res => res.text())\n            .then(data => data.split(\"\\n\"))\n            .then(versions => versions[0])\n            .then(version => {\n                const engineVersion: EngineVersion = {\n                    engine: EngineType.Byond,\n                    version\n                };\n                this.setState({\n                    latestByondVersion: engineVersion,\n                    selectedByondVersion: engineVersion,\n                    loading: false\n                });\n            })\n            .catch(e => {\n                this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e) }));\n                this.setState({\n                    loading: false\n                });\n            });\n\n        await this.loadVersions();\n\n        const odLatestCommit = await odGetPromise;\n        if (odLatestCommit.code === StatusCode.ERROR) {\n            this.addError(odLatestCommit.error);\n            return;\n        }\n\n        const newVer = {\n            engine: EngineType.OpenDream,\n            sourceSHA: odLatestCommit.payload\n        };\n\n        this.setState(prev => {\n            return {\n                latestODVersion: newVer,\n                selectedODVersion:\n                    this.makeUniqueStringForVersion(prev.latestODVersion) ==\n                    this.makeUniqueStringForVersion(prev.selectedODVersion ?? prev.latestODVersion)\n                        ? newVer\n                        : prev.selectedODVersion\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.byond\" />;\n        }\n\n        const canSeeVersions = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.ListInstalled\n        );\n        const canSeeCurrent = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.ReadActive\n        );\n        const canInstallAndSwitchByond = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveByondVersion\n        );\n        const canInstallAndSwitchOD = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion\n        );\n        const canDelete = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.DeleteInstall\n        );\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.engine\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {canSeeVersions ? (\n                    <>\n                        {!canSeeCurrent ? (\n                            <GenericAlert title=\"view.instance.engine.current_denied\" />\n                        ) : null}\n                        <div>\n                            {this.state.versions.map(item => {\n                                // noinspection JSBitwiseOperatorUsage\n                                return (\n                                    <InputGroup\n                                        className=\"w-md-25 mb-1 mx-auto d-flex\"\n                                        key={this.makeUniqueStringForVersion(item.engineVersion)}>\n                                        {canInstallAndSwitchByond || canSeeCurrent ? (\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    name=\"byond\"\n                                                    id={this.makeUniqueStringForVersion(\n                                                        item.engineVersion\n                                                    )}\n                                                    value={Engine.friendlyVersion(\n                                                        item.engineVersion\n                                                    )}\n                                                    disabled={\n                                                        item.engineVersion.engine ===\n                                                        EngineType.Byond\n                                                            ? !canInstallAndSwitchByond\n                                                            : item.engineVersion.engine ===\n                                                              EngineType.OpenDream\n                                                            ? !canInstallAndSwitchOD\n                                                            : false\n                                                    }\n                                                    checked={\n                                                        this.makeUniqueStringForVersion(\n                                                            item.engineVersion\n                                                        ) ===\n                                                        this.makeUniqueStringForVersion(\n                                                            this.state.activeVersion\n                                                        )\n                                                    }\n                                                    onChange={async () => {\n                                                        await this.switchVersion(\n                                                            item.engineVersion,\n                                                            false\n                                                        );\n                                                    }}\n                                                />\n                                            </InputGroup.Prepend>\n                                        ) : null}\n                                        <label\n                                            className=\"flex-grow-1 m-0\"\n                                            htmlFor={this.makeUniqueStringForVersion(\n                                                item.engineVersion\n                                            )}>\n                                            <OverlayTrigger\n                                                overlay={this.tooltip(\n                                                    \"view.instance.engine.custom\"\n                                                )}\n                                                show={\n                                                    item.engineVersion.customIteration\n                                                        ? undefined\n                                                        : false\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <InputGroup.Text\n                                                        className=\"w-100\"\n                                                        {...triggerHandler}>\n                                                        {Engine.friendlyVersion(item.engineVersion)}\n                                                        {item.engineVersion.customIteration ? (\n                                                            <div\n                                                                className={\"ml-auto\"}\n                                                                ref={\n                                                                    ref as React.Ref<HTMLDivElement>\n                                                                }>\n                                                                <FontAwesomeIcon\n                                                                    fixedWidth\n                                                                    icon=\"info\"\n                                                                />\n                                                            </div>\n                                                        ) : null}\n                                                    </InputGroup.Text>\n                                                )}\n                                            </OverlayTrigger>\n                                        </label>\n                                        {this.makeUniqueStringForVersion(item.engineVersion) !==\n                                        this.makeUniqueStringForVersion(\n                                            this.state.activeVersion\n                                        ) ? (\n                                            <InputGroup.Append>\n                                                <OverlayTrigger\n                                                    overlay={this.tooltip(\"generic.no_perm\")}\n                                                    show={!canDelete ? undefined : false}>\n                                                    <Button\n                                                        variant=\"danger\"\n                                                        disabled={!canDelete}\n                                                        onClick={async () => {\n                                                            this.setState({\n                                                                loading: true\n                                                            });\n                                                            const response = await EngineClient.deleteVersion(\n                                                                this.context.instance.id,\n                                                                item.engineVersion\n                                                            );\n                                                            if (\n                                                                response.code === StatusCode.ERROR\n                                                            ) {\n                                                                this.addError(response.error);\n                                                            } else {\n                                                                JobsController.registerJob(\n                                                                    response.payload,\n                                                                    this.context.instance.id\n                                                                );\n                                                                JobsController.registerCallback(\n                                                                    response.payload.id,\n                                                                    () => void this.loadVersions()\n                                                                );\n                                                            }\n                                                            this.setState({\n                                                                loading: false\n                                                            });\n                                                        }}>\n                                                        <FontAwesomeIcon icon={faTrash} />\n                                                    </Button>\n                                                </OverlayTrigger>\n                                            </InputGroup.Append>\n                                        ) : null}\n                                    </InputGroup>\n                                );\n                            })}\n                        </div>\n                        <PageHelper\n                            className=\"mt-4\"\n                            selectPage={newPage => this.setState({ page: newPage })}\n                            totalPages={this.state.maxPage ?? 1}\n                            currentPage={this.state.page}\n                        />\n                    </>\n                ) : canSeeCurrent ? (\n                    <>\n                        <GenericAlert title=\"view.instance.engine.list_denied\" />\n                        <FormattedMessage\n                            id=\"view.instance.engine.current_version\"\n                            values={{ version: this.state.activeVersion }}\n                        />\n                    </>\n                ) : (\n                    <GenericAlert title=\"view.instance.engine.current_and_list_denied\" />\n                )}\n                <hr />\n                {this.renderByondInstall()}\n                <hr />\n                {this.renderODInstall()}\n            </div>\n        );\n    }\n\n    private tooltip(innerid?: string): JSX.Element {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    }\n\n    private renderByondInstall(): React.ReactNode {\n        const canInstallCustomByond = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallCustomByondVersion\n        );\n        const canInstallAndSwitchByond = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveByondVersion\n        );\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.engine.add_byond\" />\n                </h4>\n                <InputGroup className=\"w-md-50 w-lg-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestByondVersion.version!.split(\".\")[0]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = (\n                                    prev.selectedByondVersion ?? prev.latestByondVersion\n                                ).version!.split(\".\");\n                                arr[0] = e.target.value;\n                                return {\n                                    selectedByondVersion: {\n                                        engine: EngineType.Byond,\n                                        version: arr.join(\".\")\n                                    }\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Text className=\"rounded-0\">.</InputGroup.Text>\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestByondVersion.version!.split(\".\")[1]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = (\n                                    prev.selectedByondVersion ?? prev.latestByondVersion\n                                ).version!.split(\".\");\n                                arr[1] = e.target.value;\n                                return {\n                                    selectedByondVersion: {\n                                        engine: EngineType.Byond,\n                                        version: arr.join(\".\")\n                                    }\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            overlay={this.tooltip(\"generic.no_perm\")}\n                            show={!canInstallAndSwitchByond ? undefined : false}>\n                            <Button\n                                variant=\"success\"\n                                disabled={!canInstallAndSwitchByond}\n                                onClick={async () => {\n                                    await this.switchVersion(\n                                        this.state.selectedByondVersion ??\n                                            this.state.latestByondVersion,\n                                        true\n                                    );\n                                }}>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <OverlayTrigger\n                        overlay={this.tooltip(\"generic.no_perm\")}\n                        show={!canInstallCustomByond ? undefined : false}>\n                        <Form.File\n                            custom\n                            id=\"test\"\n                            disabled={!canInstallCustomByond}\n                            className=\"w-md-50 w-lg-25 text-left\"\n                            label={\n                                this.state.customFile ? (\n                                    this.state.customFile.name\n                                ) : (\n                                    <FormattedMessage id=\"view.instance.engine.upload\" />\n                                )\n                            }\n                            accept=\".zip\"\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    customFile: e.target.files ? e.target.files[0] : null\n                                });\n                            }}\n                        />\n                    </OverlayTrigger>\n                </Form>\n            </React.Fragment>\n        );\n    }\n    private renderODInstall(): React.ReactNode {\n        const canInstallCustomOD = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallCustomOpenDreamVersion\n        );\n        const canInstallAndSwitchOD = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion\n        );\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.engine.add_od\" />\n                </h4>\n                <InputGroup className=\"w-md-50 w-lg-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"string\"\n                        defaultValue={this.state.latestODVersion.sourceSHA!}\n                        value={\n                            (this.state.selectedODVersion ?? this.state.latestODVersion).sourceSHA!\n                        }\n                        onChange={e => {\n                            this.setState({\n                                selectedODVersion: {\n                                    engine: EngineType.OpenDream,\n                                    sourceSHA: e.target.value\n                                }\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            overlay={this.tooltip(\"generic.no_perm\")}\n                            show={!canInstallAndSwitchOD ? undefined : false}>\n                            <Button\n                                variant=\"success\"\n                                disabled={!canInstallAndSwitchOD}\n                                onClick={async () => {\n                                    await this.switchVersion(\n                                        this.state.selectedODVersion ?? this.state.latestODVersion,\n                                        true\n                                    );\n                                }}>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <OverlayTrigger\n                        overlay={this.tooltip(\"generic.no_perm\")}\n                        show={!canInstallCustomOD ? undefined : false}>\n                        <Form.File\n                            custom\n                            id=\"test\"\n                            disabled={!canInstallCustomOD}\n                            className=\"w-md-50 w-lg-25 text-left\"\n                            label={\n                                this.state.customFile ? (\n                                    this.state.customFile.name\n                                ) : (\n                                    <FormattedMessage id=\"view.instance.engine.upload\" />\n                                )\n                            }\n                            accept=\".zip\"\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    customFile: e.target.files ? e.target.files[0] : null\n                                });\n                            }}\n                        />\n                    </OverlayTrigger>\n                </Form>\n            </React.Fragment>\n        );\n    }\n\n    private makeUniqueStringForVersion(engineVersion?: EngineVersion): string {\n        if (!engineVersion) {\n            return \"null-version\";\n        }\n\n        return `${engineVersion.engine}-${engineVersion.version ?? \"null\"}-${\n            engineVersion.sourceSHA ?? \"null\"\n        }-${engineVersion.customIteration ?? \"null\"}`;\n    }\n\n    public static friendlyVersion(engineVersion: EngineVersion): string {\n        let baseVersion: string;\n        switch (engineVersion.engine) {\n            case EngineType.Byond:\n                baseVersion = engineVersion.version!;\n                if (baseVersion.endsWith(\".0\")) {\n                    baseVersion = baseVersion.substring(0, baseVersion.length - 2);\n                }\n                break;\n            case EngineType.OpenDream:\n                baseVersion = `OD-${engineVersion.sourceSHA!.substring(0, 7)}`;\n                break;\n            default:\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                throw new Error(`Unknown engine type: ${engineVersion.engine}`);\n        }\n\n        if (engineVersion.customIteration) {\n            return `${baseVersion} (${engineVersion.customIteration})`;\n        }\n\n        return baseVersion;\n    }\n}\nEngine.contextType = InstanceEditContext;\nexport default Engine;\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ninterface IEvents {}\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (\n                    retryAfter: number,\n                    options: { method: string; url: string; request: { retryCount: number } }\n                ) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onAbuseLimit: (retryAfter: number, options: { method: string; url: string }) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getLatestDefaultCommit(\n        owner: string,\n        repo: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const repoData = await this.apiClient.repos.get({\n                owner,\n                repo\n            });\n\n            const branch = await this.apiClient.repos.getBranch({\n                owner,\n                repo,\n                branch: repoData.data.default_branch\n            });\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: branch.data.commit.sha\n            });\n        } catch (e) {\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n\n                        const majorVersion = parseInt(match[1][0]);\n                        if (majorVersion < 4) return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["JsonViewer","props","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","className","PageHelper","React","constructor","super","this","state","showGoto","gotoValue","currentPage","render","items","maxRight","Math","max","totalPages","maxLeft","min","Number","i","push","key","active","onClick","selectPage","ellipsis","disabled","findPopover","id","onSubmit","e","preventDefault","setState","type","value","onChange","parseInt","target","custom","_1","_2","_3","style","position","bottom","show","placement","overlay","prev","icon","Engine","initByond","version","engine","EngineType","initOD","sourceSHA","versions","errors","latestByondVersion","latestODVersion","loading","page","RouteData","addError","error","prevState","Array","from","hasEngineRight","context","instancePermissionSet","EngineRights","response","EngineClient","instance","code","StatusCode","payload","content","maxPage","response2","activeVersion","engineVersion","useCustom","customFile","arrayBuffer","undefined","installJob","JobsController","loadVersions","prevProps","odGetPromise","GithubClient","fetch","then","res","text","data","split","selectedByondVersion","catch","InternalError","ErrorCode","jsError","Error","odLatestCommit","newVer","selectedODVersion","makeUniqueStringForVersion","canSeeVersions","canSeeCurrent","canInstallAndSwitchByond","canInstallAndSwitchOD","canDelete","map","err","index","onClose","newarr","title","item","friendlyVersion","checked","async","switchVersion","htmlFor","tooltip","customIteration","ref","triggerHandler","fixedWidth","variant","faTrash","newPage","values","renderByondInstall","renderODInstall","innerid","canInstallCustomByond","defaultValue","arr","join","faPlus","label","accept","files","canInstallCustomOD","baseVersion","endsWith","substring","length","contextType","InstanceEditContext","hook","request","route","parameters","endpoint","merge","headers","authorization","auth","tokenType","token","authStrategy","Object","assign","bind","TypedEmitter","apiClient","octo","Octokit","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","console","warn","method","url","retryCount","log","onAbuseLimit","owner","repo","repoData","repos","get","branch","getBranch","default_branch","InternalStatus","commit","sha","current","all","oldversions","paginate","listReleases","done","reduce","result","release","match","exec","old","body","transformPR","pr","number","author","user","login","merged_at","link","html_url","head","tail","base","testmergelabel","labels","some","toLowerCase","includes","wantedPRs","pulls","list","wantedPR","find","pull_number","wantedCommit","extraCommit","listCommits","per_page","message","reverse","_extraCommit","getCommit","path","getContent","mediaType","format","isArray","raw","forEach","element","isDirectory"],"sourceRoot":""}