{"version":3,"file":"9838.dadc91324f794f1f89cc.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/translations/Translation.ts","webpack://tgstation-server-control-panel/./src/translations/TranslationFactory.ts","webpack://tgstation-server-control-panel/./src/App.tsx","webpack://tgstation-server-control-panel/./src/components/utils/Loading.tsx","webpack://tgstation-server-control-panel/./src/contexts/GeneralContext.ts","webpack://tgstation-server-control-panel/./src/utils/misc.ts","webpack://tgstation-server-control-panel/./src/translations/locales/ lazy ^\\.\\/.*\\.json$ namespace object"],"sourcesContent":["import ILocalization from \"./ILocalization\";\nimport ITranslation from \"./ITranslation\";\n\nexport default class Translation implements ITranslation {\n    public constructor(public readonly locale: string, public readonly messages: ILocalization) {}\n}\n","import ITranslation from \"./ITranslation\";\nimport ITranslationFactory from \"./ITranslationFactory\";\nimport Locales from \"./Locales\";\nimport Translation from \"./Translation\";\n\nclass TranslationFactory implements ITranslationFactory {\n    private static readonly fallbackLocale: string = Locales.en;\n\n    private static getShortHandedLocale(locale: string): string {\n        return locale.split(\"-\")[0];\n    }\n\n    public async loadTranslation(locale: string): Promise<ITranslation> {\n        //fancy type annotations but its just load the json file in this variable as a map of strings to strings\n        const localization: { [key: string]: string } = (await import(\n            `./locales/${locale}.json`\n        )) as { [key: string]: string };\n\n        if (!localization) {\n            let shortHandedLocale = TranslationFactory.getShortHandedLocale(locale);\n            if (shortHandedLocale === locale) {\n                if (shortHandedLocale === TranslationFactory.fallbackLocale)\n                    throw new Error(\"Invalid locale: \" + locale);\n                shortHandedLocale = TranslationFactory.fallbackLocale;\n            }\n            return await this.loadTranslation(shortHandedLocale);\n        }\n\n        let model: ITranslation | null = null;\n        try {\n            model = new Translation(locale, localization);\n        } catch (e) {\n            throw Error(`Error loading localization for locale '${locale}': ${JSON.stringify(e)}`);\n        }\n\n        return model;\n    }\n}\n\nexport default TranslationFactory;\n","import \"./App.css\";\n\n// polyfills\nimport * as React from \"react\";\nimport { Suspense } from \"react\";\nimport { IntlProvider } from \"react-intl\";\n\nimport InternalError, {\n    ErrorCode,\n    GenericErrors\n} from \"./ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"./ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport UserClient from \"./ApiClient/UserClient\";\nimport LoginHooks from \"./ApiClient/util/LoginHooks\";\nimport Loading from \"./components/utils/Loading\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport ITranslation from \"./translations/ITranslation\";\nimport ITranslationFactory from \"./translations/ITranslationFactory\";\nimport TranslationFactory from \"./translations/TranslationFactory\";\n\nconst polyfills = import(\"./polyfills\");\nconst icolibrary = import(\"./utils/icolibrary\");\nconst ConfigController = import(\"./ApiClient/util/ConfigController\");\nconst JobsController = import(\"./ApiClient/util/JobsController\");\nconst InnerApp = React.lazy(() => import(\"./InnerApp\"));\n\ninterface IState {\n    translation?: ITranslation;\n    translationError?: string;\n    loggedIn: boolean;\n    loggedOut: boolean;\n    loading: boolean;\n    polyfills: boolean;\n    GeneralContextInfo: UnsafeGeneralContext;\n}\n\ninterface IProps {\n    readonly locale: string;\n    readonly translationFactory?: ITranslationFactory;\n}\n\nclass App extends React.Component<IProps, IState> {\n    private readonly translationFactory: ITranslationFactory;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.finishLogin = this.finishLogin.bind(this);\n        this.finishLogout = this.finishLogout.bind(this);\n        this.updateContextUser = this.updateContextUser.bind(this);\n        this.updateContextServer = this.updateContextServer.bind(this);\n        this.deleteGeneralContextError = this.deleteGeneralContextError.bind(this);\n\n        this.translationFactory = this.props.translationFactory ?? new TranslationFactory();\n\n        this.state = {\n            loggedIn: false,\n            loggedOut: false,\n            loading: true,\n            polyfills: false,\n            GeneralContextInfo: {\n                errors: new Set(),\n                user: null,\n                serverInfo: null,\n                deleteError: this.deleteGeneralContextError\n            }\n        };\n    }\n\n    private async updateContextUser() {\n        const response = await UserClient.getCurrentUser();\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                return {\n                    GeneralContextInfo: {\n                        errors: prev.GeneralContextInfo.errors,\n                        user: response.payload,\n                        serverInfo: prev.GeneralContextInfo.serverInfo,\n                        deleteError: prev.GeneralContextInfo.deleteError\n                    }\n                };\n            });\n        } else {\n            if (response.error.code === ErrorCode.HTTP_ACCESS_DENIED) {\n                this.setState(prev => {\n                    return {\n                        GeneralContextInfo: {\n                            user: null,\n                            serverInfo: prev.GeneralContextInfo.serverInfo,\n                            deleteError: prev.GeneralContextInfo.deleteError,\n                            errors: prev.GeneralContextInfo.errors\n                        }\n                    };\n                });\n            } else {\n                setTimeout(() => void this.updateContextUser(), 5000);\n                this.setState(prev => {\n                    const newSet = new Set(prev.GeneralContextInfo.errors);\n                    newSet.add(response.error);\n                    return {\n                        GeneralContextInfo: {\n                            errors: newSet,\n                            deleteError: prev.GeneralContextInfo.deleteError,\n                            user: null,\n                            serverInfo: prev.GeneralContextInfo.serverInfo\n                        }\n                    };\n                });\n            }\n        }\n    }\n\n    private async updateContextServer(lastError?: InternalError<GenericErrors>) {\n        const response = await ServerClient.getServerInfo();\n        if (response.code === StatusCode.OK) {\n            this.setState(prev => {\n                const newSet = new Set(prev.GeneralContextInfo.errors);\n                if (lastError) {\n                    newSet.delete(lastError);\n                }\n                return {\n                    GeneralContextInfo: {\n                        errors: newSet,\n                        user: prev.GeneralContextInfo.user,\n                        serverInfo: response.payload,\n                        deleteError: prev.GeneralContextInfo.deleteError\n                    }\n                };\n            });\n        } else {\n            setTimeout(() => void this.updateContextServer(response.error), 5000);\n            this.setState(prev => {\n                const newSet = new Set(prev.GeneralContextInfo.errors);\n                newSet.add(response.error);\n                if (lastError) {\n                    newSet.delete(lastError);\n                }\n                return {\n                    GeneralContextInfo: {\n                        errors: newSet,\n                        deleteError: prev.GeneralContextInfo.deleteError,\n                        user: prev.GeneralContextInfo.user,\n                        serverInfo: null\n                    }\n                };\n            });\n        }\n    }\n\n    public deleteGeneralContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.GeneralContextInfo.errors);\n            newSet.delete(error);\n            return {\n                GeneralContextInfo: {\n                    deleteError: prev.GeneralContextInfo.deleteError,\n                    user: prev.GeneralContextInfo.user,\n                    serverInfo: prev.GeneralContextInfo.serverInfo,\n                    errors: newSet\n                }\n            };\n        });\n    }\n\n    private finishLogin() {\n        console.log(\"Logging in\");\n\n        void this.updateContextUser().then(() =>\n            this.setState({\n                loggedIn: true,\n                loading: false\n            })\n        );\n    }\n\n    private finishLogout() {\n        this.setState({\n            loggedIn: false,\n            loggedOut: true\n        });\n\n        void this.updateContextUser();\n    }\n    public async componentDidMount(): Promise<void> {\n        // dont lag the dom\n        const initIcons = await icolibrary;\n        initIcons.default();\n        (await ConfigController).default.loadconfig();\n        (await JobsController).default.init();\n\n        LoginHooks.on(\"loginSuccess\", this.finishLogin);\n        ServerClient.on(\"logout\", this.finishLogout);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.on(\"purgeCache\", this.updateContextServer);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.on(\"purgeCache\", this.updateContextUser);\n\n        await polyfills;\n\n        this.setState({ polyfills: true });\n\n        await this.loadTranslation();\n        const loggedInSuccessfully = await ServerClient.initApi();\n        await this.updateContextServer();\n        if (loggedInSuccessfully) {\n            await this.updateContextUser();\n        }\n\n        this.setState({\n            loading: false,\n            loggedIn: loggedInSuccessfully\n        });\n    }\n\n    public componentWillUnmount(): void {\n        LoginHooks.removeListener(\"loginSuccess\", this.finishLogin);\n        ServerClient.removeListener(\"logout\", this.finishLogout);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.removeListener(\"purgeCache\", this.updateContextServer);\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        ServerClient.removeListener(\"purgeCache\", this.updateContextUser);\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.polyfills) {\n            return <Loading>Loading polyfills...</Loading>;\n        }\n\n        if (this.state.translationError) {\n            return <p className=\"App-error\">{this.state.translationError}</p>;\n        }\n\n        if (!this.state.translation) {\n            return <Loading>Loading translations...</Loading>;\n        }\n        return (\n            <IntlProvider\n                locale={this.state.translation.locale}\n                messages={this.state.translation.messages}\n                defaultLocale=\"en\">\n                <Suspense fallback={<Loading text=\"loading.app\" />}>\n                    <GeneralContext.Provider\n                        value={this.state.GeneralContextInfo as GeneralContext}>\n                        <InnerApp\n                            loading={this.state.loading}\n                            loggedIn={this.state.loggedIn}\n                            loggedOut={this.state.loggedOut}\n                        />\n                    </GeneralContext.Provider>\n                </Suspense>\n            </IntlProvider>\n        );\n    }\n\n    private async loadTranslation(): Promise<void> {\n        console.time(\"LoadTranslations\");\n        try {\n            const translation = await this.translationFactory.loadTranslation(this.props.locale);\n            this.setState({\n                translation\n            });\n        } catch (error) {\n            this.setState({\n                translationError: JSON.stringify(error) ?? \"An unknown error occurred\"\n            });\n\n            return;\n        }\n\n        console.timeEnd(\"LoadTranslations\");\n    }\n}\n\nexport default App;\n","import React, { Suspense } from \"react\";\nimport Spinner, { SpinnerProps } from \"react-bootstrap/Spinner\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst CssTransitionGroup = React.lazy(() => import(\"./CssTransitionGroup\"));\n\ntype IProps = SpinnerProps & {\n    animation: \"border\" | \"grow\";\n    center: boolean;\n    width: number;\n    widthUnit: string;\n    className?: string;\n    text?: string;\n    noIntl?: boolean;\n};\n\ninterface IState {}\n\nexport default class Loading extends React.Component<IProps, IState> {\n    public static defaultProps = {\n        animation: \"border\",\n        width: \"50\",\n        widthUnit: \"vmin\",\n        center: true\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Suspense fallback={this.renderSpinner()}>\n                <CssTransitionGroup>{this.renderSpinner()}</CssTransitionGroup>\n            </Suspense>\n        );\n    }\n\n    private renderSpinner(): NonNullable<React.ReactNode> {\n        const {\n            variant,\n            animation,\n            center,\n            className,\n            width,\n            widthUnit,\n            text,\n            children,\n            ...otherprops\n        } = this.props;\n        const styles: React.CSSProperties = {\n            width: `${width}${widthUnit}`,\n            height: `${width}${widthUnit}`\n        } as React.CSSProperties;\n\n        return (\n            <div className={center ? \"text-center\" : \"\"}>\n                <Spinner\n                    variant={variant ? variant : \"secondary\"}\n                    className={center ? `d-block mx-auto ${className ?? \"\"}` : className}\n                    style={styles}\n                    animation={animation ? animation : \"border\"}\n                    {...otherprops}\n                />\n                {text ? this.props.noIntl ? text : <FormattedMessage id={text} /> : \"\"}\n                {children}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\n\nimport type { ServerInformationResponse, UserResponse } from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type GeneralContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n};\n\n//same as GeneralContext except used for components which arent loading under the router so we cant guarentee that serverInfo and user wont be null\nexport type UnsafeGeneralContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    user: UserResponse | null;\n    serverInfo: ServerInformationResponse | null;\n};\n\nexport const GeneralContext = React.createContext<GeneralContext>(\n    (undefined as unknown) as GeneralContext\n);\n","import { pathToRegexp } from \"path-to-regexp\";\n\nimport {\n    AdministrationRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    EngineRights,\n    InstanceManagerRights,\n    InstancePermissionSetResponse,\n    InstancePermissionSetRights,\n    PermissionSet,\n    RepositoryRights,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\n\nexport type DistributiveOmit<T, K extends keyof T> = T extends T ? Omit<T, K> : never;\n\nfunction download(filename: string, text: string): void {\n    const element = document.createElement(\"a\");\n    element.setAttribute(\"href\", \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text));\n    element.setAttribute(\"download\", filename);\n\n    element.style.display = \"none\";\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nfunction replaceAll(str: string, find: string, replace: string, ignore?: boolean): string {\n    return str.replace(\n        new RegExp(find.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g, \"\\\\$&\"), ignore ? \"gi\" : \"g\"),\n        replace.replace(/\\$/g, \"$$$$\")\n    );\n}\n\nfunction matchesPath(path: string, target: string, exact = false): boolean {\n    //remove trailing slashes\n    if (path.slice(-1) === \"/\") path = path.slice(0, -1);\n    if (target.slice(-1) === \"/\") target = target.slice(0, -1);\n\n    return pathToRegexp(target, undefined, { end: exact }).test(path);\n}\n\nfunction resolvePermissionSet(user: UserResponse): PermissionSet {\n    return (user.permissionSet ?? user.group?.permissionSet) as PermissionSet;\n}\n\nfunction bitflagIsTrue(bitfield: number, bitflag: number): boolean {\n    return !!(bitflag & bitfield);\n}\n\nfunction hasAdminRight(permissionSet: PermissionSet, right: AdministrationRights): boolean {\n    return bitflagIsTrue(permissionSet.administrationRights, right);\n}\n\nfunction hasInstanceManagerRight(\n    permissionSet: PermissionSet,\n    right: InstanceManagerRights\n): boolean {\n    return bitflagIsTrue(permissionSet.instanceManagerRights, right);\n}\n\nfunction hasEngineRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: EngineRights\n): boolean {\n    return bitflagIsTrue(permissionSet.engineRights, right);\n}\n\nfunction hasChatBotRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: ChatBotRights\n): boolean {\n    return bitflagIsTrue(permissionSet.chatBotRights, right);\n}\n\nfunction hasConfigRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: ConfigurationRights\n): boolean {\n    return bitflagIsTrue(permissionSet.configurationRights, right);\n}\n\nfunction hasDreamDaemonRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: DreamDaemonRights\n): boolean {\n    return bitflagIsTrue(permissionSet.dreamDaemonRights, right);\n}\n\nfunction hasDreamMakerRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: DreamMakerRights\n): boolean {\n    return bitflagIsTrue(permissionSet.dreamMakerRights, right);\n}\n\nfunction hasInstancePermRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: InstancePermissionSetRights\n): boolean {\n    return bitflagIsTrue(permissionSet.instancePermissionSetRights, right);\n}\n\nfunction hasRepoRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: RepositoryRights\n): boolean {\n    return bitflagIsTrue(permissionSet.repositoryRights, right);\n}\n\nfunction hasFilesRight(\n    permissionSet: InstancePermissionSetResponse,\n    right: ConfigurationRights\n): boolean {\n    return bitflagIsTrue(permissionSet.configurationRights, right);\n}\n\nexport {\n    download,\n    replaceAll,\n    matchesPath,\n    resolvePermissionSet,\n    bitflagIsTrue,\n    hasAdminRight,\n    hasEngineRight,\n    hasConfigRight,\n    hasRepoRight,\n    hasChatBotRight,\n    hasInstancePermRight,\n    hasInstanceManagerRight,\n    hasDreamMakerRight,\n    hasDreamDaemonRight,\n    hasFilesRight\n};\n","var map = {\n\t\"./en.json\": [\n\t\t2422,\n\t\t2422\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__.t(id, 3 | 16);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 862;\nmodule.exports = webpackAsyncContext;"],"names":["Translation","constructor","locale","messages","TranslationFactory","split","localization","shortHandedLocale","getShortHandedLocale","fallbackLocale","Error","this","loadTranslation","model","e","JSON","stringify","Locales","polyfills","icolibrary","ConfigController","JobsController","InnerApp","React","App","props","super","translationFactory","finishLogin","bind","finishLogout","updateContextUser","updateContextServer","deleteGeneralContextError","state","loggedIn","loggedOut","loading","GeneralContextInfo","errors","Set","user","serverInfo","deleteError","response","UserClient","code","StatusCode","setState","prev","payload","error","ErrorCode","setTimeout","newSet","add","lastError","ServerClient","delete","console","log","then","default","loadconfig","init","LoginHooks","loggedInSuccessfully","componentWillUnmount","render","translationError","className","translation","defaultLocale","Suspense","fallback","Loading","text","GeneralContext","value","time","timeEnd","CssTransitionGroup","renderSpinner","variant","animation","center","width","widthUnit","children","otherprops","styles","height","style","noIntl","id","defaultProps","undefined","download","filename","element","document","createElement","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","replaceAll","str","find","replace","ignore","RegExp","matchesPath","path","target","exact","slice","pathToRegexp","end","test","resolvePermissionSet","permissionSet","group","bitflagIsTrue","bitfield","bitflag","hasAdminRight","right","administrationRights","hasInstanceManagerRight","instanceManagerRights","hasEngineRight","engineRights","hasChatBotRight","chatBotRights","hasDreamDaemonRight","dreamDaemonRights","hasDreamMakerRight","dreamMakerRights","hasInstancePermRight","instancePermissionSetRights","hasRepoRight","repositoryRights","hasFilesRight","configurationRights","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","ids","t","keys","Object","module","exports"],"sourceRoot":""}