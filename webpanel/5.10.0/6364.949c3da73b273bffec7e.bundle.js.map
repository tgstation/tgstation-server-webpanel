{"version":3,"file":"6364.949c3da73b273bffec7e.bundle.js","mappings":"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Cb0X,mBAAe1X,EACf2X,kBAAc3X,EACd4X,eAAgB,IAAI5R,IAEpB6R,YAAa,K,sBC/XjB,IAAI9W,EAAM,CACT,eAAgB,CACf,MACA,KACA,MAED,mBAAoB,CACnB,MACA,KACA,MAED,iBAAkB,CACjB,MACA,KACA,KACA,KACA,IACA,KAED,qBAAsB,CACrB,MACA,KACA,KACA,KACA,IACA,KAED,mBAAoB,CACnB,MACA,KACA,MAED,uBAAwB,CACvB,MACA,KACA,MAED,mBAAoB,CACnB,MACA,KAED,uBAAwB,CACvB,MACA,KAED,kBAAmB,CAClB,MACA,KACA,MAED,sBAAuB,CACtB,MACA,KACA,MAED,SAAU,CACT,MACA,MAED,aAAc,CACb,MACA,MAED,SAAU,CACT,MACA,KACA,MAED,aAAc,CACb,MACA,KACA,MAED,oBAAqB,CACpB,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,wBAAyB,CACxB,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,2BAA4B,CAC3B,MACA,KACA,KACA,IACA,MAED,+BAAgC,CAC/B,MACA,KACA,KACA,IACA,MAED,yBAA0B,CACzB,MACA,KACA,MAED,6BAA8B,CAC7B,MACA,KACA,MAED,6BAA8B,CAC7B,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,iCAAkC,CACjC,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,yBAA0B,CACzB,MACA,KACA,KACA,KACA,KACA,MAED,6BAA8B,CAC7B,MACA,KACA,KACA,KACA,KACA,MAED,wBAAyB,CACxB,MACA,KACA,KACA,IACA,MAED,4BAA6B,CAC5B,MACA,KACA,KACA,IACA,MAED,sCAAuC,CACtC,MACA,KACA,KACA,KACA,KAED,0CAA2C,CAC1C,MACA,KACA,KACA,KACA,KAED,6BAA8B,CAC7B,MACA,KACA,MAED,iCAAkC,CACjC,MACA,KACA,MAED,6BAA8B,CAC7B,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,iCAAkC,CACjC,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,yBAA0B,CACzB,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,6BAA8B,CAC7B,MACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,0BAA2B,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,KACA,MAED,8BAA+B,CAC9B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,KACA,MAED,kBAAmB,CAClB,MACA,MAED,sBAAuB,CACtB,MACA,MAED,kBAAmB,CAClB,MACA,KACA,KAED,sBAAuB,CACtB,MACA,KACA,KAED,UAAW,CACV,MAED,cAAe,CACd,MAED,UAAW,CACV,MACA,MAED,cAAe,CACd,MACA,MAED,gBAAiB,CAChB,MACA,MAED,oBAAqB,CACpB,MACA,MAED,cAAe,CACd,MACA,KACA,KACA,MAED,kBAAmB,CAClB,MACA,KACA,KACA,MAED,cAAe,CACd,KACA,KACA,MAED,kBAAmB,CAClB,KACA,KACA,OAGF,SAAS+W,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAElX,EAAKgX,GAC9B,OAAO5D,QAAQC,UAAUgB,MAAK,WAC7B,IAAIzB,EAAI,IAAIrM,MAAM,uBAAyByQ,EAAM,KAEjD,MADApE,EAAErV,KAAO,mBACHqV,KAIR,IAAIuE,EAAMnX,EAAIgX,GAAMlW,EAAKqW,EAAI,GAC7B,OAAO/D,QAAQmB,IAAI4C,EAAIC,MAAM,GAAGpX,IAAIiX,EAAoBrE,IAAIyB,MAAK,WAChE,OAAO4C,EAAoBnW,MAG7BiW,EAAoB9E,KAAO,WAAa,OAAOnS,OAAOmS,KAAKjS,IAC3D+W,EAAoBjW,GAAK,MACzBuW,EAAOC,QAAUP","sources":["webpack://tgstation-server-control-panel/./src/components/AppNavbar.tsx","webpack://tgstation-server-control-panel/./src/components/Logo.tsx","webpack://tgstation-server-control-panel/./src/components/ReportIssue.tsx","webpack://tgstation-server-control-panel/./src/components/utils/ErrorBoundary.tsx","webpack://tgstation-server-control-panel/./src/components/utils/Reload.tsx","webpack://tgstation-server-control-panel/./src/Router.tsx","webpack://tgstation-server-control-panel/./src/InnerApp.tsx","webpack://tgstation-server-control-panel/./src/components/utils/AccessDenied.tsx","webpack://tgstation-server-control-panel/./src/components/utils/ErrorAlert.tsx","webpack://tgstation-server-control-panel/./src/components/utils/GenericAlert.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobError.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobCard.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobsList.tsx","webpack://tgstation-server-control-panel/./src/components/views/Login.tsx","webpack://tgstation-server-control-panel/./src/utils/RouteController.ts","webpack://tgstation-server-control-panel/./src/utils/routes.ts","webpack://tgstation-server-control-panel/./src/components/views/ lazy ^\\.\\/.*$ namespace object"],"sourcesContent":["import \"./AppNavbar.css\";\n\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { NavDropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { SemVer } from \"semver\";\n\nimport AdminClient from \"../ApiClient/AdminClient\";\nimport { AdministrationRights } from \"../ApiClient/generatedcode/generated\";\nimport { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../ApiClient/ServerClient\";\nimport UserClient from \"../ApiClient/UserClient\";\nimport LoginHooks from \"../ApiClient/util/LoginHooks\";\nimport { GeneralContext, UnsafeGeneralContext } from \"../contexts/GeneralContext\";\nimport { hasAdminRight, matchesPath, resolvePermissionSet } from \"../utils/misc\";\nimport RouteController from \"../utils/RouteController\";\nimport { AppCategories, AppRoute, AppRoutes } from \"../utils/routes\";\n\ninterface IProps extends RouteComponentProps {\n    category?: {\n        name: string;\n        key: string;\n    };\n    loggedIn: boolean;\n}\n\ninterface IState {\n    //so we dont actually use the routes but it allows us to make react update the component\n    routes: AppRoute[];\n    categories: typeof AppCategories;\n    updateAvailable: boolean;\n}\n\nclass AppNavbar extends React.Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.logoutClick = this.logoutClick.bind(this);\n        this.loginSuccess = this.loginSuccess.bind(this);\n        this.logout = this.logout.bind(this);\n        this.refresh = this.refresh.bind(this);\n\n        this.state = {\n            routes: [],\n            categories: AppCategories,\n            updateAvailable: false\n        };\n    }\n\n    private loginSuccess(): void {\n        void this.checkShowServerUpdateIcon();\n    }\n\n    private async checkShowServerUpdateIcon(): Promise<void> {\n        await ServerClient.wait4Init();\n        const userResponse = await UserClient.getCurrentUser();\n        if (userResponse.code === StatusCode.ERROR) return;\n\n        const user = userResponse.payload;\n\n        const permissionSet = resolvePermissionSet(user);\n        if (hasAdminRight(permissionSet, AdministrationRights.ChangeVersion)) {\n            const response = await AdminClient.getAdminInfo();\n            if (response.code == StatusCode.OK) {\n                const latestVersion = new SemVer(response.payload.latestVersion);\n                const currentVersion = new SemVer(this.context.serverInfo!.version);\n\n                const updateAvailable = latestVersion.compare(currentVersion) === 1;\n\n                this.setState({\n                    updateAvailable\n                });\n            }\n        }\n    }\n\n    private logout() {\n        this.setState({\n            updateAvailable: false\n        });\n    }\n\n    private refresh(routes: Array<AppRoute>) {\n        this.setState({\n            routes\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        LoginHooks.on(\"loginSuccess\", this.loginSuccess);\n        ServerClient.on(\"logout\", this.logout);\n\n        this.setState({\n            routes: await RouteController.getRoutes()\n        });\n\n        RouteController.on(\"refresh\", this.refresh);\n    }\n\n    public componentWillUnmount(): void {\n        LoginHooks.removeListener(\"loginSuccess\", this.loginSuccess);\n        ServerClient.removeListener(\"logout\", this.logout);\n        RouteController.removeListener(\"refresh\", this.refresh);\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <React.Fragment>\n                <Navbar\n                    className=\"shadow-lg\"\n                    expand={this.props.loggedIn ? \"lg\" : undefined}\n                    collapseOnSelect\n                    variant=\"dark\"\n                    bg=\"primary\">\n                    <Navbar.Brand\n                        onClick={() => {\n                            this.props.history.push(AppRoutes.home.link ?? AppRoutes.home.route, {\n                                reload: true\n                            });\n                        }}\n                        className=\"mr-auto\">\n                        {this.renderVersion()}\n                    </Navbar.Brand>\n                    <Navbar.Toggle className=\"mr-2\" aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse className=\"text-right mr-2\" style={{ minWidth: \"0px\" }}>\n                        <Nav>\n                            {!this.props.loggedIn ? (\n                                <Nav.Item>\n                                    <Nav.Link\n                                        onClick={() => {\n                                            this.props.history.push(\n                                                AppRoutes.home.link ?? AppRoutes.home.route,\n                                                { reload: true }\n                                            );\n                                        }}\n                                        active={true}>\n                                        <FormattedMessage id=\"routes.login\" />\n                                    </Nav.Link>\n                                </Nav.Item>\n                            ) : (\n                                Object.values(this.state.categories).map(cat => {\n                                    if (!cat.leader.cachedAuth) return;\n                                    return cat.routes.length == 1 ? (\n                                        <Nav.Item key={cat.name}>\n                                            <Nav.Link\n                                                onClick={() => {\n                                                    this.props.history.push(\n                                                        cat.leader.link ?? cat.leader.route,\n                                                        { reload: true }\n                                                    );\n                                                }}\n                                                active={matchesPath(\n                                                    this.props.location.pathname,\n                                                    cat.leader.route,\n                                                    !cat.leader.navbarLoose\n                                                )}>\n                                                <FormattedMessage id={cat.leader.name} />\n                                            </Nav.Link>\n                                        </Nav.Item>\n                                    ) : (\n                                        <Nav.Item key={cat.name}>\n                                            <NavDropdown\n                                                id={cat.name + \"-dropdown\"}\n                                                title={<FormattedMessage id={cat.leader.name} />}>\n                                                {Object.values(cat.routes).filter(\n                                                    value => value.cachedAuth\n                                                ).length >= 2 ? (\n                                                    <React.Fragment>\n                                                        <NavDropdown.Item\n                                                            onClick={() => {\n                                                                this.props.history.push(\n                                                                    cat.leader.link ??\n                                                                        cat.leader.route,\n                                                                    { reload: true }\n                                                                );\n                                                            }}\n                                                            active={matchesPath(\n                                                                this.props.location.pathname,\n                                                                cat.leader.route,\n                                                                true\n                                                            )}>\n                                                            <FormattedMessage\n                                                                id={cat.leader.name}\n                                                            />\n                                                        </NavDropdown.Item>\n                                                        {cat.routes.map(val => {\n                                                            if (val.catleader) return; //we already display this but differently\n                                                            if (!val.cachedAuth) return;\n                                                            if (!val.visibleNavbar) return;\n\n                                                            return (\n                                                                <NavDropdown.Item\n                                                                    key={val.name}\n                                                                    onClick={() => {\n                                                                        this.props.history.push(\n                                                                            val.link ?? val.route,\n                                                                            {\n                                                                                reload: true\n                                                                            }\n                                                                        );\n                                                                    }}\n                                                                    active={matchesPath(\n                                                                        this.props.location\n                                                                            .pathname,\n                                                                        val.route,\n                                                                        !val.navbarLoose\n                                                                    )}>\n                                                                    <FormattedMessage\n                                                                        id={val.name}\n                                                                    />\n                                                                </NavDropdown.Item>\n                                                            );\n                                                        })}\n                                                    </React.Fragment>\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </NavDropdown>\n                                        </Nav.Item>\n                                    );\n                                })\n                            )}\n                        </Nav>\n                        {this.state.updateAvailable ? (\n                            <OverlayTrigger\n                                placement=\"right\"\n                                overlay={props => (\n                                    <Tooltip id=\"tgs-updated-tooltip\" {...props}>\n                                        <FormattedMessage id=\"navbar.update\" />\n                                    </Tooltip>\n                                )}>\n                                <h3>\n                                    <FontAwesomeIcon\n                                        className=\"tgs-update-notification\"\n                                        onClick={() =>\n                                            this.props.history.push(\n                                                AppRoutes.admin_update.link ??\n                                                    AppRoutes.admin_update.route,\n                                                { reload: true }\n                                            )\n                                        }\n                                        icon={faExclamationCircle}\n                                    />\n                                </h3>\n                            </OverlayTrigger>\n                        ) : (\n                            <React.Fragment />\n                        )}\n                        {this.renderUser()}\n                    </Navbar.Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n\n    private renderVersion(): React.ReactNode {\n        if (!this.context.serverInfo?.version) {\n            return <FormattedMessage id=\"loading.loading\" />;\n        }\n\n        return (\n            <React.Fragment>\n                <FormattedMessage id=\"generic.appname\" />\n                {\" v\"}\n                {this.context.serverInfo.version}\n            </React.Fragment>\n        );\n    }\n\n    private renderUser(): React.ReactNode {\n        if (!this.props.loggedIn)\n            return (\n                <React.Fragment>\n                    <Button\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.config.link ?? AppRoutes.config.route,\n                                { reload: true }\n                            );\n                        }}\n                        variant=\"primary\">\n                        <FontAwesomeIcon icon=\"cogs\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            this.props.history.push(AppRoutes.info.link ?? AppRoutes.info.route, {\n                                reload: true\n                            });\n                        }}\n                        variant=\"primary\">\n                        <FontAwesomeIcon icon=\"info-circle\" />\n                    </Button>\n                </React.Fragment>\n            );\n\n        return (\n            <Nav.Item className=\"ml-auto\">\n                <Dropdown>\n                    <Dropdown.Toggle\n                        id=\"user-dropdown\"\n                        type=\"button\"\n                        variant=\"primary\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\">\n                        {this.context.user ? (\n                            this.context.user.name\n                        ) : (\n                            <FormattedMessage id=\"loading.loading\" />\n                        )}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu alignRight className=\"text-right\">\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.info.link ?? AppRoutes.info.route,\n                                    { reload: true }\n                                );\n                            }}>\n                            <FormattedMessage id=\"routes.info\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.config.link ?? AppRoutes.config.route,\n                                    { reload: true }\n                                );\n                            }}>\n                            <FormattedMessage id=\"routes.config\" />\n                        </Dropdown.Item>\n                        {AppRoutes.passwd.cachedAuth ? (\n                            <Dropdown.Item\n                                onClick={() => {\n                                    this.props.history.push(\n                                        AppRoutes.passwd.link ?? AppRoutes.passwd.route,\n                                        { reload: true }\n                                    );\n                                }}>\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Dropdown.Item>\n                        ) : (\n                            \"\"\n                        )}\n                        <Dropdown.Item\n                            onClick={() => {\n                                ServerClient.emit(\"purgeCache\");\n                                this.props.history.replace(this.props.location.pathname, {\n                                    reload: true\n                                });\n                            }}>\n                            <FormattedMessage id=\"navbar.purgecache\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.replace(this.props.location.pathname, {\n                                    reload: true\n                                });\n                            }}>\n                            <FormattedMessage id=\"navbar.refresh\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={this.logoutClick}>\n                            <FormattedMessage id=\"navbar.logout\" />\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Nav.Item>\n        );\n    }\n\n    private logoutClick(): void {\n        ServerClient.logout();\n    }\n}\nAppNavbar.contextType = GeneralContext;\nexport default withRouter(AppNavbar);\n","import React from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport logo from \"../images/logo.svg\";\n\ninterface IProps {}\n\ninterface IState {}\n\nexport default class Logo extends React.Component<IProps, IState> {\n    public render(): React.ReactNode {\n        let memeSelector = 4;\n        return (\n            <OverlayTrigger\n                placement=\"left\"\n                onToggle={showing => {\n                    if (showing) {\n                        memeSelector = Math.round(Math.random() * 100) % 26;\n                    }\n                }}\n                overlay={props => (\n                    <Tooltip id=\"report-issue-tooltip\" {...props}>\n                        <FormattedMessage id={`view.meme_${memeSelector}`} />\n                    </Tooltip>\n                )}>\n                <img className=\"nowrap corner-logo\" width={50} height={50} src={logo} />\n            </OverlayTrigger>\n        );\n    }\n}\n","import { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IProps {}\n\ninterface IState {}\n\nexport default class ReportIssue extends React.Component<IProps, IState> {\n    public render(): React.ReactNode {\n        return (\n            <OverlayTrigger\n                placement=\"top\"\n                overlay={props => (\n                    <Tooltip id=\"report-issue-tooltip\" {...props}>\n                        <FormattedMessage id=\"view.report\" />\n                    </Tooltip>\n                )}>\n                <Button\n                    className=\"nowrap report-issue\"\n                    onClick={() =>\n                        window.open(\n                            \"https://github.com/tgstation/tgstation-server-webpanel/issues/new\"\n                        )\n                    }>\n                    <FontAwesomeIcon icon={faExclamationTriangle} />\n                </Button>\n            </OverlayTrigger>\n        );\n    }\n}\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    error?: Error;\n    errorInfo?: React.ErrorInfo;\n}\n\nclass ErrorBoundary extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {};\n    }\n\n    public componentDidUpdate(prevProps: IProps): void {\n        if (this.props.location.key !== prevProps.location.key) {\n            this.setState({\n                error: undefined,\n                errorInfo: undefined\n            });\n        }\n    }\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.setState({\n            error,\n            errorInfo\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.error) {\n            return (\n                <Container className=\"mt-5 mb-5\">\n                    <Card className=\"bg-transparent\" border=\"danger\">\n                        <Card.Header className=\"bg-danger\">\n                            <FormattedMessage id=\"error.somethingwentwrong\" />\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Title>\n                                {this.state.error.name}: {this.state.error.message}\n                            </Card.Title>\n                            <Card.Text as={\"pre\"} className=\"bg-transparent text-danger\">\n                                <code>\n                                    {`Webpanel Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nStack trace: ${\n                                        this.state.errorInfo?.componentStack ??\n                                        \"Unable to get stack info\"\n                                    }`}\n                                </code>\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            );\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default withRouter(ErrorBoundary);\n","import { Component, ReactNode } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\ninterface IProps\n    extends RouteComponentProps<\n        Record<string, string>,\n        {\n            statusCode?: number;\n        },\n        { reload?: boolean }\n    > {}\ninterface IState {\n    clear: boolean;\n}\n\nclass Reload extends Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {\n            clear: false\n        };\n    }\n    public componentDidUpdate(prevProps: IProps): void {\n        if (this.state.clear) {\n            this.setState({\n                clear: false\n            });\n            return;\n        }\n        if (\n            prevProps.match.path == this.props.match.path &&\n            prevProps.location.key != this.props.location.key &&\n            this.props.location.state?.reload\n        ) {\n            this.setState({\n                clear: true\n            });\n        }\n    }\n\n    public render(): ReactNode {\n        return this.state.clear ? \"\" : this.props.children;\n    }\n}\n\nexport default withRouter(Reload);\n","import loadable, { LoadableComponent } from \"@loadable/component\";\nimport * as React from \"react\";\nimport { Component, ComponentClass, ReactNode } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { CredentialsType } from \"./ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"./ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"./ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport AccessDenied from \"./components/utils/AccessDenied\";\nimport ErrorAlert from \"./components/utils/ErrorAlert\";\nimport ErrorBoundary from \"./components/utils/ErrorBoundary\";\nimport Loading from \"./components/utils/Loading\";\nimport Reload from \"./components/utils/Reload\";\nimport Login, { OAuthStateStorage } from \"./components/views/Login\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport { MODE } from \"./definitions/constants\";\nimport { matchesPath } from \"./utils/misc\";\nimport RouteController from \"./utils/RouteController\";\nimport { AppRoute, AppRoutes, RouteData } from \"./utils/routes\";\n\ninterface IState {\n    loading: boolean;\n    routes: Array<AppRoute>;\n    components: Map<string, LoadableComponent<unknown>>;\n}\ninterface IProps extends RouteComponentProps {\n    loggedIn: boolean;\n    loggedOut: boolean;\n    selectCategory: (category: string) => void;\n}\n\nconst LoadSpin = (page: string) => (\n    <Loading text={\"loading.page\"}>\n        <FormattedMessage id={page} />\n    </Loading>\n);\n\nconst NotFound = loadable(() => import(\"./components/utils/NotFound\"), {\n    fallback: LoadSpin(\"loading.page.notfound\")\n});\n\nclass Router extends Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.refreshListener = this.refreshListener.bind(this);\n\n        const components = new Map<string, LoadableComponent<unknown>>();\n\n        const routes = RouteController.getImmediateRoutes(false);\n        routes.forEach(route => {\n            components.set(\n                route.name,\n                //*should* always be a react component\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                loadable(() => import(`./components/views/${route.file}`), {\n                    fallback: LoadSpin(route.name)\n                })\n            );\n        });\n\n        this.state = {\n            loading: !!new URLSearchParams(window.location.search).get(\"state\"),\n            routes: RouteController.getImmediateRoutes(false),\n            components: components\n        };\n    }\n\n    private refreshListener(routes: Array<AppRoute>) {\n        this.setState({\n            routes\n        });\n    }\n\n    public async componentDidMount() {\n        RouteController.on(\"refreshAll\", this.refreshListener);\n\n        this.props.history.listen(location => {\n            void this.listener(location.pathname);\n        });\n        this.listener(this.props.location.pathname);\n\n        const URLSearch = new URLSearchParams(window.location.search);\n        const state = URLSearch.get(\"state\");\n        if (!state) {\n            this.setState({\n                loading: false\n            });\n            return;\n        }\n\n        if (MODE === \"PROD\" || MODE === \"GITHUB\") {\n            window.history.replaceState(null, document.title, window.location.pathname);\n        }\n\n        const oauthdata = JSON.parse(\n            window.sessionStorage.getItem(\"oauth\") ?? \"{}\"\n        ) as OAuthStateStorage;\n\n        const oauthstate = oauthdata[state];\n        if (!oauthstate) {\n            return this.setErrorAndEnd(\n                new InternalError(ErrorCode.LOGIN_BAD_OAUTH, {\n                    jsError: Error(`State(${state}) cannot be resolved to a provider.`)\n                })\n            );\n        }\n\n        const code = URLSearch.get(\"code\");\n        if (!code) {\n            return this.setErrorAndEnd(\n                new InternalError(ErrorCode.LOGIN_BAD_OAUTH, {\n                    jsError: Error(`Code not found.`)\n                })\n            );\n        }\n        this.props.history.replace(oauthstate.url);\n\n        const response = await ServerClient.login({\n            type: CredentialsType.OAuth,\n            provider: oauthstate.provider,\n            token: code\n        });\n\n        window.sessionStorage.removeItem(\"oauth\");\n\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                loading: false\n            });\n        } else {\n            return this.setErrorAndEnd(response.error);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        RouteController.removeListener(\"refreshAll\", this.refreshListener);\n    }\n\n    private setErrorAndEnd(error: InternalError<ErrorCode>) {\n        RouteData.oautherrors = [error];\n        this.setState({\n            loading: false\n        });\n    }\n\n    private listener(location: string) {\n        const routes = RouteController.getImmediateRoutes(false);\n        for (const route of routes) {\n            if (route.category && route.navbarLoose && matchesPath(location, route.route)) {\n                this.props.selectCategory(route.category);\n                break;\n            }\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.routes\" />;\n        }\n\n        return (\n            <ErrorBoundary>\n                <Reload>\n                    <div>\n                        <Switch>\n                            {this.state.routes.map(route => {\n                                if (!route.loginless && !this.props.loggedIn) return;\n\n                                return (\n                                    <Route\n                                        exact={!route.loose}\n                                        path={route.route}\n                                        key={route.name}\n                                        render={props => {\n                                            let Comp;\n\n                                            if (!route.cachedAuth) {\n                                                Comp = AccessDenied;\n                                            } else {\n                                                Comp = this.state.components.get(\n                                                    route.name\n                                                )! as ComponentClass;\n                                            }\n\n                                            return !this.context?.user && !route.loginless ? (\n                                                <Container>\n                                                    <ErrorAlert\n                                                        error={\n                                                            new InternalError(ErrorCode.APP_FAIL, {\n                                                                jsError: Error(\n                                                                    \"Router has no user in the general context\"\n                                                                )\n                                                            })\n                                                        }\n                                                    />\n                                                </Container>\n                                            ) : //Yeah I have no excuse for this, I didn't want to implement a route config option\n                                            // to allow a single route to work without server info so i added it as a check here\n                                            !this.context?.serverInfo &&\n                                              route != AppRoutes.config ? (\n                                                <Container>\n                                                    <ErrorAlert\n                                                        error={\n                                                            new InternalError(ErrorCode.APP_FAIL, {\n                                                                jsError: Error(\n                                                                    \"Router has no server info in the general context\"\n                                                                )\n                                                            })\n                                                        }\n                                                    />\n                                                </Container>\n                                            ) : route.noContainer ? (\n                                                <React.Fragment>\n                                                    <Comp {...props} />\n                                                </React.Fragment>\n                                            ) : (\n                                                <Container className=\"mt-5 mb-5\">\n                                                    <Comp {...props} />\n                                                </Container>\n                                            );\n                                        }}\n                                    />\n                                );\n                            })}\n                            <Container className=\"mt-5 mb-5\">\n                                <Route key=\"notfound\">\n                                    {this.props.loggedIn ? (\n                                        <NotFound />\n                                    ) : (\n                                        <Login loggedOut={this.props.loggedOut} />\n                                    )}\n                                </Route>\n                            </Container>\n                        </Switch>\n                    </div>\n                </Reload>\n            </ErrorBoundary>\n        );\n    }\n}\nRouter.contextType = GeneralContext;\nexport default withRouter(Router);\n","import React from \"react\";\nimport { Alert, Container } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Pkg from \"./../package.json\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport CredentialsProvider from \"./ApiClient/util/CredentialsProvider\";\nimport AppNavbar from \"./components/AppNavbar\";\nimport Logo from \"./components/Logo\";\nimport ReportIssue from \"./components/ReportIssue\";\nimport ErrorAlert from \"./components/utils/ErrorAlert\";\nimport ErrorBoundary from \"./components/utils/ErrorBoundary\";\nimport JobsList from \"./components/utils/JobsList\";\nimport Loading from \"./components/utils/Loading\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport { DEFAULT_BASEPATH } from \"./definitions/constants\";\nimport Router from \"./Router\";\n\ninterface InnerProps {\n    loading: boolean;\n    loggedIn: boolean;\n    loggedOut: boolean;\n}\n\ninterface InnerState {\n    passdownCat?: { name: string; key: string };\n}\n\nclass InnerApp extends React.Component<InnerProps, InnerState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: InnerProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount(): void {\n        document.title = \"TGS Webpanel v\" + Pkg.version;\n        // I can't be assed to remember the default admin password\n        document.addEventListener(\"keydown\", event => {\n            if (event.key === \"L\" && event.ctrlKey && event.shiftKey) {\n                ServerClient.logout();\n                void ServerClient.login(CredentialsProvider.default);\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <BrowserRouter\n                basename={\n                    window.publicPath\n                        ? new URL(window.publicPath, window.location.href).pathname\n                        : DEFAULT_BASEPATH\n                }>\n                <ErrorBoundary>\n                    <AppNavbar category={this.state.passdownCat} loggedIn={this.props.loggedIn} />\n                    {this.props.loading ? (\n                        <Container className=\"mt-5 mb-5\">\n                            <Loading text=\"loading.app\" />\n                        </Container>\n                    ) : (\n                        <>\n                            <Container className=\"mt-5\">\n                                <Alert variant=\"warning\" className=\"d-block d-lg-none\">\n                                    <Alert.Heading>\n                                        <FormattedMessage id=\"warning.screensize.header\" />\n                                    </Alert.Heading>\n                                    <hr />\n                                    <FormattedMessage id=\"warning.screensize\" />\n                                </Alert>\n                                {Array.from(this.context.errors.values()).map((value, idx) => {\n                                    return (\n                                        <ErrorAlert\n                                            error={value}\n                                            key={idx}\n                                            onClose={() => this.context.deleteError(value)}\n                                        />\n                                    );\n                                })}\n                            </Container>\n                            <Router\n                                loggedIn={this.props.loggedIn}\n                                loggedOut={this.props.loggedOut}\n                                selectCategory={cat => {\n                                    this.setState({\n                                        passdownCat: {\n                                            name: cat,\n                                            key: Math.random().toString()\n                                        }\n                                    });\n                                }}\n                            />\n                        </>\n                    )}\n                    {this.props.loggedIn ? <JobsList /> : null}\n                </ErrorBoundary>\n                <ReportIssue />\n                <Logo />\n            </BrowserRouter>\n        );\n    }\n}\nInnerApp.contextType = GeneralContext;\n\nexport default InnerApp;\n","import React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport GenericAlert from \"./GenericAlert\";\n\ninterface IProps extends RouteComponentProps {}\n\ninterface IState {\n    auth: boolean;\n}\n\nclass AccessDenied extends React.Component<IProps, IState> {\n    public render(): ReactNode {\n        const goBack = () => {\n            this.props.history.goBack();\n        };\n        return (\n            <GenericAlert title=\"generic.accessdenied\">\n                <Button variant=\"danger\" className=\"float-right\" onClick={goBack}>\n                    <FormattedMessage id=\"generic.goback\" />\n                </Button>\n            </GenericAlert>\n        );\n    }\n}\n\nexport default withRouter(AccessDenied);\n","import ClickToSelect from \"@mapbox/react-click-to-select\";\nimport React, { Component, ReactNode } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport InternalError, {\n    DescType,\n    ErrorCode\n} from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { API_VERSION, MODE, VERSION } from \"../../definitions/constants\";\n\ninterface IProps {\n    error: InternalError<ErrorCode> | undefined;\n    onClose?: () => void;\n}\n\ninterface IState {\n    popup: boolean;\n}\n\nclass ErrorAlert extends Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {\n            popup: false\n        };\n    }\n    public render(): ReactNode {\n        if (!this.props.error) {\n            return \"\";\n        }\n\n        const handleClose = () => this.setState({ popup: false });\n        const handleOpen = () => this.setState({ popup: true });\n\n        return (\n            <Alert\n                className=\"clearfix\"\n                variant=\"error\"\n                dismissible={!!this.props.onClose}\n                onClose={this.props.onClose}>\n                <FormattedMessage id={this.props.error.code || \"error.app.undefined\"} />\n                <hr />\n\n                <Button variant=\"danger\" className=\"float-right\" onClick={handleOpen}>\n                    <FormattedMessage id=\"generic.details\" />\n                </Button>\n\n                <Modal centered show={this.state.popup} onHide={handleClose} size=\"lg\">\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id={this.props.error.code || \"error.app.undefined\"} />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className=\"text-danger pb-0\">\n                        {this.props.error.desc?.type === DescType.LOCALE ? (\n                            <FormattedMessage\n                                id={this.props.error.desc.desc || \"error.api.empty\"}\n                            />\n                        ) : this.props.error.desc?.desc ? (\n                            this.props.error.desc.desc\n                        ) : (\n                            \"\"\n                        )}\n                        <hr />\n                        <ClickToSelect>\n                            <code className=\"bg-darker d-block pre-wrap p-2 pre-scrollable\">\n                                {`Webpanel Version: ${VERSION}\nWebpanel Mode: ${MODE}\nAPI Version: ${API_VERSION}\n\nError Code: ${this.props.error.code}\nError Description: ${this.props.error.desc ? this.props.error.desc.desc : \"No description\"}\n\nAdditional Information:\n${this.props.error.extendedInfo}`.replace(/\\\\/g, \"\\\\\\\\\")}\n                            </code>\n                        </ClickToSelect>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <span className=\"font-italic mr-auto\">\n                            <FormattedMessage id=\"generic.debugwarn\" />\n                        </span>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            <FormattedMessage id=\"generic.close\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Alert>\n        );\n    }\n}\n\nexport default ErrorAlert;\n\nexport type ErrorState = [\n    Array<InternalError<ErrorCode> | undefined>,\n    React.Dispatch<React.SetStateAction<Array<InternalError<ErrorCode> | undefined>>>\n];\n\nfunction addError([, setErrors]: ErrorState, error: InternalError<ErrorCode>): void {\n    setErrors(prevState => {\n        const errors = Array.from(prevState);\n        errors.push(error);\n        return errors;\n    });\n}\n\nfunction displayErrors([errors, setErrors]: ErrorState): Array<JSX.Element | undefined> {\n    return errors.map((err, index) => {\n        if (!err) return;\n        return (\n            <ErrorAlert\n                key={index}\n                error={err}\n                onClose={() =>\n                    setErrors(prev => {\n                        const newarr = Array.from(prev);\n                        newarr[index] = undefined;\n                        return newarr;\n                    })\n                }\n            />\n        );\n    });\n}\n\nexport { displayErrors, addError };\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IProps {\n    title: string;\n    body?: string;\n    children?: JSX.Element;\n}\n\nexport default function GenericAlert(props: IProps): JSX.Element {\n    return (\n        <Alert className=\"clearfix\" variant=\"error\">\n            <FormattedMessage id={props.title} />\n            {props.body ? (\n                <React.Fragment>\n                    <hr />\n                    <FormattedMessage id={props.body} />\n                </React.Fragment>\n            ) : props.children ? (\n                <React.Fragment>\n                    <hr />\n                    {props.children}\n                </React.Fragment>\n            ) : null}\n        </Alert>\n    );\n}\n","import ClickToSelect from \"@mapbox/react-click-to-select\";\nimport React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ErrorCode as TGSErrorCode } from \"../../ApiClient/generatedcode/generated\";\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\n\ninterface IProps {\n    job: TGSJobResponse;\n}\n\nexport default function JobError(props: IProps): JSX.Element {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            <Button\n                variant=\"danger\"\n                className=\"d-inline-block\"\n                onClick={() => setOpen(true)}\n                size=\"sm\">\n                <FormattedMessage\n                    id=\"generic.errordetails\"\n                    values={{\n                        info:\n                            props.job.errorCode !== undefined && props.job.errorCode !== null\n                                ? TGSErrorCode[props.job.errorCode]\n                                : \"NoCode\"\n                    }}\n                />\n            </Button>\n\n            <Modal centered show={open} onHide={() => setOpen(false)} size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id={props.job.description} />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"text-danger pb-0\">\n                    <FormattedMessage id=\"view.instance.jobs.error\" />:{\" \"}\n                    {props.job.errorCode !== undefined && props.job.errorCode !== null\n                        ? TGSErrorCode[props.job.errorCode]\n                        : \"NoCode\"}\n                    <hr />\n                    <ClickToSelect>\n                        <code className=\"bg-darker d-block pre-wrap p-2 pre-scrollable\">\n                            {props.job.exceptionDetails}\n                        </code>\n                    </ClickToSelect>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setOpen(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Toast from \"react-bootstrap/Toast\";\nimport ToastBody from \"react-bootstrap/ToastBody\";\nimport ToastHeader from \"react-bootstrap/ToastHeader\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\n\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\nimport JobError from \"./JobError\";\n\ninterface IState {}\ninterface IProps {\n    job: TGSJobResponse;\n    width?: string;\n    onClose?: (job: TGSJobResponse) => void;\n    onCancel: (job: TGSJobResponse) => void;\n}\n\nexport default class JobCard extends React.Component<IProps, IState> {\n    public render(): ReactNode {\n        const job = this.props.job;\n        const createddate = new Date(job.startedAt);\n        const createddiff = (createddate.getTime() - Date.now()) / 1000;\n        const stoppeddate = new Date(job.stoppedAt ?? 0);\n        const stoppeddiff = (stoppeddate.getTime() - Date.now()) / 1000;\n        const variant =\n            job.errorCode !== undefined || job.exceptionDetails !== undefined\n                ? \"danger\"\n                : job.cancelled\n                ? \"warning\"\n                : job.stoppedAt\n                ? \"success\"\n                : \"info\";\n\n        return (\n            <Toast\n                className=\"mx-auto\"\n                key={job.id}\n                style={{\n                    maxWidth: this.props.width\n                }}\n                onClose={() => {\n                    if (this.props.onClose) this.props.onClose(job);\n                }}>\n                <ToastHeader\n                    closeButton={!!job.stoppedAt && !!this.props.onClose}\n                    className={`bg-${variant}`}>\n                    #{job.id}: {job.description}\n                </ToastHeader>\n                <ToastBody className=\"pt-1 text-white\">\n                    {/*STAGE*/}\n                    {job.stage ? <div className=\"mb-2\">▶{job.stage}</div> : null}\n                    {/*STARTED AT*/}\n                    <FormattedMessage id=\"app.job.started\" />\n                    <OverlayTrigger\n                        overlay={\n                            <Tooltip id={`${job.id}-tooltip-started`}>\n                                {createddate.toLocaleString()}\n                            </Tooltip>\n                        }>\n                        {({ ref, ...triggerHandler }) => (\n                            <span {...triggerHandler} ref={ref as React.Ref<HTMLSpanElement>}>\n                                <FormattedRelativeTime\n                                    value={createddiff}\n                                    numeric=\"auto\"\n                                    updateIntervalInSeconds={1}\n                                />\n                            </span>\n                        )}\n                    </OverlayTrigger>\n                    <br />\n\n                    {/*CREATED BY*/}\n                    <FormattedMessage id=\"app.job.startedby\" />\n                    <OverlayTrigger\n                        overlay={\n                            <Tooltip id={`${job.id}-tooltip-startedby`}>\n                                <FormattedMessage id=\"generic.userid\" />\n                                {job.startedBy.id}\n                            </Tooltip>\n                        }>\n                        {({ ref, ...triggerHandler }) => (\n                            <span ref={ref as React.Ref<HTMLSpanElement>} {...triggerHandler}>\n                                {job.startedBy.name}\n                            </span>\n                        )}\n                    </OverlayTrigger>\n                    <br />\n                    <br />\n                    {/*STOPPED AT*/}\n                    {job.stoppedAt ? (\n                        <React.Fragment>\n                            <FormattedMessage\n                                id={job.cancelled ? \"app.job.cancelled\" : \"app.job.completed\"}\n                            />\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${job.id}-tooltip-stopped`}>\n                                        {createddate.toLocaleString()}\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <span\n                                        {...triggerHandler}\n                                        ref={ref as React.Ref<HTMLSpanElement>}>\n                                        <FormattedRelativeTime\n                                            value={stoppeddiff}\n                                            numeric=\"auto\"\n                                            updateIntervalInSeconds={1}\n                                        />\n                                    </span>\n                                )}\n                            </OverlayTrigger>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                    {job.cancelledBy ? (\n                        <React.Fragment>\n                            <FormattedMessage id=\"app.job.cancelledby\" />\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${job.id}-tooltip-createdby`}>\n                                        <FormattedMessage id=\"generic.userid\" />\n                                        {job.startedBy.id}\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <span\n                                        ref={ref as React.Ref<HTMLSpanElement>}\n                                        {...triggerHandler}>\n                                        {job.cancelledBy!.name}\n                                    </span>\n                                )}\n                            </OverlayTrigger>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n\n                    {/*ERROR*/}\n                    {job.errorCode !== undefined || job.exceptionDetails !== undefined ? (\n                        <JobError job={job} />\n                    ) : (\n                        \"\"\n                    )}\n\n                    {/* PROGRESS BAR */}\n                    {job.stoppedAt == undefined ? (\n                        <div className=\"d-flex mt-2\" style={{ height: \"1.5rem\" }}>\n                            <ProgressBar\n                                className=\"text-darker font-weight-bold flex-grow-1 h-unset\"\n                                animated={!job.stoppedAt}\n                                label={\n                                    typeof job.progress === \"number\"\n                                        ? `${job.progress.toString()}%`\n                                        : undefined\n                                }\n                                now={typeof job.progress === \"number\" ? job.progress : 100}\n                                striped\n                                variant={variant}\n                            />\n                            {job.canCancel && !job.stoppedAt ? (\n                                <Button\n                                    style={{ padding: \"0 1em\" }}\n                                    className=\"ml-1\"\n                                    variant=\"danger\"\n                                    onClick={() => this.props.onCancel(job)}>\n                                    <FontAwesomeIcon icon=\"times\" className=\"d-block\" />\n                                </Button>\n                            ) : null}\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                </ToastBody>\n            </Toast>\n        );\n    }\n}\n","import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { OverlayInjectedProps } from \"react-bootstrap/Overlay\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Rnd } from \"react-rnd\";\n\nimport type { InstanceResponse } from \"../../ApiClient/generatedcode/generated\";\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport configOptions, { jobsWidgetOptions } from \"../../ApiClient/util/config\";\nimport JobsController from \"../../ApiClient/util/JobsController\";\nimport ErrorAlert from \"./ErrorAlert\";\nimport JobCard from \"./JobCard\";\nimport Loading from \"./Loading\";\n\ninterface IProps {\n    width?: string;\n    widget: boolean;\n}\n\ninterface IState {\n    jobs: Map<number, Map<number, TGSJobResponse>>;\n    errors: InternalError<ErrorCode>[];\n    nextRetrySeconds: number | null;\n    ownerrors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    instances: Map<number, InstanceResponse>;\n}\n\nexport default class JobsList extends React.Component<IProps, IState> {\n    public static defaultProps = {\n        widget: true\n    };\n\n    private widgetRef = React.createRef<HTMLDivElement>();\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.onCancel = this.onCancel.bind(this);\n        this.onClose = this.onClose.bind(this);\n\n        this.state = {\n            jobs: JobsController.jobsByInstance,\n            errors: [],\n            nextRetrySeconds: null,\n            ownerrors: [],\n            loading: true,\n            instances: new Map<number, InstanceResponse>()\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const ownerrors = Array.from(prevState.ownerrors);\n            ownerrors.push(error);\n            if (this.widgetRef.current) {\n                this.widgetRef.current.scrollTop = 0;\n            }\n            return {\n                ownerrors\n            };\n        });\n    }\n\n    public componentDidMount(): void {\n        JobsController.on(\"jobsLoaded\", this.handleUpdate);\n        this.handleUpdate();\n    }\n\n    public componentWillUnmount(): void {\n        JobsController.removeListener(\"jobsLoaded\", this.handleUpdate);\n    }\n\n    private currentTimeout?: NodeJS.Timeout | null;\n\n    public handleUpdate(): void {\n        if (this.currentTimeout) {\n            clearTimeout(this.currentTimeout);\n            this.currentTimeout = null;\n        }\n\n        let nextRetrySeconds;\n        if (JobsController.nextRetry) {\n            if (JobsController.nextRetry.getSeconds() > new Date().getSeconds()) {\n                nextRetrySeconds = JobsController.nextRetry.getSeconds() - new Date().getSeconds();\n            } else {\n                nextRetrySeconds = 0;\n            }\n            this.currentTimeout = setTimeout(() => this.handleUpdate(), 1000);\n        } else {\n            nextRetrySeconds = null;\n        }\n\n        this.setState({\n            jobs: JobsController.jobsByInstance,\n            errors: JobsController.errors,\n            nextRetrySeconds,\n            loading: false,\n            instances: JobsController.accessibleInstances\n        });\n    }\n\n    private async onCancel(job: TGSJobResponse) {\n        const status = await JobsController.cancelJob(job.id, error => this.addError(error));\n\n        if (!status) {\n            return;\n        }\n        JobsController.fastmode = 5;\n    }\n\n    private onClose(job: TGSJobResponse) {\n        JobsController.clearJob(job.id);\n    }\n\n    public render(): ReactNode {\n        if (!this.props.widget) return this.nested();\n\n        let totalJobs = 0;\n        for (const job of this.state.jobs.values()) {\n            totalJobs += job.size;\n        }\n\n        let display: boolean;\n        if (configOptions.jobswidgetdisplay.value === jobsWidgetOptions.NEVER) {\n            display = false;\n        } else if (configOptions.jobswidgetdisplay.value === jobsWidgetOptions.ALWAYS) {\n            display = true;\n        } else {\n            display = totalJobs > 0 || this.state.errors.length > 0;\n        }\n\n        return (\n            <div\n                style={{\n                    position: \"fixed\",\n                    top: 0,\n                    bottom: 0,\n                    right: 0,\n                    left: 0,\n                    pointerEvents: \"none\",\n                    zIndex: 5\n                }}>\n                <Rnd\n                    className={`jobswidget ${display ? \"\" : \"invisible\"}`}\n                    style={{\n                        pointerEvents: \"auto\",\n                        bottom: 0,\n                        right: 0\n                    }}\n                    default={{\n                        width: \"30vw\",\n                        height: \"50vh\",\n                        x:\n                            document.documentElement.clientWidth -\n                            Math.min(document.documentElement.clientWidth * 0.3, 350) -\n                            20,\n                        y:\n                            document.documentElement.clientHeight -\n                            document.documentElement.clientHeight * 0.5 -\n                            20\n                    }}\n                    maxWidth={350}\n                    minHeight={50}\n                    minWidth={110}\n                    bounds=\"parent\">\n                    <div className=\"fancyscroll overflow-auto h-100\" ref={this.widgetRef}>\n                        <h5 className=\"text-center text-darker font-weight-bold\">\n                            <FormattedMessage id=\"view.instance.jobs.title\" />\n                        </h5>\n                        {this.nested()}\n                    </div>\n                </Rnd>\n            </div>\n        );\n    }\n\n    private nested(): ReactNode {\n        return (\n            <div className={this.props.widget ? \"d-sm-block\" : \"\"}>\n                {this.state.loading ? <Loading text=\"loading.instance.jobs.list\" /> : \"\"}\n                {this.state.ownerrors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.ownerrors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        ownerrors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.errors.length > 0 ? (\n                    <React.Fragment>\n                        {this.state.errors.map((error, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{ maxWidth: this.props.widget ? 350 : \"unset\" }}>\n                                    <ErrorAlert error={error} />\n                                </div>\n                            );\n                        })}\n                        <Card>\n                            {this.state.nextRetrySeconds === 0 ? (\n                                <FormattedMessage id=\"view.instance.jobs.reconnect_now\"></FormattedMessage>\n                            ) : this.state.nextRetrySeconds != null ? (\n                                <FormattedMessage\n                                    id=\"view.instance.jobs.reconnect_in\"\n                                    values={{\n                                        seconds: this.state.nextRetrySeconds\n                                    }}></FormattedMessage>\n                            ) : (\n                                <FormattedMessage id=\"view.instance.jobs.reconnected_auth\"></FormattedMessage>\n                            )}\n                        </Card>\n                    </React.Fragment>\n                ) : null}\n                {Array.from(this.state.jobs)\n                    .sort((a, b) => a[0] - b[0])\n                    .map(([instanceid, jobMap]) => {\n                        const renderTooltip = (instanceid: number) => {\n                            return (props: OverlayInjectedProps) => (\n                                <Tooltip id={`tooltip-instance-${instanceid}`} {...props}>\n                                    {instanceid}\n                                </Tooltip>\n                            );\n                        };\n\n                        let xFinishedEnabled = false;\n                        jobMap.forEach(job => {\n                            if (job.stoppedAt) xFinishedEnabled = true;\n                        });\n\n                        const instanceHeaderStyle = xFinishedEnabled\n                            ? { marginTop: \"5px\", marginLeft: \"20px\" }\n                            : undefined;\n\n                        return (\n                            <React.Fragment key={instanceid}>\n                                <div className=\"bg-dark p-2 row\">\n                                    <div className={`col-${xFinishedEnabled ? 9 : 12} text-center`}>\n                                        <div style={instanceHeaderStyle}>\n                                            <OverlayTrigger overlay={renderTooltip(instanceid)}>\n                                                <React.Fragment>\n                                                    {this.state.instances.get(instanceid)?.name ??\n                                                        \"Unknown\"}{\" \"}\n                                                    (\n                                                    <FormattedMessage\n                                                        id=\"view.instance.jobs.jobtotal\"\n                                                        values={{ amount: jobMap.size }}\n                                                    />\n                                                    )\n                                                </React.Fragment>\n                                            </OverlayTrigger>\n                                        </div>\n                                    </div>\n                                    {xFinishedEnabled ? (\n                                        <div className=\"col-3 text-right\">\n                                            <OverlayTrigger\n                                                placement=\"top\"\n                                                overlay={props => (\n                                                    <Tooltip id=\"clear-instance-jobs\" {...props}>\n                                                        <FormattedMessage id=\"view.instance.jobs.clearfinished\" />\n                                                    </Tooltip>\n                                                )}>\n                                                <Button\n                                                    variant=\"outline-secondary\"\n                                                    onClick={() =>\n                                                        jobMap.forEach(job => {\n                                                            if (job.stoppedAt)\n                                                                JobsController.clearJob(job.id);\n                                                        })\n                                                    }\n                                                    className=\"nowrap\">\n                                                    <FontAwesomeIcon icon={faTimes} />\n                                                </Button>\n                                            </OverlayTrigger>\n                                        </div>\n                                    ) : (\n                                        <React.Fragment />\n                                    )}\n                                </div>\n                                {Array.from(jobMap, ([, job]) => job)\n                                    .sort((a, b) => b.id - a.id)\n                                    .map(job => (\n                                        <JobCard\n                                            job={job}\n                                            width={this.props.width}\n                                            key={job.id}\n                                            onClose={this.onClose}\n                                            onCancel={this.onCancel}\n                                        />\n                                    ))}\n                            </React.Fragment>\n                        );\n                    })}\n            </div>\n        );\n    }\n}\n","import { faInvision } from \"@fortawesome/free-brands-svg-icons\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons/faDiscord\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons/faGithub\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/esm/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { OAuthProvider } from \"../../ApiClient/generatedcode/generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport CredentialsProvider from \"../../ApiClient/util/CredentialsProvider\";\nimport { GeneralContext, UnsafeGeneralContext } from \"../../contexts/GeneralContext\";\nimport { MODE } from \"../../definitions/constants\";\nimport KeycloakLogo from \"../../images/keycloak_icon_64px.png\";\nimport TGLogo from \"../../images/tglogo-white.svg\";\nimport { RouteData } from \"../../utils/routes\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {\n    loggedOut: boolean;\n}\ninterface IState {\n    busy: boolean;\n    validated: boolean;\n    username: string;\n    password: string;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    redirectSetup?: boolean;\n}\n\nexport type StoredOAuthData = { provider: OAuthProvider; url: string };\nexport type OAuthStateStorage = Record<string, StoredOAuthData>;\n\nclass Login extends React.Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.submit = this.submit.bind(this);\n\n        console.log(RouteData.oautherrors);\n\n        this.state = {\n            busy: false,\n            validated: false,\n            username: \"\",\n            password: \"\",\n            errors: Array.from(RouteData.oautherrors)\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const oauthState =\n            window.sessionStorage.getItem(\"oauth\") ??\n            CredentialsProvider.credentials?.type === CredentialsType.OAuth;\n        if (!oauthState && (MODE === \"PROD\" || MODE === \"GITHUB\")) {\n            // noinspection ES6MissingAwait\n            await this.tryLoginDefault();\n        }\n    }\n\n    private async tryLoginDefault(): Promise<void> {\n        if (this.props.loggedOut) {\n            return;\n        }\n\n        const response = await ServerClient.login(CredentialsProvider.default);\n\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                redirectSetup: true\n            });\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): ReactNode {\n        const handleUsrInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ username: event.target.value });\n        const handlePwdInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password: event.target.value });\n\n        if (this.state.busy || CredentialsProvider.hasToken()) {\n            return <Loading text=\"loading.login\" />;\n        }\n\n        if (!this.context.serverInfo) {\n            return <Loading text=\"loading.serverinfo\" />;\n        }\n\n        const providers: Record<OAuthProvider, React.ReactNode> = {\n            [OAuthProvider.GitHub]: <FontAwesomeIcon icon={faGithub} style={{ width: \"1.2em\" }} />,\n            [OAuthProvider.Discord]: (\n                <FontAwesomeIcon icon={faDiscord} style={{ width: \"1.2em\" }} />\n            ),\n            [OAuthProvider.TGForums]: <img src={TGLogo} alt=\"tglogo\" style={{ width: \"1.2em\" }} />,\n            [OAuthProvider.Keycloak]: (\n                <img src={KeycloakLogo} alt=\"keycloaklogo\" style={{ width: \"1.2em\" }} />\n            ),\n            [OAuthProvider.InvisionCommunity]: (\n                <FontAwesomeIcon icon={faInvision} style={{ width: \"1.2em\" }} />\n            )\n        };\n\n        const providersTheme: Record<OAuthProvider, string | undefined> = {\n            GitHub: \"#161b22\",\n            Discord: \"#7289da\",\n            TGForums: undefined,\n            Keycloak: undefined,\n            InvisionCommunity: undefined\n        };\n\n        return (\n            <Col className=\"mx-auto\" lg={5} md={8}>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <Card body>\n                    <Card.Title>\n                        <FormattedMessage id=\"login.header\" />\n                    </Card.Title>\n                    <Card body>\n                        <Card.Title>\n                            <FormattedMessage id=\"login.type.generic\" />\n                        </Card.Title>\n                        <Form validated={this.state.validated} onSubmit={this.submit}>\n                            <Form.Group controlId=\"username\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.username\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter username\"\n                                    onChange={handleUsrInput}\n                                    value={this.state.username}\n                                    required\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"password\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    onChange={handlePwdInput}\n                                    value={this.state.password}\n                                    required\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\" block>\n                                <FormattedMessage id=\"login.submit\" />\n                            </Button>\n                        </Form>\n                    </Card>\n                    {(this.context.serverInfo?.oAuthProviderInfos?.Discord ||\n                        this.context.serverInfo?.oAuthProviderInfos?.GitHub ||\n                        this.context.serverInfo?.oAuthProviderInfos?.Keycloak ||\n                        this.context.serverInfo?.oAuthProviderInfos?.TGForums ||\n                        this.context.serverInfo?.oAuthProviderInfos?.InvisionCommunity) && (\n                        <>\n                            <hr />\n                            <Card body>\n                                <Card.Title>\n                                    <FormattedMessage id=\"login.type.oauth\" />\n                                </Card.Title>\n                                {Object.keys(this.context.serverInfo.oAuthProviderInfos ?? {}).map(\n                                    provider => {\n                                        const ptheme = providersTheme[provider as OAuthProvider];\n                                        return (\n                                            <Button\n                                                key={provider}\n                                                block\n                                                style={ptheme ? { background: ptheme } : undefined}\n                                                onClick={() =>\n                                                    this.startOAuth(provider as OAuthProvider)\n                                                }>\n                                                {providers[provider as OAuthProvider]}\n                                                <span className=\"ml-1\">\n                                                    <FormattedMessage\n                                                        id=\"login.oauth\"\n                                                        values={{ provider }}\n                                                    />\n                                                </span>\n                                            </Button>\n                                        );\n                                    }\n                                )}\n                            </Card>\n                        </>\n                    )}\n                </Card>\n            </Col>\n        );\n    }\n\n    private async startOAuth(provider: OAuthProvider): Promise<void> {\n        if (!this.context.serverInfo) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"serverInfo is null in startOAuth\")\n                })\n            );\n            return;\n        }\n\n        const stateArray = new Uint8Array(10);\n        window.crypto.getRandomValues(stateArray);\n        const state = Array.from(stateArray, dec => dec.toString(16).padStart(2, \"0\")).join(\"\");\n\n        let url: string | undefined = undefined;\n\n        const e = encodeURIComponent;\n\n        switch (provider) {\n            case OAuthProvider.Discord: {\n                url = `https://discord.com/api/oauth2/authorize?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Discord.clientId\n                )}&scope=identify&state=${e(state)}`;\n                const discordRedirect = this.context.serverInfo.oAuthProviderInfos.Discord\n                    .redirectUri;\n                if (discordRedirect) {\n                    url = `${url}&redirect_uri=${e(\n                        this.context.serverInfo.oAuthProviderInfos.Discord.redirectUri\n                    )}`;\n                }\n\n                break;\n            }\n            case OAuthProvider.GitHub: {\n                url = `https://github.com/login/oauth/authorize?client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.GitHub.clientId\n                )}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.GitHub.redirectUri\n                )}&state=${e(state)}&allow_signup=false`;\n                break;\n            }\n            case OAuthProvider.Keycloak: {\n                url = `${this.context.serverInfo.oAuthProviderInfos.Keycloak\n                    .serverUrl!}/protocol/openid-connect/auth?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Keycloak.clientId\n                )}&scope=openid&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Keycloak.redirectUri\n                )}`;\n                break;\n            }\n            case OAuthProvider.TGForums: {\n                url = `https://tgstation13.org/phpBB/app.php/tgapi/oauth/auth?scope=user&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.TGForums.clientId\n                )}&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.TGForums.redirectUri\n                )}`;\n                break;\n            }\n            case OAuthProvider.InvisionCommunity: {\n                url = `${this.context.serverInfo.oAuthProviderInfos.InvisionCommunity\n                    .serverUrl!}/oauth/authorize/?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.InvisionCommunity.clientId\n                )}&scope=profile&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.InvisionCommunity.redirectUri\n                )}`;\n                break;\n            }\n        }\n\n        const oauthdata = JSON.parse(\n            window.sessionStorage.getItem(\"oauth\") ?? \"{}\"\n        ) as OAuthStateStorage;\n        oauthdata[state] = {\n            provider: provider,\n            url: this.props.location.pathname\n        };\n\n        window.sessionStorage.setItem(\"oauth\", JSON.stringify(oauthdata));\n\n        window.location.href = url;\n\n        return new Promise(resolve => resolve());\n    }\n\n    private async submit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.setState({\n            busy: true\n        });\n        const response = await ServerClient.login({\n            type: CredentialsType.Password,\n            userName: this.state.username,\n            password: this.state.password\n        });\n        if (response.code == StatusCode.ERROR) {\n            this.setState({\n                busy: false\n            });\n            this.addError(response.error);\n        }\n    }\n}\nLogin.contextType = GeneralContext;\nexport default withRouter(Login);\n","import { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport LoginHooks from \"../ApiClient/util/LoginHooks\";\nimport {\n    AppCategories,\n    AppRoute,\n    AppRoutes,\n    UnpopulatedAppCategories,\n    UnpopulatedAppCategory\n} from \"./routes\";\n\ninterface IEvents {\n    refresh: (routes: Array<AppRoute>) => void; //auth\n    refreshAll: (routes: Array<AppRoute>) => void; //noauth+auth\n}\n\n//helper class to process AppRoutes\nclass RouteController extends TypedEmitter<IEvents> {\n    private refreshing = false;\n\n    public constructor() {\n        super();\n        window.rtcontroller = this;\n        this.refreshRoutes = this.refreshRoutes.bind(this);\n\n        LoginHooks.addHook(this.refreshRoutes);\n        this.refreshRoutes().catch(console.error);\n\n        //process categories\n        console.time(\"Category mapping\");\n        const catmap = new Map<string, UnpopulatedAppCategory>();\n\n        for (const [name, val] of Object.entries(UnpopulatedAppCategories)) {\n            val.routes = [];\n            //null asserted the name because that one is everywhere, even if the rest is partial\n            catmap.set(val.name!, val);\n            //@ts-expect-error typescript cannot infer that the name is a key of UnpopulatedAppCategories\n            AppCategories[name] = val;\n        }\n\n        for (const route of Object.values(AppRoutes)) {\n            if (!route.category) continue;\n\n            const cat = catmap.get(route.category);\n            if (!cat) {\n                console.error(\"Route has invalid category\", route);\n                continue;\n            }\n\n            //this is guaranteed to be an array as its set in the loop above\n            cat.routes!.push(route);\n\n            if (route.catleader) {\n                if (cat.leader) {\n                    console.error(\"Category has two leaders\", cat.leader, route);\n                    continue;\n                }\n                cat.leader = route;\n            }\n        }\n        console.log(\"Categories mapped\", catmap);\n        console.timeEnd(\"Category mapping\");\n    }\n\n    public async refreshRoutes() {\n        if (this.refreshing) {\n            console.log(\"Already refreshing\");\n            return;\n        } //no need to refresh twice\n\n        this.refreshing = true;\n\n        const work = []; //    we get all hidden routes no matter the authentification without waiting for the refresh\n        const routes = this.getImmediateRoutes(false);\n\n        for (const route of routes) {\n            route.cachedAuth = undefined;\n            if (route.isAuthorized) {\n                work.push(\n                    route.isAuthorized().then(auth => {\n                        route.cachedAuth = auth;\n                    })\n                );\n            } else {\n                route.cachedAuth = true;\n            }\n        }\n\n        await Promise.all(work); //wait for all the authorized calls to complete\n\n        this.emit(\"refresh\", this.getImmediateRoutes(true));\n        const routesNoAuth = this.getImmediateRoutes(false);\n        this.emit(\"refreshAll\", routesNoAuth);\n        this.refreshing = false;\n\n        console.log(\"Routes refreshed\", routesNoAuth);\n        return await this.getRoutes();\n    }\n\n    private wait4refresh() {\n        return new Promise<void>(resolve => {\n            if (!this.refreshing) {\n                resolve();\n                return;\n            }\n            this.on(\"refresh\", () => {\n                resolve();\n            });\n        });\n    }\n\n    public async getRoutes(auth = true): Promise<AppRoute[]> {\n        await this.wait4refresh();\n\n        return this.getImmediateRoutes(auth);\n    }\n\n    public getImmediateRoutes(auth = true) {\n        const results: Array<AppRoute> = [];\n\n        for (const val of Object.values(AppRoutes)) {\n            //we check for isauthorized here without calling because routes that lack the function are public\n            if (val.isAuthorized && !val.cachedAuth && auth) continue; //if not authorized and we only show authorized routes\n\n            results.push(val);\n        }\n\n        return results;\n    }\n}\n\nexport default new RouteController();\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\n\nimport { AdministrationRights, InstanceManagerRights } from \"../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../ApiClient/UserClient\";\nimport CredentialsProvider from \"../ApiClient/util/CredentialsProvider\";\nimport { resolvePermissionSet } from \"./misc\";\n\nexport interface AppRoute {\n    ///Base parameters\n    //must be unique, also is the id of the route name message\n    name: string;\n    //must be unique, url to access\n    route: string;\n    //link to link to when linking to the route, defaults to the \"route\"\n    link?: string;\n    //filename in components/view that the route should display\n    file: string;\n\n    ///Path parameters\n    //If subpaths should route here\n    loose: boolean;\n    //If subpaths should light up the navbar button\n    navbarLoose: boolean;\n\n    ///Authentication\n    //if we can route to it even on the login page\n    loginless?: boolean;\n    //function to tell if we are authorized\n    isAuthorized?: () => Promise<boolean>;\n    //result of isAuthorized() after RouteController runs it, can be used by components but only set by RouteController\n    cachedAuth?: boolean;\n\n    ///Visibility\n    //if this shows up on the navbar\n    visibleNavbar: boolean;\n    //serves two purposes, first one is to give it an icon, the second one is to not display it if the icon is undefined\n    homeIcon?: IconProp;\n\n    ///Categories\n    //name of the category it belongs to\n    category?: string;\n    //if this is the main button in the category\n    catleader?: boolean;\n\n    ///Misc\n    //Should we not wrap this component in a <Container>?\n    noContainer?: boolean;\n}\n\nfunction adminRight(right: AdministrationRights) {\n    return async (): Promise<boolean> => {\n        if (!CredentialsProvider.hasToken()) return false;\n        const response = await UserClient.getCurrentUser();\n\n        if (response.code == StatusCode.OK) {\n            return !!(resolvePermissionSet(response.payload).administrationRights & right);\n        }\n        return false;\n    };\n}\n\nfunction instanceManagerRight(right: InstanceManagerRights) {\n    return async (): Promise<boolean> => {\n        if (!CredentialsProvider.hasToken()) return false;\n        const response = await UserClient.getCurrentUser();\n\n        if (response.code == StatusCode.OK) {\n            return !!(resolvePermissionSet(response.payload).instanceManagerRights & right);\n        }\n        return false;\n    };\n}\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesAppRoute = <T>(et: { [K in keyof T]: AppRoute }) => et;\n\nconst AppRoutes = asElementTypesAppRoute({\n    home: {\n        name: \"routes.home\",\n        route: \"/\",\n        file: \"Home\",\n\n        loose: false,\n        navbarLoose: false,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"home\",\n        catleader: true\n    },\n    instancecreate: {\n        name: \"routes.instancecreate\",\n        route: \"/instances/create\",\n        file: \"Instance/Create\",\n\n        loose: false,\n        navbarLoose: false,\n\n        isAuthorized: instanceManagerRight(InstanceManagerRights.Create),\n\n        visibleNavbar: false,\n\n        category: \"instance\",\n        catleader: false\n    },\n    instancelist: {\n        name: \"routes.instancelist\",\n        route: \"/instances/\",\n        file: \"Instance/List\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: instanceManagerRight(InstanceManagerRights.List | InstanceManagerRights.Read),\n\n        visibleNavbar: true,\n        homeIcon: \"hdd\",\n\n        category: \"instance\",\n        catleader: true\n    },\n    instanceedit: {\n        name: \"routes.instanceedit\",\n        route: \"/instances/edit/:id(\\\\d+)/:tab?/\",\n        file: \"Instance/InstanceEdit\",\n\n        get link(): string {\n            return RouteData.selectedinstanceid !== undefined\n                ? `/instances/edit/${RouteData.selectedinstanceid}/${\n                      RouteData.selectedinstanceedittab !== undefined\n                          ? `${RouteData.selectedinstanceedittab}/`\n                          : \"\"\n                  }`\n                : AppRoutes.instancelist.link ?? AppRoutes.instancelist.route;\n        },\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"instance\"\n    },\n    instancejobs: {\n        name: \"routes.instancejobs\",\n        route: \"/instances/jobs/\",\n        file: \"Instance/Jobs\",\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"instance\"\n    },\n    userlist: {\n        name: \"routes.usermanager\",\n        route: \"/users/\",\n        file: \"User/List\",\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: \"user\",\n\n        category: \"user\",\n        catleader: true\n    },\n    useredit: {\n        name: \"routes.useredit\",\n        route: \"/users/edit/user/:id(\\\\d+)/:tab?/\",\n\n        //whole lot of bullshit just to make it that if you have an id, link to the edit page, otherwise link to the list page, and if you link to the user page, put the tab in\n        get link(): string {\n            return RouteData.selecteduserid !== undefined\n                ? `/users/edit/user/${RouteData.selecteduserid}/${\n                      RouteData.selectedusertab !== undefined ? `${RouteData.selectedusertab}/` : \"\"\n                  }`\n                : AppRoutes.userlist.link ?? AppRoutes.userlist.route;\n        },\n        file: \"User/Edit\",\n\n        loose: true,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"user\"\n    },\n    usercreate: {\n        name: \"routes.usercreate\",\n        route: \"/users/create/\",\n\n        link: \"/users/create/\",\n        file: \"User/Create\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.WriteUsers),\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"user\"\n    },\n    admin: {\n        name: \"routes.admin\",\n        route: \"/admin/\",\n        file: \"Administration\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(\n            AdministrationRights.ChangeVersion |\n                AdministrationRights.DownloadLogs |\n                AdministrationRights.UploadVersion\n        ),\n\n        visibleNavbar: true,\n        homeIcon: \"tools\",\n\n        category: \"admin\",\n        catleader: true\n    },\n    admin_update: {\n        name: \"routes.admin.update\",\n        route: \"/admin/update/:all?/\",\n        file: \"Admin/Update\",\n\n        link: \"/admin/update/\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(\n            AdministrationRights.ChangeVersion | AdministrationRights.UploadVersion\n        ),\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"admin\"\n    },\n    admin_logs: {\n        name: \"routes.admin.logs\",\n        route: \"/admin/logs/:name?/\",\n        link: \"/admin/logs/\",\n        file: \"Admin/Logs\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.DownloadLogs),\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"admin\",\n\n        noContainer: true\n    },\n    passwd: {\n        name: \"routes.passwd\",\n        route: \"/users/passwd/:id(\\\\d+)?/\",\n        link: \"/users/passwd/\",\n        file: \"ChangePassword\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.EditOwnPassword),\n\n        visibleNavbar: false,\n        homeIcon: \"key\"\n    },\n    config: {\n        name: \"routes.config\",\n        route: \"/config/\",\n        file: \"Configuration\",\n\n        loose: true,\n        navbarLoose: true,\n\n        loginless: true,\n\n        visibleNavbar: false,\n        homeIcon: \"cogs\"\n    },\n    setup: {\n        name: \"routes.setup\",\n        route: \"/setup/\",\n        file: \"Setup\",\n\n        loose: true,\n        navbarLoose: true,\n\n        loginless: true,\n\n        visibleNavbar: false\n    },\n    oAuth: {\n        name: \"routes.oauth\",\n        route: \"/oauth/:provider?/\",\n        file: \"Login\",\n\n        loose: true,\n        navbarLoose: false,\n\n        loginless: true,\n\n        visibleNavbar: false\n    },\n    info: {\n        name: \"routes.info\",\n        route: \"/info\",\n        file: \"Info\",\n\n        loose: false,\n        navbarLoose: false,\n\n        loginless: true,\n\n        visibleNavbar: true,\n        homeIcon: \"info-circle\",\n\n        category: undefined,\n        catleader: false\n    }\n});\n\nexport { AppRoutes };\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesCategory = <T>(et: { [K in keyof T]: UnpopulatedAppCategory }) => et;\n\nexport type UnpopulatedAppCategory = Partial<AppCategory>;\n\nexport interface AppCategory {\n    name: string; //doesnt really matter, kinda bullshit\n    routes: AppRoute[];\n    leader: AppRoute;\n}\n\nexport const UnpopulatedAppCategories = asElementTypesCategory({\n    home: {\n        name: \"home\"\n    },\n    instance: {\n        name: \"instance\"\n    },\n    user: {\n        name: \"user\"\n    },\n    admin: {\n        name: \"admin\"\n    }\n});\n\n// @ts-expect-error This is populated in the constructor after its populated\nexport const AppCategories: { [K in keyof typeof UnpopulatedAppCategories]: AppCategory } = {};\n\nexport const RouteData = {\n    selecteduserid: undefined as undefined | number,\n    selectedusertab: undefined as undefined | string,\n\n    selectedinstanceid: undefined as undefined | number,\n    selectedinstanceedittab: undefined as undefined | string,\n\n    instancelistpage: undefined as undefined | number,\n    loglistpage: undefined as undefined | number,\n    byondlistpage: undefined as undefined | number,\n    userlistpage: undefined as undefined | number,\n    jobhistorypage: new Map<number, number>(),\n\n    oautherrors: [] as InternalError<ErrorCode>[]\n};\n","var map = {\n\t\"./Admin/Logs\": [\n\t\t43408,\n\t\t5171,\n\t\t3408\n\t],\n\t\"./Admin/Logs.tsx\": [\n\t\t43408,\n\t\t5171,\n\t\t3408\n\t],\n\t\"./Admin/Update\": [\n\t\t80732,\n\t\t5171,\n\t\t5578,\n\t\t5006,\n\t\t724,\n\t\t732\n\t],\n\t\"./Admin/Update.tsx\": [\n\t\t80732,\n\t\t5171,\n\t\t5578,\n\t\t5006,\n\t\t724,\n\t\t732\n\t],\n\t\"./Administration\": [\n\t\t29363,\n\t\t5171,\n\t\t9363\n\t],\n\t\"./Administration.tsx\": [\n\t\t29363,\n\t\t5171,\n\t\t9363\n\t],\n\t\"./ChangePassword\": [\n\t\t61304,\n\t\t799\n\t],\n\t\"./ChangePassword.tsx\": [\n\t\t61304,\n\t\t799\n\t],\n\t\"./Configuration\": [\n\t\t67671,\n\t\t7806,\n\t\t7671\n\t],\n\t\"./Configuration.tsx\": [\n\t\t67671,\n\t\t7806,\n\t\t7671\n\t],\n\t\"./Home\": [\n\t\t59638,\n\t\t9638\n\t],\n\t\"./Home.tsx\": [\n\t\t59638,\n\t\t9638\n\t],\n\t\"./Info\": [\n\t\t41051,\n\t\t5171,\n\t\t1051\n\t],\n\t\"./Info.tsx\": [\n\t\t41051,\n\t\t5171,\n\t\t1051\n\t],\n\t\"./Instance/Create\": [\n\t\t38747,\n\t\t9899,\n\t\t5856,\n\t\t3637,\n\t\t7179,\n\t\t7611,\n\t\t5578,\n\t\t5006,\n\t\t8747\n\t],\n\t\"./Instance/Create.tsx\": [\n\t\t38747,\n\t\t9899,\n\t\t5856,\n\t\t3637,\n\t\t7179,\n\t\t7611,\n\t\t5578,\n\t\t5006,\n\t\t8747\n\t],\n\t\"./Instance/Edit/ChatBots\": [\n\t\t90740,\n\t\t1767,\n\t\t5171,\n\t\t740,\n\t\t3318\n\t],\n\t\"./Instance/Edit/ChatBots.tsx\": [\n\t\t90740,\n\t\t1767,\n\t\t5171,\n\t\t740,\n\t\t3318\n\t],\n\t\"./Instance/Edit/Config\": [\n\t\t62685,\n\t\t5171,\n\t\t2685\n\t],\n\t\"./Instance/Edit/Config.tsx\": [\n\t\t62685,\n\t\t5171,\n\t\t2685\n\t],\n\t\"./Instance/Edit/Deployment\": [\n\t\t44298,\n\t\t9899,\n\t\t5856,\n\t\t5171,\n\t\t5578,\n\t\t2240,\n\t\t8067,\n\t\t9356\n\t],\n\t\"./Instance/Edit/Deployment.tsx\": [\n\t\t44298,\n\t\t9899,\n\t\t5856,\n\t\t5171,\n\t\t5578,\n\t\t2240,\n\t\t8067,\n\t\t9356\n\t],\n\t\"./Instance/Edit/Engine\": [\n\t\t32240,\n\t\t9899,\n\t\t5171,\n\t\t5578,\n\t\t2240,\n\t\t9657\n\t],\n\t\"./Instance/Edit/Engine.tsx\": [\n\t\t32240,\n\t\t9899,\n\t\t5171,\n\t\t5578,\n\t\t2240,\n\t\t9657\n\t],\n\t\"./Instance/Edit/Files\": [\n\t\t20926,\n\t\t3637,\n\t\t5171,\n\t\t926,\n\t\t3608\n\t],\n\t\"./Instance/Edit/Files.tsx\": [\n\t\t20926,\n\t\t3637,\n\t\t5171,\n\t\t926,\n\t\t3608\n\t],\n\t\"./Instance/Edit/InstancePermissions\": [\n\t\t87345,\n\t\t4803,\n\t\t5171,\n\t\t7345,\n\t\t246\n\t],\n\t\"./Instance/Edit/InstancePermissions.tsx\": [\n\t\t87345,\n\t\t4803,\n\t\t5171,\n\t\t7345,\n\t\t246\n\t],\n\t\"./Instance/Edit/JobHistory\": [\n\t\t25921,\n\t\t5171,\n\t\t5921\n\t],\n\t\"./Instance/Edit/JobHistory.tsx\": [\n\t\t25921,\n\t\t5171,\n\t\t5921\n\t],\n\t\"./Instance/Edit/Repository\": [\n\t\t18264,\n\t\t5856,\n\t\t7611,\n\t\t5171,\n\t\t5578,\n\t\t4757,\n\t\t8264,\n\t\t5233\n\t],\n\t\"./Instance/Edit/Repository.tsx\": [\n\t\t18264,\n\t\t5856,\n\t\t7611,\n\t\t5171,\n\t\t5578,\n\t\t4757,\n\t\t8264,\n\t\t5233\n\t],\n\t\"./Instance/Edit/Server\": [\n\t\t86046,\n\t\t9899,\n\t\t7179,\n\t\t5171,\n\t\t5578,\n\t\t2240,\n\t\t8067,\n\t\t4792\n\t],\n\t\"./Instance/Edit/Server.tsx\": [\n\t\t86046,\n\t\t9899,\n\t\t7179,\n\t\t5171,\n\t\t5578,\n\t\t2240,\n\t\t8067,\n\t\t4792\n\t],\n\t\"./Instance/InstanceEdit\": [\n\t\t9182,\n\t\t9899,\n\t\t5856,\n\t\t3637,\n\t\t7179,\n\t\t7611,\n\t\t4803,\n\t\t1767,\n\t\t5171,\n\t\t5578,\n\t\t4757,\n\t\t3165,\n\t\t2240,\n\t\t8067,\n\t\t8264,\n\t\t740,\n\t\t926,\n\t\t7345,\n\t\t9182\n\t],\n\t\"./Instance/InstanceEdit.tsx\": [\n\t\t9182,\n\t\t9899,\n\t\t5856,\n\t\t3637,\n\t\t7179,\n\t\t7611,\n\t\t4803,\n\t\t1767,\n\t\t5171,\n\t\t5578,\n\t\t4757,\n\t\t3165,\n\t\t2240,\n\t\t8067,\n\t\t8264,\n\t\t740,\n\t\t926,\n\t\t7345,\n\t\t9182\n\t],\n\t\"./Instance/Jobs\": [\n\t\t41818,\n\t\t1818\n\t],\n\t\"./Instance/Jobs.tsx\": [\n\t\t41818,\n\t\t1818\n\t],\n\t\"./Instance/List\": [\n\t\t70670,\n\t\t5171,\n\t\t670\n\t],\n\t\"./Instance/List.tsx\": [\n\t\t70670,\n\t\t5171,\n\t\t670\n\t],\n\t\"./Login\": [\n\t\t9310\n\t],\n\t\"./Login.tsx\": [\n\t\t9310\n\t],\n\t\"./Setup\": [\n\t\t12757,\n\t\t2757\n\t],\n\t\"./Setup.tsx\": [\n\t\t12757,\n\t\t2757\n\t],\n\t\"./User/Create\": [\n\t\t14898,\n\t\t4898\n\t],\n\t\"./User/Create.tsx\": [\n\t\t14898,\n\t\t4898\n\t],\n\t\"./User/Edit\": [\n\t\t11404,\n\t\t4803,\n\t\t5171,\n\t\t1404\n\t],\n\t\"./User/Edit.tsx\": [\n\t\t11404,\n\t\t4803,\n\t\t5171,\n\t\t1404\n\t],\n\t\"./User/List\": [\n\t\t8746,\n\t\t5171,\n\t\t8746\n\t],\n\t\"./User/List.tsx\": [\n\t\t8746,\n\t\t5171,\n\t\t8746\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 66235;\nmodule.exports = webpackAsyncContext;"],"names":["AppNavbar","React","constructor","props","super","this","logoutClick","bind","loginSuccess","logout","refresh","state","routes","categories","AppCategories","updateAvailable","checkShowServerUpdateIcon","ServerClient","userResponse","UserClient","code","StatusCode","user","payload","permissionSet","resolvePermissionSet","hasAdminRight","AdministrationRights","response","AdminClient","latestVersion","SemVer","currentVersion","context","serverInfo","version","compare","setState","LoginHooks","RouteController","componentWillUnmount","render","Navbar","className","expand","loggedIn","undefined","collapseOnSelect","variant","bg","onClick","history","push","AppRoutes","reload","renderVersion","style","minWidth","Nav","Object","values","map","cat","leader","cachedAuth","length","key","name","link","route","active","matchesPath","location","pathname","navbarLoose","id","NavDropdown","title","filter","value","val","catleader","visibleNavbar","OverlayTrigger","placement","overlay","Tooltip","icon","faExclamationCircle","renderUser","Dropdown","type","alignRight","replace","Button","contextType","GeneralContext","withRouter","Logo","memeSelector","onToggle","showing","Math","round","random","width","height","src","ReportIssue","window","open","faExclamationTriangle","ErrorBoundary","componentDidUpdate","prevProps","error","errorInfo","componentDidCatch","Container","Card","border","message","as","VERSION","MODE","componentStack","children","Reload","Component","clear","match","path","LoadSpin","page","Loading","text","NotFound","loadable","fallback","Router","refreshListener","components","Map","forEach","set","file","loading","URLSearchParams","search","get","listen","listener","URLSearch","replaceState","document","oauthstate","JSON","parse","sessionStorage","getItem","setErrorAndEnd","InternalError","ErrorCode","jsError","Error","url","CredentialsType","provider","token","removeItem","RouteData","category","selectCategory","loginless","exact","loose","Comp","AccessDenied","noContainer","ErrorAlert","Login","loggedOut","InnerApp","componentDidMount","Pkg","addEventListener","event","ctrlKey","shiftKey","CredentialsProvider","basename","publicPath","URL","href","DEFAULT_BASEPATH","passdownCat","Alert","Array","from","errors","idx","onClose","deleteError","toString","JobsList","goBack","popup","handleClose","dismissible","centered","show","onHide","size","closeButton","desc","DescType","API_VERSION","extendedInfo","addError","setErrors","prevState","displayErrors","err","index","prev","newarr","GenericAlert","body","JobError","setOpen","useState","info","job","errorCode","TGSErrorCode","Modal","description","exceptionDetails","JobCard","createddate","Date","startedAt","createddiff","getTime","now","stoppeddiff","stoppedAt","cancelled","Toast","maxWidth","ToastHeader","ToastBody","stage","toLocaleString","ref","triggerHandler","numeric","updateIntervalInSeconds","startedBy","cancelledBy","ProgressBar","animated","label","progress","striped","canCancel","padding","onCancel","widgetRef","currentTimeout","handleUpdate","jobs","JobsController","nextRetrySeconds","ownerrors","instances","current","scrollTop","clearTimeout","getSeconds","setTimeout","widget","nested","display","totalJobs","configOptions","jobsWidgetOptions","position","top","bottom","right","left","pointerEvents","zIndex","default","x","documentElement","clientWidth","min","y","clientHeight","minHeight","bounds","seconds","sort","a","b","instanceid","jobMap","xFinishedEnabled","instanceHeaderStyle","marginTop","marginLeft","renderTooltip","amount","faTimes","defaultProps","submit","console","log","busy","validated","username","password","tryLoginDefault","redirectSetup","providers","OAuthProvider","faGithub","faDiscord","alt","faInvision","providersTheme","GitHub","Discord","TGForums","Keycloak","InvisionCommunity","Col","lg","md","Form","onSubmit","controlId","placeholder","onChange","target","required","block","oAuthProviderInfos","keys","ptheme","background","startOAuth","stateArray","Uint8Array","crypto","getRandomValues","dec","padStart","join","e","encodeURIComponent","clientId","redirectUri","serverUrl","oauthdata","setItem","stringify","Promise","resolve","preventDefault","userName","TypedEmitter","refreshing","rtcontroller","refreshRoutes","catch","time","catmap","entries","UnpopulatedAppCategories","timeEnd","work","getImmediateRoutes","isAuthorized","then","auth","all","emit","routesNoAuth","getRoutes","wait4refresh","on","results","adminRight","async","administrationRights","instanceManagerRight","instanceManagerRights","home","homeIcon","instancecreate","InstanceManagerRights","instancelist","instanceedit","selectedinstanceid","selectedinstanceedittab","instancejobs","userlist","useredit","selecteduserid","selectedusertab","usercreate","admin","admin_update","admin_logs","passwd","config","setup","oAuth","instance","instancelistpage","loglistpage","byondlistpage","userlistpage","jobhistorypage","oautherrors","webpackAsyncContext","req","__webpack_require__","o","ids","slice","module","exports"],"sourceRoot":""}