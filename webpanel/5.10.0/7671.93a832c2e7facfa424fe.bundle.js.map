{"version":3,"file":"7671.93a832c2e7facfa424fe.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Configuration.tsx","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport configOptions, { ConfigOption } from \"../../ApiClient/util/config\";\nimport ConfigController from \"../../ApiClient/util/ConfigController\";\n\ninterface IProps {}\ninterface IState {\n    values: Partial<typeof configOptions>;\n    //if youre adding some state, make sure it doesnt get sent to be saved\n}\n\nexport default class Configuration extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.save = this.save.bind(this);\n\n        this.state = {\n            values: {}\n        };\n    }\n\n    private save() {\n        ConfigController.saveconfig(this.state.values);\n        this.setState({\n            values: {}\n        });\n    }\n\n    public render(): ReactNode {\n        const config = Object.entries(configOptions);\n\n        return (\n            <React.Fragment>\n                {config.map(([_key, currentVal]) => {\n                    const key = _key as keyof typeof configOptions;\n                    //const persistRef = React.createRef<HTMLInputElement>();\n                    const valueRef = React.createRef<HTMLInputElement>();\n                    const enumRef = React.createRef<HTMLSelectElement>();\n                    const value = this.state.values[key] ?? currentVal;\n                    const reset = () => {\n                        this.setState((prevState: IState) => {\n                            const filtered: Partial<typeof configOptions> = {};\n                            for (const [innerkey, val] of Object.entries(prevState.values)) {\n                                if (innerkey === key) continue;\n                                filtered[innerkey as keyof typeof prevState.values] = val;\n                            }\n                            return {\n                                values: filtered\n                            };\n                        });\n                    };\n\n                    const updateValue = () => {\n                        this.setState(prevstate => {\n                            const obj: ConfigOption = this.state.values[key]\n                                ? { ...this.state.values[key]! }\n                                : {\n                                      ...currentVal\n                                  };\n                            obj.value =\n                                value.type === \"enum\"\n                                    ? enumRef.current!.selectedOptions[0].value\n                                    : value.type === \"bool\"\n                                    ? valueRef.current!.checked\n                                    : valueRef.current!.value;\n\n                            return {\n                                values: {\n                                    ...prevstate.values,\n                                    [key]: obj\n                                }\n                            };\n                        });\n                    };\n\n                    const tooltip = (innerid: string) => {\n                        return (\n                            <Tooltip id={innerid}>\n                                <FormattedMessage id={innerid} />\n                            </Tooltip>\n                        );\n                    };\n\n                    const random = Math.random().toString();\n\n                    return (\n                        <InputGroup key={value.id}>\n                            <InputGroup.Prepend className=\"w-40 flex-grow-1 flex-xl-grow-0 overflow-auto mb-2 mb-xl-0\">\n                                {/*<InputGroup.Text\n                                    as=\"label\"\n                                    htmlFor={value.id}\n                                    className={this.state.values[key] ? 'font-weight-bold' : ''}>\n                                    <Form.Check\n                                        id={value.id}\n                                        inline\n                                        label={<FormattedMessage id=\"generic.persist\" />}\n                                        type=\"switch\"\n                                        custom\n                                        onChange={updateValue}\n                                        ref={persistRef}\n                                        checked={value.persist}\n                                        value={''}\n                                    />\n                                </InputGroup.Text>*/}\n                                <OverlayTrigger overlay={tooltip(value.id + \".desc\")}>\n                                    {({ ref, ...triggerHandler }) => (\n                                        <InputGroup.Text\n                                            className={`flex-fill ${\n                                                this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                            }`}\n                                            {...triggerHandler}>\n                                            <FormattedMessage id={value.id} />\n                                            <div\n                                                className=\"ml-auto\"\n                                                ref={ref as React.Ref<HTMLDivElement>}>\n                                                <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                            </div>\n                                        </InputGroup.Text>\n                                    )}\n                                </OverlayTrigger>\n                            </InputGroup.Prepend>\n                            <div className=\"flex-grow-1 w-100 w-xl-auto d-flex mb-3 mb-xl-0\">\n                                {value.type === \"enum\" ? (\n                                    <select\n                                        className={`flex-fill mb-0 ${\n                                            this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                        }`}\n                                        ref={enumRef}\n                                        onChange={updateValue}\n                                        defaultValue={value.value}>\n                                        {Object.values(value.possibleValues).map(possiblevalue => (\n                                            <FormattedMessage\n                                                key={possiblevalue}\n                                                id={`${value.id}.enum.${possiblevalue}`}>\n                                                {message => (\n                                                    <option value={possiblevalue}>{message}</option>\n                                                )}\n                                            </FormattedMessage>\n                                        ))}\n                                    </select>\n                                ) : value.type === \"bool\" ? (\n                                    <label\n                                        htmlFor={random}\n                                        className=\"d-flex justify-content-center align-content-center flex-grow-1 w-100 w-xl-auto mb-0\">\n                                        <Form.Check\n                                            inline\n                                            type=\"switch\"\n                                            custom\n                                            id={random}\n                                            className=\"m-auto\"\n                                            label=\"\"\n                                            ref={valueRef}\n                                            onChange={updateValue}\n                                            checked={value.value}\n                                        />\n                                    </label>\n                                ) : (\n                                    <FormControl\n                                        custom\n                                        type={\n                                            value.type === \"num\"\n                                                ? \"number\"\n                                                : value.type === \"pwd\"\n                                                ? \"password\"\n                                                : \"text\"\n                                        }\n                                        className={`flex-fill mb-0 ${\n                                            this.state.values[key] ? \"font-weight-bold\" : \"\"\n                                        }`}\n                                        min={value.type === \"num\" ? value.min : undefined}\n                                        max={value.type === \"num\" ? value.max : undefined}\n                                        ref={valueRef}\n                                        onChange={updateValue}\n                                        value={value.value}\n                                    />\n                                )}\n                                {this.state.values[key] ? (\n                                    <InputGroup.Append onClick={reset}>\n                                        <InputGroup.Text>\n                                            <FontAwesomeIcon fixedWidth icon=\"undo\" />\n                                        </InputGroup.Text>\n                                    </InputGroup.Append>\n                                ) : (\n                                    \"\"\n                                )}\n                            </div>\n                        </InputGroup>\n                    );\n                })}\n\n                <br />\n\n                <div className=\"text-center\">\n                    <Button\n                        className=\"px-5\"\n                        onClick={this.save}\n                        disabled={!Object.keys(this.state.values).length}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["Configuration","React","constructor","props","super","this","save","bind","state","values","ConfigController","setState","render","config","Object","entries","configOptions","map","_key","currentVal","key","valueRef","enumRef","value","updateValue","prevstate","obj","type","current","selectedOptions","checked","random","Math","toString","id","className","overlay","innerid","ref","triggerHandler","fixedWidth","icon","onChange","defaultValue","possibleValues","possiblevalue","message","htmlFor","inline","custom","label","min","undefined","max","onClick","prevState","filtered","innerkey","val","disabled","keys","length","_excluded","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","InputGroup","_ref","bsPrefix","size","hasValidation","_ref$as","as","displayName","Text","Radio","Checkbox","Append","Prepend"],"sourceRoot":""}