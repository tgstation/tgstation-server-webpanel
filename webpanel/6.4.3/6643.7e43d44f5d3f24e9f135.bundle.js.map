{"version":3,"file":"6643.7e43d44f5d3f24e9f135.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/ChangePassword.tsx"],"sourcesContent":["import React, { ChangeEvent, FormEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport type { UserResponse } from \"../../ApiClient/generatedcode/generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport UserClient from \"../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../contexts/GeneralContext\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ntype IProps = RouteComponentProps<{ id: string }>;\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    loading: boolean;\n    pwdload?: boolean;\n    user?: UserResponse;\n    userId: number;\n    currentUser: boolean;\n}\n\nclass ChangePassword extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps, context: GeneralContext) {\n        super(props);\n\n        if (!context?.user) {\n            throw Error(\"ChangePassword: this.context?.user is null!\");\n        }\n\n        let id: number;\n        if (props.match.params.id) {\n            id = parseInt(props.match.params.id);\n        } else {\n            id = context.user.id;\n        }\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            userId: id,\n            currentUser: context.user.id === id,\n            loading: true\n        };\n\n        this.submit = this.submit.bind(this);\n    }\n\n    public componentDidMount(): void {\n        void (async () => {\n            const user = await UserClient.getUser(this.state.userId);\n            if (user.code == StatusCode.OK) {\n                this.setState({\n                    user: user.payload\n                });\n            } else {\n                this.addError(user.error);\n            }\n\n            this.setState({\n                loading: false\n            });\n        })();\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    // noinspection DuplicatedCode\n    private async submit(event: FormEvent<HTMLFormElement>): Promise<void> {\n        if (!this.state.user) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"changepassword submit: this.user is falsy\")\n                })\n            );\n            return;\n        }\n\n        event.preventDefault();\n        let err = false;\n        if (this.state.password1.length < this.context.serverInfo.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        if (err) return;\n\n        this.setState({\n            pwdload: true\n        });\n\n        const res = await UserClient.editUser({\n            password: this.state.password1,\n            id: this.state.user.id\n        });\n        switch (res.code) {\n            case StatusCode.OK: {\n                if (this.state.currentUser) {\n                    // noinspection ES6MissingAwait //we just dont care about what happens, it can fail or succeed\n                    void ServerClient.login({\n                        type: CredentialsType.Password,\n                        userName: this.state.user.name,\n                        password: this.state.password1\n                    });\n                }\n\n                this.props.history.goBack();\n                break;\n            }\n            case StatusCode.ERROR: {\n                this.addError(res.error);\n                //we only unset it here because its going to get redirected anyways\n                this.setState({\n                    pwdload: false\n                });\n                break;\n            }\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.info\" />;\n        }\n        if (this.state.pwdload) {\n            return <Loading text=\"loading.passwd\" />;\n        }\n\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <Form onSubmit={e => void this.submit(e)}>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                    {this.state.user ? (\n                        <React.Fragment>\n                            <h3>\n                                <FormattedMessage id=\"view.user.passwd.title\" />\n                                {this.state.user.name}({this.state.user.id})\n                            </h3>\n                            <hr />\n                            <Form.Group controlId=\"password1\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd1Input}\n                                    value={this.state.password1}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.lengthError ? (\n                                        <React.Fragment>\n                                            <FormattedMessage id=\"login.password.repeat.short\" />\n                                            {this.context.serverInfo.minimumPasswordLength}\n                                        </React.Fragment>\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Form.Group controlId=\"password2\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password.repeat\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    onChange={handlePwd2Input}\n                                    value={this.state.password2}\n                                    isInvalid={this.state.matchError || this.state.lengthError}\n                                />\n                                <Form.Control.Feedback type=\"invalid\">\n                                    {this.state.matchError ? (\n                                        <FormattedMessage id=\"login.password.repeat.match\" />\n                                    ) : (\n                                        \"\"\n                                    )}\n                                </Form.Control.Feedback>\n                            </Form.Group>\n                            <Button type=\"submit\">\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Button>\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                </Col>\n            </Form>\n        );\n    }\n}\nChangePassword.contextType = GeneralContext;\nexport default withRouter(ChangePassword);\n"],"names":["ChangePassword","React","constructor","props","context","super","user","Error","id","match","params","parseInt","this","state","errors","password1","password2","userId","currentUser","loading","submit","bind","componentDidMount","UserClient","getUser","code","StatusCode","OK","setState","payload","addError","error","prevState","Array","from","push","event","InternalError","ErrorCode","APP_FAIL","jsError","preventDefault","err","length","serverInfo","minimumPasswordLength","lengthError","matchError","pwdload","res","editUser","password","ServerClient","login","type","CredentialsType","Password","userName","name","history","goBack","ERROR","render","Loading","text","Form","onSubmit","e","Col","className","lg","md","map","index","ErrorAlert","key","onClose","prev","newarr","undefined","FormattedMessage","Group","controlId","Label","Control","onChange","target","value","isInvalid","Feedback","Button","contextType","GeneralContext","withRouter"],"sourceRoot":""}