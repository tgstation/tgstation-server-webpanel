{"version":3,"file":"1552.eeee385121b07c3ccfcc.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ServerClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/UserClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/_base.ts","webpack://tgstation-server-control-panel/./src/ApiClient/generatedcode/generated.ts","webpack://tgstation-server-control-panel/./src/ApiClient/models/ICredentials.ts","webpack://tgstation-server-control-panel/./src/ApiClient/models/InternalComms/InternalError.ts","webpack://tgstation-server-control-panel/./src/ApiClient/models/InternalComms/InternalStatus.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/CredentialsProvider.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/LoginHooks.ts","webpack://tgstation-server-control-panel/./src/ApiClient/util/config.ts"],"sourcesContent":["import { AxiosError, AxiosHeaders, AxiosInstance, AxiosResponse } from \"axios\";\nimport { jwtDecode } from \"jwt-decode\";\n\nimport { API_VERSION, VERSION } from \"../definitions/constants\";\nimport { ApiClient } from \"./_base\";\nimport {\n    Api,\n    ErrorMessageResponse,\n    HttpClient,\n    ServerInformationResponse,\n    TokenResponse\n} from \"./generatedcode/generated\";\nimport { CredentialsType, ICredentials } from \"./models/ICredentials\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport { ServerClientRequestConfig } from \"./ServerClientRequestConfig\";\nimport configOptions from \"./util/config\";\nimport CredentialsProvider from \"./util/CredentialsProvider\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    //self explainatory\n    logout: () => void;\n    //fired whenever something is denied access, shouldnt really be used\n    accessDenied: () => void;\n    //fired when the server info is first loaded\n    loadServerInfo: (\n        serverInfo: InternalStatus<ServerInformationResponse, ServerInfoErrors>\n    ) => void;\n    //fired when the api is loaded from the json file and loaded\n    initialized: () => void;\n    //purge all caches\n    purgeCache: () => void;\n    //internal event, queues logins\n    loadLoginInfo: (loginInfo: InternalStatus<TokenResponse, LoginErrors>) => void;\n    //internal event fired for wait4Token(), external things should be using LoginHooks#LoginSuccess or a login hook\n    tokenAvailable: (token: TokenResponse) => void;\n}\n\nexport type LoginErrors =\n    | GenericErrors\n    | ErrorCode.LOGIN_DISABLED\n    | ErrorCode.LOGIN_FAIL\n    | ErrorCode.LOGIN_NOCREDS\n    | ErrorCode.LOGIN_BAD_OAUTH\n    | ErrorCode.LOGIN_RATELIMIT;\n\nexport type ServerInfoErrors = GenericErrors;\n\nexport default new (class ServerClient extends ApiClient<IEvents> {\n    private static readonly globalHandledCodes = [400, 401, 403, 406, 409, 426, 500, 501, 503];\n\n    //api\n\n    public apiHttpClient?: HttpClient<unknown>;\n    public apiClient?: Api<unknown>;\n\n    public apiRequestInterceptor = {\n        onFulfilled: async (value: ServerClientRequestConfig) => {\n            //Meta value that means theres no value, used in the github deployed version\n            if (configOptions.apipath.value === \"https://example.org:5000\") {\n                const errorobj = new InternalError(ErrorCode.NO_APIPATH, {\n                    void: true\n                });\n                return Promise.reject(errorobj);\n            }\n\n            //This applies the authorization header, it will wait however long it needs until\n            // theres a token available. It obviously won't wait for a token before sending the request\n            // if its currently sending a request to the login endpoint...\n            if (value.overrideTokenDetection || !(value.url === \"/api\" || value.url === \"/api/\")) {\n                const tok = await this.wait4Token();\n                (value.headers as { [key: string]: string })[\"Authorization\"] = `Bearer ${\n                    tok.bearer || \"\"\n                }`;\n            }\n            return value;\n        },\n        // it is real, we do not know what type though\n        onRejected: (error: unknown) => {\n            return Promise.reject(error);\n        }\n    };\n\n    public apiResponseInterceptor = {\n        onFulfilled: (val: AxiosResponse) => val,\n        // it is real, we do not know what type though\n        onRejected: (error: AxiosError, axiosServer: AxiosInstance): Promise<AxiosResponse> => {\n            //THIS IS SNOWFLAKE KEKW\n            //As the above comment mentions, this shitcode is very snowflake\n            // it tries to typecast the \"response\" we got into an error then tries to check if that \"error\" is\n            // the snowflake no apipath github error, if it is, it rejects the promise to send it to the catch block\n            // all endpoints have which simply returns the error wrapped in a status object\n            const snowflake = error as unknown as InternalError<ErrorCode.NO_APIPATH>;\n            if (snowflake?.code === ErrorCode.NO_APIPATH) {\n                return Promise.reject(snowflake);\n            }\n\n            //This was originally an else clause at the bottom but it made it hard to find\n            // if the promise rejected and its not because its a globally handled status code\n            // it means that axios created an error itself for an unknown reason(network failure,\n            // cors failure, user is navigating away, aborting requests, etc). Simply return the error\n            // as a globally handled error.\n            if (\n                !(\n                    error.response &&\n                    error.response.status &&\n                    ServerClient.globalHandledCodes.includes(error.response.status)\n                )\n            ) {\n                const err = error as Error;\n                const errorobj = new InternalError(\n                    ErrorCode.AXIOS,\n                    { jsError: err },\n                    error.response\n                );\n                return Promise.reject(errorobj);\n            }\n\n            //I am sorry, this is the bulk of the shitcode, its a massive switch that handles every single\n            // globally handled status code and sometimes not so globally because one endpoint decided it would be\n            const res = error.response;\n            switch (error.response.status) {\n                //Error code 400: Bad request, show message to user and instruct them to report it as its probably a bug\n                case 400: {\n                    const errorMessage = res.data as ErrorMessageResponse;\n                    const errorobj = new InternalError(\n                        ErrorCode.HTTP_BAD_REQUEST,\n                        { errorMessage },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n                //Error code 401: Access Denied, fired whenever a token expires, in that case, attempt to reauthenticate\n                // using the last known working credentials, if that succeeds, reissue the request, otherwise logout the\n                // user and kick them to the login page. Snowflake behaviour: Acts as a failed login for the login endpoint\n                case 401: {\n                    const request = error.config!;\n                    if (request.url === \"/api\" || request.url === \"api\") {\n                        return Promise.resolve(error.response);\n                    }\n\n                    if (this.autoLogin) {\n                        return this.login().then(status => {\n                            switch (status.code) {\n                                case StatusCode.OK: {\n                                    return axiosServer.request(error.config!);\n                                }\n                                case StatusCode.ERROR: {\n                                    this.emit(\"accessDenied\");\n                                    //time to kick out the user\n                                    this.logout();\n                                    return Promise.reject(status);\n                                }\n                            }\n                        });\n                    } else {\n                        this.emit(\"accessDenied\");\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_ACCESS_DENIED,\n                            { void: true },\n                            res,\n                            true\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                }\n                case 403: {\n                    const request = error.config!;\n                    if ((request.url === \"/\" || request.url === \"\") && request.method === \"post\") {\n                        return Promise.resolve(error.response);\n                    } else {\n                        this.emit(\"accessDenied\");\n                        const errorobj = new InternalError(\n                            ErrorCode.HTTP_ACCESS_DENIED,\n                            { void: true },\n                            res,\n                            true\n                        );\n                        return Promise.reject(errorobj);\n                    }\n                }\n                case 406: {\n                    const errorobj = new InternalError(\n                        ErrorCode.HTTP_NOT_ACCEPTABLE,\n                        { void: true },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n                case 409: {\n                    const errorMessage = res.data as ErrorMessageResponse;\n\n                    //Thanks for reusing a global erorr status cyber. Log operations can return 409\n                    const request = error.config!;\n                    if (request.url === \"/Administration/Logs\" && request.method === \"get\") {\n                        return Promise.resolve(error.response);\n                    }\n\n                    const errorobj = new InternalError(\n                        ErrorCode.HTTP_DATA_INEGRITY,\n                        { errorMessage },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n                case 426: {\n                    const errorMessage = res.data as ErrorMessageResponse;\n                    const errorobj = new InternalError(\n                        ErrorCode.HTTP_API_MISMATCH,\n                        { errorMessage },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n                case 500: {\n                    const errorMessage = res.data as ErrorMessageResponse;\n                    const errorobj = new InternalError(\n                        ErrorCode.HTTP_SERVER_ERROR,\n                        { errorMessage },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n                case 501: {\n                    const errorMessage = res.data as ErrorMessageResponse;\n                    const errorobj = new InternalError(\n                        ErrorCode.HTTP_UNIMPLEMENTED,\n                        { errorMessage },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n                case 503: {\n                    console.log(\"Server not ready, delaying request\", error.config);\n                    return new Promise(resolve => {\n                        setTimeout(resolve, 5000);\n                    }).then(() => axiosServer.request(error.config!));\n                    /*const errorobj = new InternalError(\n                        ErrorCode.HTTP_SERVER_NOT_READY,\n                            {\n                                void: true\n                            },\n                            res\n                        );\n                        return Promise.reject(errorobj);*/\n                }\n                default: {\n                    const errorobj = new InternalError(\n                        ErrorCode.UNHANDLED_GLOBAL_RESPONSE,\n                        { axiosResponse: res },\n                        res\n                    );\n                    return Promise.reject(errorobj);\n                }\n            }\n        }\n    };\n\n    private initialized = false;\n    private loadingServerInfo = false;\n\n    public constructor() {\n        super();\n        this.getServerInfo = this.getServerInfo.bind(this);\n\n        LoginHooks.addHook(this.getServerInfo);\n        this.on(\"purgeCache\", () => {\n            this._serverInfo = undefined;\n            if (CredentialsProvider.token) {\n                void LoginHooks.runHooks(CredentialsProvider.token);\n            }\n        });\n\n        //Why is this here? Because otherwise it creates an import loop, grrrrr\n        configOptions.apipath.callback = (): void => {\n            console.log(\"API path changed\");\n            window.location.reload();\n        };\n    }\n\n    //serverInfo\n    private _serverInfo?: InternalStatus<ServerInformationResponse, ErrorCode.OK>;\n\n    public get serverInfo() {\n        return this._serverInfo;\n    }\n\n    public autoLogin = true;\n    private loggingIn = false;\n\n    public get defaultHeaders() {\n        return {\n            Accept: \"application/json\",\n            Api: `Tgstation.Server.Api/` + API_VERSION,\n            \"Webpanel-Version\": VERSION\n        };\n    }\n\n    public async initApi(): Promise<boolean> {\n        console.log(\"Initializing API client\");\n        console.time(\"APIInit\");\n\n        this.apiHttpClient = new HttpClient({\n            //Yes this is only initialized once even if the configOption changes, this doesn't\n            baseURL: configOptions.apipath.value as string,\n            withCredentials: false,\n            headers: new AxiosHeaders(this.defaultHeaders),\n            //Global errors are handled via the catch clause and endpoint specific response codes are handled normally\n            validateStatus: status => {\n                return !ServerClient.globalHandledCodes.includes(status);\n            }\n        });\n        this.apiHttpClient.instance.interceptors.request.use(\n            this.apiRequestInterceptor.onFulfilled,\n            this.apiRequestInterceptor.onRejected\n        );\n        this.apiHttpClient.instance.interceptors.response.use(\n            this.apiResponseInterceptor.onFulfilled,\n            error =>\n                this.apiResponseInterceptor.onRejected(\n                    error as AxiosError,\n                    this.apiHttpClient!.instance\n                )\n        );\n\n        this.apiClient = new Api(this.apiHttpClient);\n\n        console.timeEnd(\"APIInit\");\n\n        let result = false;\n        // check if there's a token stored\n        const bearer = localStorage.getItem(\"SessionToken\");\n        const expiresAtUnixTimestampStr = localStorage.getItem(\"SessionTokenExpiry\");\n        const defaultToken = localStorage.getItem(\"SessionTokenDefault\") == \"true\";\n        if (bearer && expiresAtUnixTimestampStr) {\n            console.log(\"Found session token\");\n            if (parseInt(expiresAtUnixTimestampStr) * 1000 >= Date.now()) {\n                const storedToken: TokenResponse = { bearer };\n                result = await this.setToken(storedToken, defaultToken, true);\n            } else {\n                console.log(\"But it was expired\");\n            }\n        }\n\n        this.initialized = true;\n        this.emit(\"initialized\");\n        return result;\n    }\n\n    //Utility function that returns a promise which resolves whenever ServerClient#ApiClient becomes valid\n    public wait4Init(): Promise<void> {\n        return new Promise<void>(resolve => {\n            if (this.initialized) {\n                resolve();\n                return;\n            }\n            this.on(\"initialized\", () => resolve());\n        });\n    }\n\n    //Utility function that returns a promise which resolves with the token whenever theres valid credentials(could be immediatly)\n    public wait4Token() {\n        return new Promise<TokenResponse>(resolve => {\n            if (CredentialsProvider.hasToken()) {\n                resolve(CredentialsProvider.token!);\n                return;\n            }\n            this.on(\"tokenAvailable\", token => {\n                resolve(token);\n            });\n        });\n    }\n\n    public async login(\n        newCreds?: ICredentials\n    ): Promise<InternalStatus<TokenResponse, LoginErrors>> {\n        //Shouldn't really happen edge cases\n        await this.wait4Init();\n\n        console.log(\"Attempting login\");\n\n        //Newcreds is optional, if its missing its going to try to reuse the last used credentials,\n        // if newCreds exists, its going to use newCreds\n        let oauthAutoLogin = false;\n        if (newCreds) {\n            CredentialsProvider.credentials = newCreds;\n        } else if (CredentialsProvider.credentials?.type === CredentialsType.OAuth) {\n            // autologin doesn't work with OAuth\n            this.logout();\n            oauthAutoLogin = true;\n        }\n\n        //This is thrown if you try to reuse the last credentials without actually having last used credentials\n        //or you let an oauth login expire\n        if (oauthAutoLogin || !CredentialsProvider.credentials)\n            return new InternalStatus<TokenResponse, ErrorCode.LOGIN_NOCREDS>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.LOGIN_NOCREDS, { void: true })\n            });\n\n        //This block is here to prevent duplication of login requests at the same time, when you start logging in,\n        // it sets loggingIn to true and fires an event once its done logging in, successful or not, if you try to login\n        // while another login request is ongoing, it listens to that event and returns the output normally.\n        //\n        // Basically, make two calls, receive two identical return values, make only one request\n        if (this.loggingIn) {\n            return await new Promise(resolve => {\n                const resolver = (info: InternalStatus<TokenResponse, LoginErrors>) => {\n                    resolve(info);\n                    this.removeListener(\"loadLoginInfo\", resolver);\n                };\n                this.on(\"loadLoginInfo\", resolver);\n            });\n        }\n        this.loggingIn = true;\n\n        let response;\n        let defaulted;\n        try {\n            if (CredentialsProvider.credentials.type == CredentialsType.Password) {\n                defaulted =\n                    CredentialsProvider.credentials.userName.toLowerCase() ==\n                        CredentialsProvider.default.userName.toLowerCase() &&\n                    CredentialsProvider.credentials.password ==\n                        CredentialsProvider.default.password;\n                response = await this.apiClient!.api.apiRootControllerCreateToken({\n                    auth: {\n                        username: CredentialsProvider.credentials.userName,\n                        password: CredentialsProvider.credentials.password\n                    }\n                });\n            } else {\n                defaulted = false;\n                response = await this.apiClient!.api.apiRootControllerCreateToken({\n                    headers: new AxiosHeaders({\n                        OAuthProvider: CredentialsProvider.credentials.provider,\n                        Authorization: `OAuth ${CredentialsProvider.credentials.token}`\n                    })\n                });\n            }\n        } catch (stat) {\n            const res = new InternalStatus<TokenResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadLoginInfo\", res);\n            return res;\n        } finally {\n            this.loggingIn = false;\n        }\n        switch (response.status) {\n            case 200: {\n                console.log(\"Login success\");\n                const token = response.data as TokenResponse;\n\n                await this.setToken(token, defaulted, false);\n                const res = new InternalStatus<TokenResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: token\n                });\n                //Deduplication\n                this.emit(\"loadLoginInfo\", res);\n\n                return res;\n            }\n            case 401: {\n                this.logout();\n                console.log(\"Failed to login\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_FAIL,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 403: {\n                this.logout();\n                console.log(\"Account disabled\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_DISABLED>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_DISABLED,\n                        {\n                            void: true\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            case 429: {\n                this.logout();\n                console.log(\"rate limited\");\n                const res = new InternalStatus<TokenResponse, ErrorCode.LOGIN_RATELIMIT>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.LOGIN_RATELIMIT,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n            default: {\n                const res = new InternalStatus<TokenResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadLoginInfo\", res);\n                return res;\n            }\n        }\n    }\n\n    public logout() {\n        //If theres no token it means theres nothing to clear\n        if (!CredentialsProvider.hasToken()) {\n            return;\n        }\n        console.log(\"Logging out\");\n        CredentialsProvider.credentials = undefined;\n        CredentialsProvider.token = undefined;\n        localStorage.removeItem(\"SessionToken\");\n        localStorage.removeItem(\"SessionTokenExpiry\");\n        //events to clear the app state as much as possible for the next user\n        this.emit(\"purgeCache\");\n        this.emit(\"logout\");\n    }\n\n    public async getServerInfo(\n        _token?: TokenResponse,\n        bypassCache = false\n    ): Promise<InternalStatus<ServerInformationResponse, ServerInfoErrors>> {\n        await this.wait4Init();\n\n        if (this._serverInfo && !bypassCache) {\n            return this._serverInfo;\n        }\n\n        if (this.loadingServerInfo) {\n            return new Promise(resolve => {\n                if (this._serverInfo) {\n                    //race condition if 2 things listen to an event or something\n                    resolve(this._serverInfo);\n                    return;\n                }\n                const resolver = (\n                    info: InternalStatus<ServerInformationResponse, GenericErrors>\n                ) => {\n                    resolve(info);\n                    this.removeListener(\"loadServerInfo\", resolver);\n                };\n                this.on(\"loadServerInfo\", resolver);\n            });\n        }\n\n        this.loadingServerInfo = true;\n\n        let response;\n        try {\n            response = await this.apiClient!.api.apiRootControllerServerInfo();\n        } catch (stat) {\n            const res = new InternalStatus<ServerInformationResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadServerInfo\", res);\n            this.loadingServerInfo = false;\n            return res;\n        }\n        switch (response.status) {\n            case 200: {\n                const info = response.data as ServerInformationResponse;\n                const cache = new InternalStatus<ServerInformationResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: info\n                });\n                this.emit(\"loadServerInfo\", cache);\n                this._serverInfo = cache;\n                this.loadingServerInfo = false;\n                return cache;\n            }\n            default: {\n                const res = new InternalStatus<\n                    ServerInformationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadServerInfo\", res);\n                this.loadingServerInfo = false;\n                return res;\n            }\n        }\n    }\n\n    private async setToken(\n        token: TokenResponse,\n        defaulted: boolean,\n        validate: boolean\n    ): Promise<boolean> {\n        // CredentialsProvider.token is added to all requests in the form of Authorization: Bearer <token>\n\n        const previousToken = CredentialsProvider.token;\n        const previousDefaulted = CredentialsProvider.defaulted;\n\n        CredentialsProvider.token = token;\n        CredentialsProvider.defaulted = defaulted;\n\n        if (validate) {\n            let failed;\n            try {\n                const response = await this.apiClient!.api.apiRootControllerServerInfo({\n                    overrideTokenDetection: true\n                });\n\n                failed = response.status != 200;\n            } catch {\n                failed = true;\n            }\n\n            if (failed) {\n                CredentialsProvider.token = previousToken;\n                CredentialsProvider.defaulted = previousDefaulted;\n                console.log(\"Stored token failed to authenticate\");\n                return false;\n            }\n\n            console.log(\"Stored token authenticated\");\n        }\n\n        localStorage.setItem(\"SessionToken\", token.bearer);\n        const jwt = jwtDecode(token.bearer);\n        if (jwt.exp) {\n            localStorage.setItem(\"SessionTokenExpiry\", jwt.exp.toString());\n        }\n\n        localStorage.setItem(\"SessionTokenDefault\", defaulted ? \"true\" : \"false\");\n\n        this.emit(\"tokenAvailable\", token);\n\n        //LoginHooks are a way of running several async tasks at the same time whenever the user is authenticated,\n        // we cannot use events here as events wait on each listener before proceeding which has a noticable performance\n        // cost when it comes to several different requests to TGS,\n        // we cant directly call what we need to run here as it would violate isolation of\n        // ApiClient(the apiclient is independent from the rest of the app to avoid circular dependency\n        // (example: Component requires ServerClient to login and but the ServerClient requires Component to\n        // update it once the server info is loaded))\n        //\n        // TL;DR; Runs shit when you login\n\n        LoginHooks.runHooks(token);\n        return true;\n    }\n})();\n\n//https://stackoverflow.com/questions/40510611/typescript-interface-require-one-of-two-properties-to-exist\n//name describes what it does, makes the passed type only require 1 property, the others being optional\nexport type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<T, Exclude<keyof T, Keys>> &\n    {\n        [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>;\n    }[Keys];\n","import { ApiClient } from \"./_base\";\nimport {\n    AdministrationRights,\n    ErrorMessageResponse,\n    InstanceManagerRights,\n    PaginatedUserResponse,\n    UserCreateRequest,\n    UserResponse,\n    UserUpdateRequest\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\nimport LoginHooks from \"./util/LoginHooks\";\n\ninterface IEvents {\n    loadUserInfo: (user: InternalStatus<UserResponse, GenericErrors>) => void;\n}\n\nexport type GetCurrentUserErrors = GenericErrors;\nexport type EditUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND;\nexport type GetUserErrors = GenericErrors | ErrorCode.USER_NOT_FOUND;\nexport type CreateUserErrors = GenericErrors | ErrorCode.USER_NO_SYS_IDENT;\n\nexport default new (class UserClient extends ApiClient<IEvents> {\n    private _cachedUser?: InternalStatus<UserResponse, ErrorCode.OK>;\n    public get cachedUser() {\n        return this._cachedUser;\n    }\n    private loadingUserInfo = false;\n    //If set to true, all created users will default to having all permissions granted, used by the setup\n    public createAllUsersWithAA = false;\n\n    public constructor() {\n        super();\n        this.getCurrentUser = this.getCurrentUser.bind(this);\n\n        LoginHooks.addHook(() => this.getCurrentUser());\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedUser = undefined;\n        });\n    }\n\n    public async editUser(\n        newUser: UserUpdateRequest\n    ): Promise<InternalStatus<UserResponse, EditUserErrors>> {\n        await ServerClient.wait4Init();\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userControllerUpdate(newUser);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<EditUserErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                const current = await this.getCurrentUser();\n                if (current.code == StatusCode.OK) {\n                    if (current.payload.id == newUser.id) {\n                        //if we are editing ourselves, clear cached data to reload permissions on the app\n                        ServerClient.emit(\"purgeCache\");\n                    }\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: current.error\n                    });\n                }\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getCurrentUser(\n        bypassCache?: boolean\n    ): Promise<InternalStatus<UserResponse, GetCurrentUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (this._cachedUser && !bypassCache) {\n            return this._cachedUser;\n        }\n\n        if (this.loadingUserInfo) {\n            return await new Promise(resolve => {\n                const resolver = (user: InternalStatus<UserResponse, GenericErrors>) => {\n                    resolve(user);\n                    this.removeListener(\"loadUserInfo\", resolver);\n                };\n                this.on(\"loadUserInfo\", resolver);\n            });\n        }\n\n        this.loadingUserInfo = true;\n\n        let response;\n        try {\n            // UserController_Read\n            response = await ServerClient.apiClient!.api.userControllerRead();\n        } catch (stat) {\n            const res = new InternalStatus<UserResponse, GenericErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n            this.emit(\"loadUserInfo\", res);\n            this.loadingUserInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<UserResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n\n                this._cachedUser = thing;\n                this.emit(\"loadUserInfo\", thing);\n                this.loadingUserInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<UserResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadUserInfo\", res);\n                this.loadingUserInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async listUsers({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    }): Promise<InternalStatus<PaginatedUserResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userControllerList({\n                page: page,\n                pageSize: pageSize\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                const payload = (response.data as PaginatedUserResponse).content.sort(\n                    (a, b) => a.id - b.id\n                );\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: {\n                        ...(response.data as PaginatedUserResponse),\n                        content: payload\n                    }\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getUser(id: number): Promise<InternalStatus<UserResponse, GetUserErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userControllerGetId(id);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        // noinspection DuplicatedCode\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 404: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NOT_FOUND, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createUser(\n        newuser:\n            | {\n                  name: string;\n                  password: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n            | {\n                  systemIdentifier: string;\n                  enabled?: boolean;\n                  instanceManagerRights?: InstanceManagerRights;\n                  administrationRights?: AdministrationRights;\n              }\n    ): Promise<InternalStatus<UserResponse, CreateUserErrors>> {\n        await ServerClient.wait4Init();\n\n        if (newuser.enabled === undefined) newuser.enabled = true;\n        if (this.createAllUsersWithAA) {\n            newuser.instanceManagerRights = 0;\n            newuser.administrationRights = 0;\n\n            for (const perm of Object.values(InstanceManagerRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.instanceManagerRights += perm;\n            }\n\n            for (const perm of Object.values(AdministrationRights)) {\n                if (typeof perm !== \"number\") continue;\n                newuser.administrationRights += perm;\n            }\n        }\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.userControllerCreate(\n                newuser as UserCreateRequest\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as UserResponse\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.USER_NO_SYS_IDENT, { errorMessage })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { DefaultListener, ListenerSignature, TypedEmitter } from \"tiny-typed-emitter\";\n\nexport abstract class ApiClient<\n    L extends ListenerSignature<L> = DefaultListener\n> extends TypedEmitter<L> {\n    public constructor() {\n        super();\n        if (window.clients == undefined) {\n            window.clients = {};\n        }\n        console.log(this.constructor.name, this);\n        window.clients[this.constructor.name] = this;\n    }\n}\n","/* eslint-disable */\n/* tslint:disable */\n/*\n * ---------------------------------------------------------------\n * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##\n * ##                                                           ##\n * ## AUTHOR: acacode                                           ##\n * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##\n * ---------------------------------------------------------------\n */\n\n/** Represents administrative server information. */\nexport interface AdministrationResponse {\n  /**\n   * The GitHub repository the server is built to receive updates from.\n   * @format uri\n   */\n  trackedRepositoryUrl: string;\n  /** The latest available version of the Tgstation.Server.Host assembly from the upstream repository. If System.Version.Major is less than 4 the update cannot be applied due to API changes. */\n  latestVersion: string;\n  /**\n   * This response is cached. This field indicates the System.DateTimeOffset the Tgstation.Server.Api.Models.Internal.UpdateInformation was generated.\n   * @format date-time\n   */\n  generatedAt: string;\n}\n\n/**\n * Administration rights for the server.\n * @format int64\n */\nexport enum AdministrationRights {\n  None = 0,\n  WriteUsers = 1,\n  RestartHost = 2,\n  ChangeVersion = 4,\n  EditOwnPassword = 8,\n  ReadUsers = 16,\n  DownloadLogs = 32,\n  EditOwnOAuthConnections = 64,\n  UploadVersion = 128,\n}\n\n/** Represents a request to update a chat bot. */\nexport interface ChatBotCreateRequest {\n  /** Channels the Discord bot should listen/announce in. */\n  channels?: ChatChannel[] | null;\n  /** If the connection is enabled. */\n  enabled?: boolean | null;\n  /**\n   * The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBotSettings.Enabled and disconnected. Must not be zero.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  reconnectionInterval?: number | null;\n  /**\n   * The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBotSettings may contain.\n   * @format int32\n   */\n  channelLimit?: number | null;\n  /** The Tgstation.Server.Api.Models.ChatProvider used for the connection. */\n  provider: ChatProvider;\n  /**\n   * The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBotSettings.Provider.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  connectionString: string;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n}\n\n/** Represents a chat bot response. */\nexport interface ChatBotResponse {\n  /** Channels the Discord bot should listen/announce in. */\n  channels: ChatChannel[];\n  /** If the connection is enabled. */\n  enabled: boolean;\n  /**\n   * The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBotSettings.Enabled and disconnected. Must not be zero.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  reconnectionInterval: number;\n  /**\n   * The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBotSettings may contain.\n   * @format int32\n   */\n  channelLimit: number;\n  /** The Tgstation.Server.Api.Models.ChatProvider used for the connection. */\n  provider: ChatProvider;\n  /**\n   * The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBotSettings.Provider.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  connectionString?: string | null;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/**\n * Rights for chat bots.\n * @format int64\n */\nexport enum ChatBotRights {\n  None = 0,\n  WriteEnabled = 1,\n  WriteProvider = 2,\n  WriteChannels = 4,\n  WriteConnectionString = 8,\n  ReadConnectionString = 16,\n  Read = 32,\n  Create = 64,\n  Delete = 128,\n  WriteName = 256,\n  WriteReconnectionInterval = 512,\n  WriteChannelLimit = 1024,\n}\n\n/** Represents a request to update a chat bot. */\nexport interface ChatBotUpdateRequest {\n  /** Channels the Discord bot should listen/announce in. */\n  channels?: ChatChannel[] | null;\n  /** If the connection is enabled. */\n  enabled?: boolean | null;\n  /**\n   * The time interval in minutes the chat bot attempts to reconnect if Tgstation.Server.Api.Models.Internal.ChatBotSettings.Enabled and disconnected. Must not be zero.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  reconnectionInterval?: number | null;\n  /**\n   * The maximum number of Tgstation.Server.Api.Models.ChatChannels the Tgstation.Server.Api.Models.Internal.ChatBotSettings may contain.\n   * @format int32\n   */\n  channelLimit?: number | null;\n  /** The Tgstation.Server.Api.Models.ChatProvider used for the connection. */\n  provider?: ChatProvider | null;\n  /**\n   * The information used to connect to the Tgstation.Server.Api.Models.Internal.ChatBotSettings.Provider.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  connectionString?: string | null;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name?: string | null;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/** Indicates a chat channel. */\nexport interface ChatChannel {\n  /**\n   * The channel identifier.\n   * For Tgstation.Server.Api.Models.ChatProvider.Irc, it's the IRC channel name and optional password colon separated.\n   * For Tgstation.Server.Api.Models.ChatProvider.Discord, it's the stringified Discord channel snowflake.\n   * @minLength 1\n   * @maxLength 100\n   */\n  channelData: string;\n  /** If the Tgstation.Server.Api.Models.ChatChannel is an admin channel. */\n  isAdminChannel: boolean;\n  /** If the Tgstation.Server.Api.Models.ChatChannel is a watchdog channel. */\n  isWatchdogChannel: boolean;\n  /** If the Tgstation.Server.Api.Models.ChatChannel is an updates channel. */\n  isUpdatesChannel: boolean;\n  /** If the Tgstation.Server.Api.Models.ChatChannel received system messages. */\n  isSystemChannel: boolean;\n  /**\n   * A custom tag users can define to group channels together.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  tag?: string | null;\n}\n\n/**\n * Represents a chat service provider.\n * @format int32\n */\nexport enum ChatProvider {\n  Irc = 0,\n  Discord = 1,\n}\n\nexport interface CompileJobResponse {\n  /** The Tgstation.Server.Api.Models.Response.CompileJobResponse.Job relating to this job. */\n  job: JobResponse;\n  /** Git revision the compiler ran on. */\n  revisionInformation: RevisionInformation;\n  /** The Tgstation.Server.Api.Models.Response.CompileJobResponse.EngineVersion the Tgstation.Server.Api.Models.Response.CompileJobResponse was made with. */\n  engineVersion: EngineVersion;\n  /**\n   * The origin System.Uri of the repository the compile job was built from.\n   * @format uri\n   */\n  repositoryOrigin: string;\n  /**\n   * The .dme file used for compilation.\n   * @minLength 1\n   */\n  dmeName: string;\n  /**\n   * Textual output of DM.\n   * @minLength 1\n   */\n  output: string;\n  /**\n   * The Game folder the results were compiled into.\n   * @format uuid\n   */\n  directoryName: string;\n  /** The minimum Tgstation.Server.Api.Models.DreamDaemonSecurity required to run the Tgstation.Server.Api.Models.Internal.CompileJob's output. */\n  minimumSecurityLevel?: DreamDaemonSecurity | null;\n  /** The DMAPI System.Version. */\n  dmApiVersion?: string | null;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/** Represents a request to update a configuration file. */\nexport interface ConfigurationFileRequest {\n  path: string;\n  lastReadHash?: string | null;\n}\n\n/** Response when reading configuration files. */\nexport interface ConfigurationFileResponse {\n  path: string;\n  lastReadHash?: string | null;\n  /** If Tgstation.Server.Api.Models.Response.ConfigurationFileResponse.Path represents a directory. */\n  isDirectory: boolean;\n  /** If access to the Tgstation.Server.Api.Models.IConfigurationFile file was denied for the operation. */\n  accessDenied?: boolean | null;\n  /** The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller. */\n  fileTicket: string;\n}\n\n/**\n * Rights for Tgstation.Server.Api.Models.IConfigurationFiles.\n * @format int64\n */\nexport enum ConfigurationRights {\n  None = 0,\n  Read = 1,\n  Write = 2,\n  List = 4,\n  Delete = 8,\n}\n\n/**\n * The type of configuration allowed on an Tgstation.Server.Api.Models.Instance.\n * @format int32\n */\nexport enum ConfigurationType {\n  Disallowed = 0,\n  HostWrite = 1,\n  SystemIdentityWrite = 2,\n}\n\n/**\n * The DMAPI validation setting for deployments.\n * @format int32\n */\nexport enum DMApiValidationMode {\n  Optional = 0,\n  Required = 1,\n  Skipped = 2,\n}\n\n/** A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings. */\nexport interface DreamDaemonRequest {\n  /** A System.String to send to the running server's DMAPI for broadcasting. How this is displayed is up to how the DMAPI is integrated in the codebase. Requires interop version >=5.7.0. */\n  broadcastMessage?: string | null;\n  /**\n   * An incrementing ID for representing current server execution.\n   * @format int64\n   */\n  sessionId?: number | null;\n  /**\n   * When the current server execution was started.\n   * @format date-time\n   */\n  launchTime?: string | null;\n  /**\n   * The last known count of connected players. Requires Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.HealthCheckSeconds to not be 0 and a game server interop version >= 5.10.0 to populate.\n   * @format int32\n   */\n  clientCount?: number | null;\n  /** If the server is undergoing a soft reset. This may be automatically set by changes to other fields. */\n  softRestart?: boolean | null;\n  /** If the server is undergoing a soft shutdown. */\n  softShutdown?: boolean | null;\n  /** If the watchdog starts when it's Tgstation.Server.Api.Models.Instance starts. */\n  autoStart?: boolean | null;\n  /** If the BYOND web client can be used to connect to the game server. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  allowWebClient?: boolean | null;\n  /** If -profile is passed in on the DreamDaemon command line. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  startProfiler?: boolean | null;\n  /** The Tgstation.Server.Api.Models.DreamDaemonVisibility level of DreamDaemon. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  visibility?: DreamDaemonVisibility | null;\n  /** The Tgstation.Server.Api.Models.DreamDaemonSecurity level of DreamDaemon. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  securityLevel?: DreamDaemonSecurity | null;\n  /**\n   * The port DreamDaemon uses. This should be publically accessible.\n   * @format int32\n   * @min 1\n   * @max 65535\n   */\n  port?: number | null;\n  /**\n   * The port used by Tgstation.Server.Api.Models.EngineType.OpenDream for its topic port.\n   * @format int32\n   */\n  openDreamTopicPort?: number | null;\n  /**\n   * The DreamDaemon startup timeout in seconds.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  startupTimeout?: number | null;\n  /**\n   * The number of seconds between each watchdog health check. 0 disables.\n   * @format int32\n   */\n  healthCheckSeconds?: number | null;\n  /** If a process core dump should be created prior to restarting the watchdog due to health check failure. */\n  dumpOnHealthCheckRestart?: boolean | null;\n  /**\n   * The timeout for sending and receiving BYOND topics in milliseconds.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  topicRequestTimeout?: number | null;\n  /**\n   * Parameters string for DreamDaemon.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  additionalParameters?: string | null;\n  /** If process output/error text should be logged. */\n  logOutput?: boolean | null;\n  /**\n   * If DreamDaemon supports it, the value added as the -map-threads parameter. 0 uses the default BYOND value. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream.\n   * @format int32\n   */\n  mapThreads?: number | null;\n  /** If minidumps should be taken instead of full dumps. */\n  minidumps?: boolean | null;\n}\n\n/** Represents an instance of BYOND's DreamDaemon game server. Create action starts the server. Delete action shuts down the server. */\nexport interface DreamDaemonResponse {\n  /** The live revision. */\n  activeCompileJob?: CompileJobResponse | null;\n  /** The next revision to go live. */\n  stagedCompileJob?: CompileJobResponse | null;\n  /** The current Tgstation.Server.Api.Models.WatchdogStatus. */\n  status?: WatchdogStatus | null;\n  /** The current Tgstation.Server.Api.Models.DreamDaemonSecurity. May be upgraded. due to requirements of Tgstation.Server.Api.Models.Response.DreamDaemonResponse.ActiveCompileJob. */\n  currentSecurity?: DreamDaemonSecurity | null;\n  /** The current Tgstation.Server.Api.Models.DreamDaemonVisibility. */\n  currentVisibility?: DreamDaemonVisibility | null;\n  /**\n   * The port the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to.\n   * @format int32\n   */\n  currentPort?: number | null;\n  /**\n   * The Tgstation.Server.Api.Models.EngineType.OpenDream topic port the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to.\n   * @format int32\n   */\n  currentTopicPort?: number | null;\n  /** The webclient status the running Tgstation.Server.Api.Models.Response.DreamDaemonResponse instance is set to. */\n  currentAllowWebclient?: boolean | null;\n  /**\n   * The amount of RAM in use by the game server in bytes.\n   * @format int64\n   */\n  immediateMemoryUsage?: number | null;\n  /**\n   * An incrementing ID for representing current server execution.\n   * @format int64\n   */\n  sessionId?: number | null;\n  /**\n   * When the current server execution was started.\n   * @format date-time\n   */\n  launchTime?: string | null;\n  /**\n   * The last known count of connected players. Requires Tgstation.Server.Api.Models.Internal.DreamDaemonLaunchParameters.HealthCheckSeconds to not be 0 and a game server interop version >= 5.10.0 to populate.\n   * @format int32\n   */\n  clientCount?: number | null;\n  /** If the server is undergoing a soft reset. This may be automatically set by changes to other fields. */\n  softRestart?: boolean | null;\n  /** If the server is undergoing a soft shutdown. */\n  softShutdown?: boolean | null;\n  /** If the watchdog starts when it's Tgstation.Server.Api.Models.Instance starts. */\n  autoStart?: boolean | null;\n  /** If the BYOND web client can be used to connect to the game server. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  allowWebClient?: boolean | null;\n  /** If -profile is passed in on the DreamDaemon command line. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  startProfiler?: boolean | null;\n  /** The Tgstation.Server.Api.Models.DreamDaemonVisibility level of DreamDaemon. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  visibility?: DreamDaemonVisibility | null;\n  /** The Tgstation.Server.Api.Models.DreamDaemonSecurity level of DreamDaemon. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream. */\n  securityLevel?: DreamDaemonSecurity | null;\n  /**\n   * The port DreamDaemon uses. This should be publically accessible.\n   * @format int32\n   * @min 1\n   * @max 65535\n   */\n  port?: number | null;\n  /**\n   * The port used by Tgstation.Server.Api.Models.EngineType.OpenDream for its topic port.\n   * @format int32\n   */\n  openDreamTopicPort?: number | null;\n  /**\n   * The DreamDaemon startup timeout in seconds.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  startupTimeout?: number | null;\n  /**\n   * The number of seconds between each watchdog health check. 0 disables.\n   * @format int32\n   */\n  healthCheckSeconds?: number | null;\n  /** If a process core dump should be created prior to restarting the watchdog due to health check failure. */\n  dumpOnHealthCheckRestart?: boolean | null;\n  /**\n   * The timeout for sending and receiving BYOND topics in milliseconds.\n   * @format int32\n   * @min 1\n   * @max 4294967295\n   */\n  topicRequestTimeout?: number | null;\n  /**\n   * Parameters string for DreamDaemon.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  additionalParameters?: string | null;\n  /** If process output/error text should be logged. */\n  logOutput?: boolean | null;\n  /**\n   * If DreamDaemon supports it, the value added as the -map-threads parameter. 0 uses the default BYOND value. No-op for Tgstation.Server.Api.Models.EngineType.OpenDream.\n   * @format int32\n   */\n  mapThreads?: number | null;\n  /** If minidumps should be taken instead of full dumps. */\n  minidumps?: boolean | null;\n}\n\n/**\n * Rights for managing DreamDaemon.\n * @format int64\n */\nexport enum DreamDaemonRights {\n  None = 0,\n  ReadRevision = 1,\n  SetPort = 2,\n  SetAutoStart = 4,\n  SetSecurity = 8,\n  ReadMetadata = 16,\n  SetWebClient = 32,\n  SoftRestart = 64,\n  SoftShutdown = 128,\n  Restart = 256,\n  Shutdown = 512,\n  Start = 1024,\n  SetStartupTimeout = 2048,\n  SetHealthCheckInterval = 4096,\n  CreateDump = 8192,\n  SetTopicTimeout = 16384,\n  SetAdditionalParameters = 32768,\n  SetVisibility = 65536,\n  SetProfiler = 131072,\n  SetLogOutput = 262144,\n  SetMapThreads = 524288,\n  BroadcastMessage = 1048576,\n  SetMinidumps = 2097152,\n}\n\n/**\n * DreamDaemon's security level.\n * @format int32\n */\nexport enum DreamDaemonSecurity {\n  Trusted = 0,\n  Safe = 1,\n  Ultrasafe = 2,\n}\n\n/**\n * The visibility setting for DreamDaemon.\n * @format int32\n */\nexport enum DreamDaemonVisibility {\n  Public = 0,\n  Private = 1,\n  Invisible = 2,\n}\n\n/** A request to the DreamMaker controller. */\nexport interface DreamMakerRequest {\n  /**\n   * The name of the .dme file the server tries to compile with without the extension.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  projectName?: string | null;\n  /**\n   * The port used during compilation to validate the DMAPI.\n   * @format int32\n   * @min 1\n   * @max 65535\n   */\n  apiValidationPort?: number | null;\n  /** The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI. */\n  apiValidationSecurityLevel?: DreamDaemonSecurity | null;\n  /**\n   * If API validation should be required for a deployment to succeed. Must not be set on mutation if Tgstation.Server.Api.Models.Internal.DreamMakerSettings.DMApiValidationMode is set.\n   * @deprecated\n   */\n  requireDMApiValidation?: boolean | null;\n  /** The current Tgstation.Server.Api.Models.DMApiValidationMode. Must not be set on mutation if Tgstation.Server.Api.Models.Internal.DreamMakerSettings.RequireDMApiValidation is set. */\n  dmApiValidationMode?: DMApiValidationMode | null;\n  /**\n   * Amount of time before an in-progress deployment is cancelled.\n   * @format date-span\n   */\n  timeout?: string | null;\n  /**\n   * Additional arguments added to the compiler command line.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  compilerAdditionalArguments?: string | null;\n}\n\n/** A request to the DreamMaker controller. */\nexport interface DreamMakerResponse {\n  /**\n   * The name of the .dme file the server tries to compile with without the extension.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  projectName?: string | null;\n  /**\n   * The port used during compilation to validate the DMAPI.\n   * @format int32\n   * @min 1\n   * @max 65535\n   */\n  apiValidationPort: number;\n  /** The Tgstation.Server.Api.Models.DreamDaemonSecurity level used to validate the DMAPI. */\n  apiValidationSecurityLevel: DreamDaemonSecurity;\n  /**\n   * If API validation should be required for a deployment to succeed. Must not be set on mutation if Tgstation.Server.Api.Models.Internal.DreamMakerSettings.DMApiValidationMode is set.\n   * @deprecated\n   */\n  requireDMApiValidation: boolean;\n  /** The current Tgstation.Server.Api.Models.DMApiValidationMode. Must not be set on mutation if Tgstation.Server.Api.Models.Internal.DreamMakerSettings.RequireDMApiValidation is set. */\n  dmApiValidationMode: DMApiValidationMode;\n  /**\n   * Amount of time before an in-progress deployment is cancelled.\n   * @format date-span\n   */\n  timeout: string;\n  /**\n   * Additional arguments added to the compiler command line.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  compilerAdditionalArguments?: string | null;\n}\n\n/**\n * Rights for deployment.\n * @format int64\n */\nexport enum DreamMakerRights {\n  None = 0,\n  Read = 1,\n  Compile = 2,\n  CancelCompile = 4,\n  SetDme = 8,\n  SetApiValidationPort = 16,\n  CompileJobs = 32,\n  SetSecurityLevel = 64,\n  SetApiValidationRequirement = 128,\n  SetTimeout = 256,\n  SetCompilerArguments = 512,\n}\n\n/** Represents an engine installation job. Tgstation.Server.Api.Models.Response.FileTicketResponse.FileTicket is used to upload custom version zip files. */\nexport interface EngineInstallResponse {\n  /** The Tgstation.Server.Api.Models.Response.JobResponse being used to install a new Tgstation.Server.Api.Models.EngineVersion. */\n  installJob?: JobResponse | null;\n  fileTicket?: string | null;\n}\n\n/** Represents an installed Tgstation.Server.Api.Models.EngineVersion. */\nexport interface EngineResponse {\n  /** The represented Tgstation.Server.Api.Models.EngineVersion. If null that indicates none were found. */\n  engineVersion: EngineVersion;\n}\n\n/**\n * Rights for engine version management.\n * @format int64\n */\nexport enum EngineRights {\n  None = 0,\n  ReadActive = 1,\n  ListInstalled = 2,\n  InstallOfficialOrChangeActiveByondVersion = 4,\n  CancelInstall = 8,\n  InstallCustomByondVersion = 16,\n  DeleteInstall = 32,\n  InstallOfficialOrChangeActiveOpenDreamVersion = 64,\n  InstallCustomOpenDreamVersion = 128,\n}\n\n/**\n * The type of engine the codebase is using.\n * @format int32\n */\nexport enum EngineType {\n  Byond = 0,\n  OpenDream = 1,\n}\n\n/** Information about an engine installation. */\nexport interface EngineVersion {\n  /** The Tgstation.Server.Api.Models.EngineType. */\n  engine: EngineType;\n  /** The System.Version of the engine. Currently only valid when Tgstation.Server.Api.Models.EngineVersion.Engine is Tgstation.Server.Api.Models.EngineType.Byond. */\n  version?: string | null;\n  /**\n   * The git commit SHA of the engine. Currently only valid when Tgstation.Server.Api.Models.EngineVersion.Engine is Tgstation.Server.Api.Models.EngineType.OpenDream.\n   * @minLength 40\n   * @maxLength 40\n   */\n  sourceSHA?: string | null;\n  /**\n   * The revision of the custom build.\n   * @format int32\n   */\n  customIteration?: number | null;\n}\n\n/** A request to delete a specific Tgstation.Server.Api.Models.Request.EngineVersionDeleteRequest.EngineVersion. */\nexport interface EngineVersionDeleteRequest {\n  /** The Tgstation.Server.Api.Models.EngineVersion to delete. */\n  engineVersion?: EngineVersion | null;\n}\n\n/** A request to switch to a given Tgstation.Server.Api.Models.Request.EngineVersionRequest.EngineVersion. */\nexport interface EngineVersionRequest {\n  /** The Tgstation.Server.Api.Models.EngineVersion to switch to. */\n  engineVersion?: EngineVersion | null;\n  /** If a custom BYOND version is to be uploaded. */\n  uploadCustomZip?: boolean | null;\n}\n\n/** Common base of entities with IDs. */\nexport interface EntityId {\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id?: number | null;\n}\n\n/**\n * Types of Tgstation.Server.Api.Models.Response.ErrorMessageResponses that the API may return.\n * @format int32\n */\nexport enum ErrorCode {\n  InternalServerError = 0,\n  ApiMismatch = 1,\n  ModelValidationFailure = 2,\n  IOError = 3,\n  BadHeaders = 4,\n  TokenWithToken = 5,\n  DatabaseIntegrityConflict = 6,\n  MissingHostWatchdog = 7,\n  CannotChangeServerSuite = 8,\n  RemoteApiError = 9,\n  ServerUpdateInProgress = 10,\n  UserNameChange = 11,\n  UserSidChange = 12,\n  UserMismatchNameSid = 13,\n  UserMismatchPasswordSid = 14,\n  UserPasswordLength = 15,\n  UserColonInName = 16,\n  UserMissingName = 17,\n  InstanceRelocateOnline = 18,\n  InstanceAtExistingPath = 19,\n  InstanceDetachOnline = 20,\n  InstanceAtConflictingPath = 21,\n  InstanceLimitReached = 22,\n  InstanceWhitespaceNameOrPath = 23,\n  InstanceHeaderRequired = 24,\n  RequiresPosixSystemIdentity = 25,\n  ConfigurationFileUpdated = 26,\n  ConfigurationDirectoryNotEmpty = 27,\n  SwarmIntegrityCheckFailed = 28,\n  RepoMismatchUserAndAccessToken = 29,\n  RepoCloning = 30,\n  RepoBusy = 31,\n  RepoExists = 32,\n  RepoMissing = 33,\n  RepoMismatchShaAndReference = 34,\n  RepoMismatchShaAndUpdate = 35,\n  EngineCannotDeleteActiveVersion = 36,\n  RepoDuplicateTestMerge = 37,\n  RepoWhitespaceCommitterName = 38,\n  RepoWhitespaceCommitterEmail = 39,\n  ApiPageTooLarge = 40,\n  ApiInvalidPageOrPageSize = 41,\n  ChatBotWrongChannelType = 42,\n  ChatBotWhitespaceConnectionString = 43,\n  ChatBotWhitespaceName = 44,\n  ChatBotProviderMissing = 45,\n  ConfigurationContendedAccess = 46,\n  ChatBotMax = 47,\n  ChatBotMaxChannels = 48,\n  ByondDirectXInstallFail = 49,\n  EngineDownloadFail = 50,\n  EngineNoVersionsInstalled = 51,\n  DeploymentNeverValidated = 52,\n  DeploymentInvalidValidation = 53,\n  CannotRemoveLastAuthenticationOption = 54,\n  DeploymentNoDme = 55,\n  DeploymentMissingDme = 56,\n  DeploymentExitCode = 57,\n  DeploymentInProgress = 58,\n  InstanceMissingDreamDaemonSettings = 59,\n  InstanceMissingDreamMakerSettings = 60,\n  InstanceMissingRepositorySettings = 61,\n  InstanceUpdateTestMergeConflict = 62,\n  RepoCredentialsRequired = 63,\n  RepoCannotAuthenticate = 64,\n  RepoReferenceRequired = 65,\n  WatchdogRunning = 66,\n  WatchdogCompileJobCorrupted = 67,\n  WatchdogStartupFailed = 68,\n  WatchdogStartupTimeout = 69,\n  RepoUnsupportedTestMergeRemote = 70,\n  RepoSwappedShaOrReference = 71,\n  RepoMergeConflict = 72,\n  RepoReferenceNotTracking = 73,\n  RepoTestMergeConflict = 74,\n  InstanceNotAtWhitelistedPath = 75,\n  GameServerDoubleSoft = 76,\n  DreamDaemonPagerRunning = 77,\n  GameServerPortInUse = 78,\n  PostDeployFailure = 79,\n  WatchdogNotRunning = 80,\n  ResourceNotPresent = 81,\n  ResourceNeverPresent = 82,\n  GitHubApiRateLimit = 83,\n  JobStopped = 84,\n  MissingGCore = 85,\n  GCoreFailure = 86,\n  RepoTestMergeInvalidRemote = 87,\n  EngineNonExistentCustomVersion = 88,\n  GameServerOffline = 89,\n  InstanceOffline = 90,\n  ChatCannotConnectProvider = 91,\n  EngineFirewallFail = 92,\n  NoPortsAvailable = 93,\n  PortNotAvailable = 94,\n  AdminUserCannotOAuth = 95,\n  OAuthProviderDisabled = 96,\n  FileUploadExpired = 97,\n  UserGroupAndPermissionSet = 98,\n  UserGroupNotEmpty = 99,\n  UserLimitReached = 100,\n  UserGroupLimitReached = 101,\n  DeploymentTimeout = 102,\n  BroadcastFailure = 103,\n  OpenDreamCantFindDotnet = 104,\n  OpenDreamTooOld = 105,\n  DotnetDiagnosticsFailure = 106,\n  DeploymentWrongDme = 107,\n  RepoTokenUsernameMismatch = 108,\n  RemoteGatewaysNotImplemented = 109,\n}\n\n/** Represents an error message returned by the server. */\nexport interface ErrorMessageResponse {\n  /** The version of the API the server is using. */\n  serverApiVersion: string;\n  /** A human readable description of the error. */\n  message: string;\n  /** Additional data associated with the error message. */\n  additionalData?: string | null;\n  /** The Tgstation.Server.Api.Models.Response.ErrorMessageResponse.ErrorCode of the Tgstation.Server.Api.Models.Response.ErrorMessageResponse. */\n  errorCode: ErrorCode;\n}\n\n/** A request to create an Tgstation.Server.Api.Models.Instance. */\nexport interface InstanceCreateRequest {\n  /**\n   * The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created.\n   * @minLength 1\n   */\n  path: string;\n  /** If Tgstation.Server.Api.Models.IConfigurationFiles can be used on the Tgstation.Server.Api.Models.Instance. */\n  configurationType?: ConfigurationType | null;\n  /**\n   * The time interval in minutes the repository is automatically pulled and compiles. 0 disables.\n   * @format int32\n   */\n  autoUpdateInterval?: number | null;\n  /**\n   * A cron expression indicating when auto-updates should trigger. Must be a valid 6 part cron schedule (SECONDS MINUTES HOURS DAY/MONTH MONTH DAY/WEEK). Empty System.String disables.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  autoUpdateCron?: string | null;\n  /**\n   * The maximum number of chat bots the Tgstation.Server.Api.Models.Instance may contain.\n   * @format int32\n   */\n  chatBotLimit?: number | null;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n}\n\n/**\n * Rights for managing Tgstation.Server.Api.Models.Instances.\n * @format int64\n */\nexport enum InstanceManagerRights {\n  None = 0,\n  Read = 1,\n  Create = 2,\n  Rename = 4,\n  Relocate = 8,\n  SetOnline = 16,\n  Delete = 32,\n  List = 64,\n  SetConfiguration = 128,\n  SetAutoUpdate = 256,\n  SetChatBotLimit = 512,\n  GrantPermissions = 1024,\n}\n\n/** A request to update an instance permission set. */\nexport interface InstancePermissionSetRequest {\n  /**\n   * The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.PermissionSet the Tgstation.Server.Api.Models.Internal.InstancePermissionSet belongs to.\n   * @format int64\n   */\n  permissionSetId: number;\n  /** The Tgstation.Server.Api.Rights.InstancePermissionSetRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  instancePermissionSetRights?: InstancePermissionSetRights | null;\n  /** The Tgstation.Server.Api.Rights.EngineRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  engineRights?: EngineRights | null;\n  /** The Tgstation.Server.Api.Rights.DreamDaemonRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  dreamDaemonRights?: DreamDaemonRights | null;\n  /** The Tgstation.Server.Api.Rights.DreamMakerRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  dreamMakerRights?: DreamMakerRights | null;\n  /** The Tgstation.Server.Api.Rights.RepositoryRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  repositoryRights?: RepositoryRights | null;\n  /** The Tgstation.Server.Api.Rights.ChatBotRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  chatBotRights?: ChatBotRights | null;\n  /** The Tgstation.Server.Api.Rights.ConfigurationRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  configurationRights?: ConfigurationRights | null;\n}\n\n/** A response containing an instance permission set. */\nexport interface InstancePermissionSetResponse {\n  /**\n   * The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.PermissionSet the Tgstation.Server.Api.Models.Internal.InstancePermissionSet belongs to.\n   * @format int64\n   */\n  permissionSetId: number;\n  /** The Tgstation.Server.Api.Rights.InstancePermissionSetRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  instancePermissionSetRights: InstancePermissionSetRights;\n  /** The Tgstation.Server.Api.Rights.EngineRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  engineRights: EngineRights;\n  /** The Tgstation.Server.Api.Rights.DreamDaemonRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  dreamDaemonRights: DreamDaemonRights;\n  /** The Tgstation.Server.Api.Rights.DreamMakerRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  dreamMakerRights: DreamMakerRights;\n  /** The Tgstation.Server.Api.Rights.RepositoryRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  repositoryRights: RepositoryRights;\n  /** The Tgstation.Server.Api.Rights.ChatBotRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  chatBotRights: ChatBotRights;\n  /** The Tgstation.Server.Api.Rights.ConfigurationRights of the Tgstation.Server.Api.Models.Internal.InstancePermissionSet. */\n  configurationRights: ConfigurationRights;\n}\n\n/**\n * Rights for an Tgstation.Server.Api.Models.Instance.\n * @format int64\n */\nexport enum InstancePermissionSetRights {\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Create = 4,\n}\n\n/** Server response for Tgstation.Server.Api.Models.Instances. */\nexport interface InstanceResponse {\n  /** The Tgstation.Server.Api.Models.Response.JobResponse representing a change of Tgstation.Server.Api.Models.Instance.Path. */\n  moveJob?: JobResponse | null;\n  /** If the querying user may access this instance. */\n  accessible: boolean;\n  /**\n   * The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created.\n   * @minLength 1\n   */\n  path: string;\n  /** If the Tgstation.Server.Api.Models.Instance is online. */\n  online: boolean;\n  /** If Tgstation.Server.Api.Models.IConfigurationFiles can be used on the Tgstation.Server.Api.Models.Instance. */\n  configurationType: ConfigurationType;\n  /**\n   * The time interval in minutes the repository is automatically pulled and compiles. 0 disables.\n   * @format int32\n   */\n  autoUpdateInterval: number;\n  /**\n   * A cron expression indicating when auto-updates should trigger. Must be a valid 6 part cron schedule (SECONDS MINUTES HOURS DAY/MONTH MONTH DAY/WEEK). Empty System.String disables.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  autoUpdateCron: string;\n  /**\n   * The maximum number of chat bots the Tgstation.Server.Api.Models.Instance may contain.\n   * @format int32\n   */\n  chatBotLimit: number;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/** A request to update an Tgstation.Server.Api.Models.Instance. */\nexport interface InstanceUpdateRequest {\n  /**\n   * The path to where the Tgstation.Server.Api.Models.Instance is located. Can only be changed while the Tgstation.Server.Api.Models.Instance is offline. Must not exist when the instance is created.\n   * @minLength 1\n   */\n  path?: string | null;\n  /** If the Tgstation.Server.Api.Models.Instance is online. */\n  online?: boolean | null;\n  /** If Tgstation.Server.Api.Models.IConfigurationFiles can be used on the Tgstation.Server.Api.Models.Instance. */\n  configurationType?: ConfigurationType | null;\n  /**\n   * The time interval in minutes the repository is automatically pulled and compiles. 0 disables.\n   * @format int32\n   */\n  autoUpdateInterval?: number | null;\n  /**\n   * A cron expression indicating when auto-updates should trigger. Must be a valid 6 part cron schedule (SECONDS MINUTES HOURS DAY/MONTH MONTH DAY/WEEK). Empty System.String disables.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  autoUpdateCron?: string | null;\n  /**\n   * The maximum number of chat bots the Tgstation.Server.Api.Models.Instance may contain.\n   * @format int32\n   */\n  chatBotLimit?: number | null;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name?: string | null;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/**\n * The different types of Tgstation.Server.Api.Models.Response.JobResponse.\n * @format int32\n */\nexport enum JobCode {\n  Unknown = 0,\n  Move = 1,\n  RepositoryClone = 2,\n  RepositoryUpdate = 3,\n  RepositoryAutoUpdate = 4,\n  RepositoryDelete = 5,\n  EngineOfficialInstall = 6,\n  EngineCustomInstall = 7,\n  EngineDelete = 8,\n  Deployment = 9,\n  AutomaticDeployment = 10,\n  WatchdogLaunch = 11,\n  WatchdogRestart = 12,\n  WatchdogDump = 13,\n  StartupWatchdogLaunch = 14,\n  StartupWatchdogReattach = 15,\n  ReconnectChatBot = 16,\n  RepositoryReclone = 17,\n}\n\n/** Represents a long running job on the server. Model is read-only, updates attempt to cancel the job. */\nexport interface JobResponse {\n  /**\n   * The Tgstation.Server.Api.Models.EntityId.Id of the Tgstation.Server.Api.Models.Instance.\n   * @format int64\n   */\n  instanceId: number;\n  /** The Tgstation.Server.Api.Models.Response.UserResponse that started the job. */\n  startedBy: ShallowUserResponse;\n  /** The Tgstation.Server.Api.Models.Response.UserResponse that cancelled the job. */\n  cancelledBy?: ShallowUserResponse | null;\n  /**\n   * Optional progress between 0 and 100 inclusive.\n   * @format int32\n   */\n  progress?: number | null;\n  /** Optional description of the job's current . */\n  stage?: string | null;\n  /** The Tgstation.Server.Api.Models.JobCode. */\n  jobCode: JobCode;\n  /**\n   * English description of the Tgstation.Server.Api.Models.Internal.Job.\n   * @minLength 1\n   */\n  description: string;\n  /** The Tgstation.Server.Api.Models.ErrorCode associated with the Tgstation.Server.Api.Models.Internal.Job if any. */\n  errorCode?: ErrorCode | null;\n  /** Details of any exceptions caught during the Tgstation.Server.Api.Models.Internal.Job. */\n  exceptionDetails?: string | null;\n  /**\n   * When the Tgstation.Server.Api.Models.Internal.Job was started.\n   * @format date-time\n   */\n  startedAt: string;\n  /**\n   * When the Tgstation.Server.Api.Models.Internal.Job stopped.\n   * @format date-time\n   */\n  stoppedAt?: string | null;\n  /** If the Tgstation.Server.Api.Models.Internal.Job was cancelled. */\n  cancelled: boolean;\n  /** The Tgstation.Server.Api.Rights.RightsType of Tgstation.Server.Api.Models.Internal.Job.CancelRight if it can be cancelled. */\n  cancelRightsType?: RightsType | null;\n  /**\n   * The N:Tgstation.Server.Api.Rights required to cancel the Tgstation.Server.Api.Models.Internal.Job.\n   * @format int64\n   */\n  cancelRight?: number | null;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/** Represents a server log file. */\nexport interface LogFileResponse {\n  /** The name of the log file. */\n  name: string;\n  /**\n   * The System.DateTimeOffset of when the log file was modified.\n   * @format date-time\n   */\n  lastModified: string;\n  /** The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller. */\n  fileTicket: string;\n}\n\n/** Represents a valid OAuth connection. */\nexport interface OAuthConnection {\n  /** The Tgstation.Server.Api.Models.OAuthProvider of the Tgstation.Server.Api.Models.OAuthConnection. */\n  provider: OAuthProvider;\n  /**\n   * The ID of the user in the Tgstation.Server.Api.Models.OAuthConnection.Provider.\n   * @minLength 1\n   * @maxLength 100\n   */\n  externalUserId: string;\n}\n\n/** List of OAuth providers supported by TGS. */\nexport enum OAuthProvider {\n  GitHub = \"GitHub\",\n  Discord = \"Discord\",\n  TGForums = \"TGForums\",\n  Keycloak = \"Keycloak\",\n  InvisionCommunity = \"InvisionCommunity\",\n}\n\n/** Public information about a given Tgstation.Server.Api.Models.OAuthProvider. */\nexport interface OAuthProviderInfo {\n  /** The client ID. */\n  clientId: string;\n  /**\n   * The redirect URL.\n   * @format uri\n   */\n  redirectUri: string;\n  /**\n   * The server URL.\n   * @format uri\n   */\n  serverUrl?: string | null;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedChatBotResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: ChatBotResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedCompileJobResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: CompileJobResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedConfigurationFileResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: ConfigurationFileResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedEngineResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: EngineResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedInstancePermissionSetResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: InstancePermissionSetResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedInstanceResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: InstanceResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedJobResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: JobResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedLogFileResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: LogFileResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedUserGroupResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: UserGroupResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a paginated set of models. */\nexport interface PaginatedUserResponse {\n  /** The System.Collections.Generic.ICollection`1 of the returned <typeparamref name=\"TModel\" />s. */\n  content: UserResponse[];\n  /**\n   * The total number of pages in the query.\n   * @format int32\n   */\n  totalPages: number;\n  /**\n   * The current size of pages in the query.\n   * @format int32\n   */\n  pageSize: number;\n  /**\n   * The total items across all pages.\n   * @format int32\n   */\n  totalItems: number;\n}\n\n/** Represents a set of server permissions. */\nexport interface PermissionSet {\n  /** @format int64 */\n  id?: number | null;\n  /** The Tgstation.Server.Api.Rights.AdministrationRights for the user. */\n  administrationRights: AdministrationRights;\n  /** The Tgstation.Server.Api.Rights.InstanceManagerRights for the user. */\n  instanceManagerRights: InstanceManagerRights;\n}\n\n/**\n * Indicates the remote git host.\n * @format int32\n */\nexport enum RemoteGitProvider {\n  Unknown = 0,\n  GitHub = 1,\n  GitLab = 2,\n}\n\n/** Represents a request to clone the repository. */\nexport interface RepositoryCreateRequest {\n  /**\n   * The origin URL to clone.\n   * @format uri\n   */\n  origin: string;\n  /**\n   * The branch or tag HEAD points to.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  reference?: string | null;\n  /**\n   * The name of the committer.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  committerName?: string | null;\n  /**\n   * The e-mail of the committer.\n   * @format email\n   * @minLength 0\n   * @maxLength 10000\n   */\n  committerEmail?: string | null;\n  /**\n   * The username to access the git repository with. If using a TGS encoded app private key for Tgstation.Server.Api.Models.RepositorySettings.AccessToken, this should be the app's name.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  accessUser?: string | null;\n  /**\n   * The token/password to access the git repository with. Can also be a TGS encoded app private key. Tgstation.Server.Api.Models.RepositorySettings.TgsAppPrivateKeyPrefix for details.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  accessToken?: string | null;\n  /** If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  pushTestMergeCommits?: boolean | null;\n  /** If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.RepositorySettings.PushTestMergeCommits to be set to function. */\n  createGitHubDeployments?: boolean | null;\n  /** If test merge commits are signed with the username of the person who merged it. Note this only affects future commits. */\n  showTestMergeCommitters?: boolean | null;\n  /** If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update. */\n  autoUpdatesKeepTestMerges?: boolean | null;\n  /** If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  autoUpdatesSynchronize?: boolean | null;\n  /** If test merging should create a comment. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  postTestMergeComment?: boolean | null;\n  /** Do the equivalent of a `git submodule update --init` alongside any resets to origin, checkouts, or test merge additions. Note that this action is recursive ONLY during cloning. */\n  updateSubmodules?: boolean | null;\n}\n\n/** Represents a git repository. */\nexport interface RepositoryResponse {\n  /**\n   * The origin URL. If null, the git repository does not currently exist on the server.\n   * @format uri\n   */\n  origin?: string | null;\n  /** The current Tgstation.Server.Api.Models.RevisionInformation. */\n  revisionInformation?: RevisionInformation | null;\n  remoteGitProvider?: RemoteGitProvider | null;\n  remoteRepositoryOwner?: string | null;\n  remoteRepositoryName?: string | null;\n  /** The Tgstation.Server.Api.Models.Response.JobResponse started by the request, if any. */\n  activeJob?: JobResponse | null;\n  /**\n   * The branch or tag HEAD points to.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  reference?: string | null;\n  /**\n   * The name of the committer.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  committerName: string;\n  /**\n   * The e-mail of the committer.\n   * @format email\n   * @minLength 0\n   * @maxLength 10000\n   */\n  committerEmail: string;\n  /**\n   * The username to access the git repository with. If using a TGS encoded app private key for Tgstation.Server.Api.Models.RepositorySettings.AccessToken, this should be the app's name.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  accessUser?: string | null;\n  /** If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  pushTestMergeCommits: boolean;\n  /** If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.RepositorySettings.PushTestMergeCommits to be set to function. */\n  createGitHubDeployments: boolean;\n  /** If test merge commits are signed with the username of the person who merged it. Note this only affects future commits. */\n  showTestMergeCommitters: boolean;\n  /** If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update. */\n  autoUpdatesKeepTestMerges: boolean;\n  /** If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  autoUpdatesSynchronize: boolean;\n  /** If test merging should create a comment. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  postTestMergeComment: boolean;\n  /** Do the equivalent of a `git submodule update --init` alongside any resets to origin, checkouts, or test merge additions. Note that this action is recursive ONLY during cloning. */\n  updateSubmodules: boolean;\n}\n\n/**\n * Rights for the git repository.\n * @format int64\n */\nexport enum RepositoryRights {\n  None = 0,\n  CancelPendingChanges = 1,\n  SetOrigin = 2,\n  SetSha = 4,\n  MergePullRequest = 8,\n  UpdateBranch = 16,\n  ChangeCommitter = 32,\n  ChangeTestMergeCommits = 64,\n  ChangeCredentials = 128,\n  SetReference = 256,\n  Read = 512,\n  ChangeAutoUpdateSettings = 1024,\n  Delete = 2048,\n  CancelClone = 4096,\n  ChangeSubmoduleUpdate = 8192,\n  Reclone = 16384,\n}\n\n/** Represents a request to change the repository. */\nexport interface RepositoryUpdateRequest {\n  /**\n   * The commit HEAD should point to.\n   * @minLength 0\n   * @maxLength 40\n   */\n  checkoutSha?: string | null;\n  /** Do the equivalent of a `git pull`. Will attempt to merge unless Tgstation.Server.Api.Models.Internal.RepositoryApiBase.Reference is also specified in which case a hard reset will be performed after checking out. */\n  updateFromOrigin?: boolean | null;\n  /** Tgstation.Server.Api.Models.TestMergeParameters for new Tgstation.Server.Api.Models.TestMerges. Note that merges that conflict will not be performed. */\n  newTestMerges?: TestMergeParameters[] | null;\n  /**\n   * The branch or tag HEAD points to.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  reference?: string | null;\n  /**\n   * The name of the committer.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  committerName?: string | null;\n  /**\n   * The e-mail of the committer.\n   * @format email\n   * @minLength 0\n   * @maxLength 10000\n   */\n  committerEmail?: string | null;\n  /**\n   * The username to access the git repository with. If using a TGS encoded app private key for Tgstation.Server.Api.Models.RepositorySettings.AccessToken, this should be the app's name.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  accessUser?: string | null;\n  /**\n   * The token/password to access the git repository with. Can also be a TGS encoded app private key. Tgstation.Server.Api.Models.RepositorySettings.TgsAppPrivateKeyPrefix for details.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  accessToken?: string | null;\n  /** If commits created from testmerges are pushed to the remote. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  pushTestMergeCommits?: boolean | null;\n  /** If GitHub deployments should be created. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessUser, Tgstation.Server.Api.Models.RepositorySettings.AccessToken, and Tgstation.Server.Api.Models.RepositorySettings.PushTestMergeCommits to be set to function. */\n  createGitHubDeployments?: boolean | null;\n  /** If test merge commits are signed with the username of the person who merged it. Note this only affects future commits. */\n  showTestMergeCommitters?: boolean | null;\n  /** If test merge commits should be kept when auto updating. May cause merge conflicts which will block the update. */\n  autoUpdatesKeepTestMerges?: boolean | null;\n  /** If synchronization should occur when auto updating. Requries Tgstation.Server.Api.Models.RepositorySettings.AccessUser and Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  autoUpdatesSynchronize?: boolean | null;\n  /** If test merging should create a comment. Requires Tgstation.Server.Api.Models.RepositorySettings.AccessToken to be set to function. */\n  postTestMergeComment?: boolean | null;\n  /** Do the equivalent of a `git submodule update --init` alongside any resets to origin, checkouts, or test merge additions. Note that this action is recursive ONLY during cloning. */\n  updateSubmodules?: boolean | null;\n}\n\nexport interface RevisionInformation {\n  /** The Tgstation.Server.Api.Models.TestMerge that was created with this Tgstation.Server.Api.Models.RevisionInformation. */\n  primaryTestMerge?: TestMerge | null;\n  /** The Tgstation.Server.Api.Models.TestMerges active in the Tgstation.Server.Api.Models.RevisionInformation. */\n  activeTestMerges: TestMerge[];\n  /** The Tgstation.Server.Api.Models.Internal.CompileJobs made from the Tgstation.Server.Api.Models.RevisionInformation. */\n  compileJobs: EntityId[];\n  /**\n   * The revision SHA.\n   * @minLength 0\n   * @maxLength 40\n   */\n  commitSha: string;\n  /**\n   * The timestamp of the revision.\n   * @format date-time\n   */\n  timestamp: string;\n  /**\n   * The SHA of the most recent remote commit.\n   * @minLength 0\n   * @maxLength 40\n   */\n  originCommitSha: string;\n}\n\n/**\n * The type of rights a model uses.\n * @format int64\n */\nexport enum RightsType {\n  Administration = 0,\n  InstanceManager = 1,\n  Repository = 2,\n  Engine = 3,\n  DreamMaker = 4,\n  DreamDaemon = 5,\n  ChatBots = 6,\n  Configuration = 7,\n  InstancePermissionSet = 8,\n}\n\n/** Represents basic server information. */\nexport interface ServerInformationResponse {\n  /** The version of the host. */\n  version: string;\n  /** The N:Tgstation.Server.Api version of the host. */\n  apiVersion: string;\n  /** The DMAPI interop version the server uses. */\n  dmApiVersion: string;\n  /** If the server is running on a windows operating system. */\n  windowsHost: boolean;\n  /** Map of Tgstation.Server.Api.Models.OAuthProvider to the Tgstation.Server.Api.Models.OAuthProviderInfo for them. */\n  oAuthProviderInfos: {\n    /** Public information about a given Tgstation.Server.Api.Models.OAuthProvider. */\n    GitHub: OAuthProviderInfo;\n    /** Public information about a given Tgstation.Server.Api.Models.OAuthProvider. */\n    Discord: OAuthProviderInfo;\n    /** Public information about a given Tgstation.Server.Api.Models.OAuthProvider. */\n    TGForums: OAuthProviderInfo;\n    /** Public information about a given Tgstation.Server.Api.Models.OAuthProvider. */\n    Keycloak: OAuthProviderInfo;\n    /** Public information about a given Tgstation.Server.Api.Models.OAuthProvider. */\n    InvisionCommunity: OAuthProviderInfo;\n  };\n  /** If there is a server update in progress. */\n  updateInProgress: boolean;\n  /** A System.Collections.Generic.ICollection`1 of connected Tgstation.Server.Api.Models.Response.SwarmServerResponses. */\n  swarmServers?: SwarmServerResponse[] | null;\n  /**\n   * Minimum length of database user passwords.\n   * @format int32\n   */\n  minimumPasswordLength: number;\n  /**\n   * The maximum number of Tgstation.Server.Api.Models.Instances allowed.\n   * @format int32\n   */\n  instanceLimit: number;\n  /**\n   * The maximum number of users allowed.\n   * @format int32\n   */\n  userLimit: number;\n  /**\n   * The maximum number of user groups allowed.\n   * @format int32\n   */\n  userGroupLimit: number;\n  /** Limits the locations instances may be created or attached from. */\n  validInstancePaths?: string[] | null;\n}\n\n/** Represents a request to update TGS. */\nexport interface ServerUpdateRequest {\n  /** Changes the version of tgstation-server to the given version from the upstream repository. */\n  newVersion: string;\n  /** If the user will provide the server update package .zip file via file transfer as opposed to TGS retrieving it from GitHub. */\n  uploadZip?: boolean | null;\n}\n\n/** A response to a Tgstation.Server.Api.Models.Request.ServerUpdateRequest. */\nexport interface ServerUpdateResponse {\n  /** The version of tgstation-server pending update. */\n  newVersion: string;\n  /** The ticket to use to access the Tgstation.Server.Api.Routes.Transfer controller. */\n  fileTicket: string;\n}\n\n/** Base class for user names. */\nexport interface ShallowUserResponse {\n  name: string;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\nexport interface SwarmServerResponse {\n  /** If the Tgstation.Server.Api.Models.Response.SwarmServerResponse is the controller. */\n  controller: boolean;\n  /**\n   * The public address of the server.\n   * @format uri\n   */\n  address: string;\n  /**\n   * The address the swarm server can be publically accessed.\n   * @format uri\n   */\n  publicAddress: string;\n  /**\n   * The server's identifier.\n   * @minLength 1\n   */\n  identifier: string;\n}\n\nexport interface TestMerge {\n  /** The Tgstation.Server.Api.Models.NamedEntity of the user who created the Tgstation.Server.Api.Models.TestMerge. */\n  mergedBy: ShallowUserResponse;\n  /**\n   * The ID of the Tgstation.Server.Api.Models.Internal.TestMergeApiBase.\n   * @format int64\n   */\n  id: number;\n  /**\n   * When the Tgstation.Server.Api.Models.Internal.TestMergeApiBase was created.\n   * @format date-time\n   */\n  mergedAt: string;\n  /**\n   * The title of the test merge source.\n   * @minLength 1\n   */\n  titleAtMerge: string;\n  /**\n   * The body of the test merge source.\n   * @minLength 1\n   */\n  bodyAtMerge: string;\n  /**\n   * The URL of the test merge source.\n   * @minLength 1\n   */\n  url: string;\n  /**\n   * The author of the test merge source.\n   * @minLength 1\n   */\n  author: string;\n  /**\n   * The number of the test merge source.\n   * @format int32\n   */\n  number: number;\n  /**\n   * The sha of the test merge revision to merge. If not specified, the latest commit from the source will be used.\n   * @minLength 0\n   * @maxLength 40\n   */\n  targetCommitSha: string;\n  /**\n   * Optional comment about the test.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  comment?: string | null;\n}\n\n/** Parameters for creating a Tgstation.Server.Api.Models.TestMerge. */\nexport interface TestMergeParameters {\n  /**\n   * The number of the test merge source.\n   * @format int32\n   */\n  number: number;\n  /**\n   * The sha of the test merge revision to merge. If not specified, the latest commit from the source will be used.\n   * @minLength 0\n   * @maxLength 40\n   */\n  targetCommitSha?: string | null;\n  /**\n   * Optional comment about the test.\n   * @minLength 0\n   * @maxLength 10000\n   */\n  comment?: string | null;\n}\n\n/** Represents a JWT returned by the API. */\nexport interface TokenResponse {\n  /** The value of the JWT. */\n  bearer: string;\n}\n\n/** For creating a user. */\nexport interface UserCreateRequest {\n  /**\n   * Cleartext password of the user.\n   * @minLength 1\n   */\n  password?: string | null;\n  /** List of Tgstation.Server.Api.Models.OAuthConnections associated with the user. */\n  oAuthConnections?: OAuthConnection[] | null;\n  /** The Tgstation.Server.Api.Models.PermissionSet directly associated with the user. */\n  permissionSet?: PermissionSet | null;\n  /** The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the user, if any. */\n  group?: UserGroup | null;\n  /** If the Tgstation.Server.Api.Models.Internal.UserModelBase is enabled since users cannot be deleted. System users cannot be disabled. */\n  enabled?: boolean | null;\n  /**\n   * The SID/UID of the Tgstation.Server.Api.Models.Internal.UserModelBase on Windows/POSIX respectively.\n   * @minLength 1\n   * @maxLength 100\n   */\n  systemIdentifier?: string | null;\n  name?: string | null;\n}\n\n/** Represents a group of users. */\nexport interface UserGroup {\n  /** @format int64 */\n  id: number;\n  /** The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup. */\n  permissionSet: PermissionSet;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n}\n\n/** Request to create a user group. */\nexport interface UserGroupCreateRequest {\n  /** @format int64 */\n  id: number;\n  /** The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup. */\n  permissionSet?: PermissionSet | null;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n}\n\nexport interface UserGroupResponse {\n  /** The Tgstation.Server.Api.Models.UserNames the Tgstation.Server.Api.Models.Response.UserGroupResponse has. */\n  users: ShallowUserResponse[];\n  /** @format int64 */\n  id: number;\n  /** The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup. */\n  permissionSet: PermissionSet;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name: string;\n}\n\n/** Request to update a user group. */\nexport interface UserGroupUpdateRequest {\n  /** @format int64 */\n  id: number;\n  /** The Tgstation.Server.Api.Models.PermissionSet of the Tgstation.Server.Api.Models.Internal.UserGroup. */\n  permissionSet?: PermissionSet | null;\n  /**\n   * The name of the entity represented by the Tgstation.Server.Api.Models.NamedEntity.\n   * @minLength 1\n   * @maxLength 100\n   */\n  name?: string | null;\n}\n\nexport interface UserResponse {\n  /** The Tgstation.Server.Api.Models.Response.UserResponse who created this Tgstation.Server.Api.Models.Response.UserResponse. */\n  createdBy: ShallowUserResponse;\n  /** List of Tgstation.Server.Api.Models.OAuthConnections associated with the user. */\n  oAuthConnections: OAuthConnection[];\n  /** The Tgstation.Server.Api.Models.PermissionSet directly associated with the user. */\n  permissionSet?: PermissionSet | null;\n  /** The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the user, if any. */\n  group?: UserGroup | null;\n  /** If the Tgstation.Server.Api.Models.Internal.UserModelBase is enabled since users cannot be deleted. System users cannot be disabled. */\n  enabled: boolean;\n  /**\n   * When the Tgstation.Server.Api.Models.Internal.UserModelBase was created.\n   * @format date-time\n   */\n  createdAt: string;\n  /**\n   * The SID/UID of the Tgstation.Server.Api.Models.Internal.UserModelBase on Windows/POSIX respectively.\n   * @minLength 1\n   * @maxLength 100\n   */\n  systemIdentifier?: string | null;\n  name: string;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/** For editing a given user. */\nexport interface UserUpdateRequest {\n  /**\n   * Cleartext password of the user.\n   * @minLength 1\n   */\n  password?: string | null;\n  /** List of Tgstation.Server.Api.Models.OAuthConnections associated with the user. */\n  oAuthConnections?: OAuthConnection[] | null;\n  /** The Tgstation.Server.Api.Models.PermissionSet directly associated with the user. */\n  permissionSet?: PermissionSet | null;\n  /** The Tgstation.Server.Api.Models.Internal.UserGroup asociated with the user, if any. */\n  group?: UserGroup | null;\n  /** If the Tgstation.Server.Api.Models.Internal.UserModelBase is enabled since users cannot be deleted. System users cannot be disabled. */\n  enabled?: boolean | null;\n  /**\n   * The SID/UID of the Tgstation.Server.Api.Models.Internal.UserModelBase on Windows/POSIX respectively.\n   * @minLength 1\n   * @maxLength 100\n   */\n  systemIdentifier?: string | null;\n  name?: string | null;\n  /**\n   * The ID of the entity.\n   * @format int64\n   */\n  id: number;\n}\n\n/**\n * The current status of the watchdog.\n * @format int32\n */\nexport enum WatchdogStatus {\n  Offline = 0,\n  Restoring = 1,\n  Online = 2,\n  DelayedRestart = 3,\n}\n\nexport interface AdministrationControllerReadParams {\n  /** If true, the cache should be bypassed. */\n  fresh: boolean;\n}\n\n/** Represents a request to update TGS. */\nexport type AdministrationControllerUpdatePayload = ServerUpdateRequest;\n\nexport interface AdministrationControllerListLogsParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** Represents a request to update a chat bot. */\nexport type ChatControllerCreatePayload = ChatBotCreateRequest;\n\n/** Represents a request to update a chat bot. */\nexport type ChatControllerUpdatePayload = ChatBotUpdateRequest;\n\nexport interface ChatControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** Represents a request to update a configuration file. */\nexport type ConfigurationControllerUpdatePayload = ConfigurationFileRequest;\n\n/** Represents a request to update a configuration file. */\nexport type ConfigurationControllerCreateDirectoryPayload = ConfigurationFileRequest;\n\n/** Represents a request to update a configuration file. */\nexport type ConfigurationControllerDeleteDirectoryPayload = ConfigurationFileRequest;\n\nexport interface ConfigurationControllerDirectoryParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n  /** The path of the directory to get. */\n  directoryPath: string;\n}\n\nexport interface ConfigurationControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** A request to update Tgstation.Server.Api.Models.Internal.DreamDaemonSettings. */\nexport type DreamDaemonControllerUpdatePayload = DreamDaemonRequest;\n\n/** A request to the DreamMaker controller. */\nexport type DreamMakerControllerUpdatePayload = DreamMakerRequest;\n\nexport interface DreamMakerControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** A request to switch to a given Tgstation.Server.Api.Models.Request.EngineVersionRequest.EngineVersion. */\nexport type EngineControllerUpdatePayload = EngineVersionRequest;\n\n/** A request to delete a specific Tgstation.Server.Api.Models.Request.EngineVersionDeleteRequest.EngineVersion. */\nexport type EngineControllerDeletePayload = EngineVersionDeleteRequest;\n\nexport interface EngineControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** A request to create an Tgstation.Server.Api.Models.Instance. */\nexport type InstanceControllerCreatePayload = InstanceCreateRequest;\n\n/** A request to update an Tgstation.Server.Api.Models.Instance. */\nexport type InstanceControllerUpdatePayload = InstanceUpdateRequest;\n\nexport interface InstanceControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** A request to update an instance permission set. */\nexport type InstancePermissionSetControllerCreatePayload = InstancePermissionSetRequest;\n\n/** A request to update an instance permission set. */\nexport type InstancePermissionSetControllerUpdatePayload = InstancePermissionSetRequest;\n\nexport interface InstancePermissionSetControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\nexport interface JobControllerReadParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\nexport interface JobControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** Represents a request to clone the repository. */\nexport type RepositoryControllerCreatePayload = RepositoryCreateRequest;\n\n/** Represents a request to change the repository. */\nexport type RepositoryControllerUpdatePayload = RepositoryUpdateRequest;\n\nexport interface TransferControllerDownloadParams {\n  /** The Tgstation.Server.Api.Models.Response.FileTicketResponse.FileTicket for the download. */\n  ticket: string;\n}\n\n/** @format binary */\nexport type TransferControllerUploadPayload = File;\n\nexport interface TransferControllerUploadParams {\n  /** The Tgstation.Server.Api.Models.Response.FileTicketResponse.FileTicket for the upload. */\n  ticket: string;\n}\n\n/** For creating a user. */\nexport type UserControllerCreatePayload = UserCreateRequest;\n\n/** For editing a given user. */\nexport type UserControllerUpdatePayload = UserUpdateRequest;\n\nexport interface UserControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\n/** Request to create a user group. */\nexport type UserGroupControllerCreatePayload = UserGroupCreateRequest;\n\n/** Request to update a user group. */\nexport type UserGroupControllerUpdatePayload = UserGroupUpdateRequest;\n\nexport interface UserGroupControllerListParams {\n  /**\n   * The current page.\n   * @format int32\n   */\n  page: number;\n  /**\n   * The page size.\n   * @format int32\n   */\n  pageSize: number;\n}\n\nimport axios, {\n  AxiosHeaders,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n  HeadersDefaults,\n  RawAxiosRequestHeaders,\n  ResponseType,\n} from \"axios\";\nimport { ServerClientRequestConfig } from \"../ServerClientRequestConfig\";\n\ntype RawAxiosHeaders = Omit<RawAxiosRequestHeaders, \"Content-Type\">;\n\nexport type QueryParamsType = Record<string | number, any>;\n\nexport interface FullRequestParams extends Omit<ServerClientRequestConfig, \"data\" | \"params\" | \"url\" | \"responseType\"> {\n  /** set parameter to `true` for call `securityWorker` for this request */\n  secure?: boolean;\n  /** request path */\n  path: string;\n  /** content type of request body */\n  type?: ContentType;\n  /** query params */\n  query?: QueryParamsType;\n  /** format of response (i.e. response.json() -> format: \"json\") */\n  format?: ResponseType;\n  /** request body */\n  body?: unknown;\n}\ntype ExtendedRequestParams = Omit<FullRequestParams, \"body\" | \"method\" | \"query\" | \"path\">;\nexport type RequestParams = Omit<ExtendedRequestParams, \"headers\"> & {\n  headers?: RawAxiosHeaders;\n};\n\nexport interface ApiConfig<SecurityDataType = unknown> extends Omit<AxiosRequestConfig, \"data\" | \"cancelToken\"> {\n  securityWorker?: (\n    securityData: SecurityDataType | null,\n  ) => Promise<AxiosRequestConfig | void> | AxiosRequestConfig | void;\n  secure?: boolean;\n  format?: ResponseType;\n}\n\nexport enum ContentType {\n  Json = \"application/json\",\n  FormData = \"multipart/form-data\",\n  UrlEncoded = \"application/x-www-form-urlencoded\",\n  Text = \"text/plain\",\n}\n\nexport class HttpClient<SecurityDataType = unknown> {\n  public instance: AxiosInstance;\n  private securityData: SecurityDataType | null = null;\n  private securityWorker?: ApiConfig<SecurityDataType>[\"securityWorker\"];\n  private secure?: boolean;\n  private format?: ResponseType;\n\n  constructor({ securityWorker, secure, format, ...axiosConfig }: ApiConfig<SecurityDataType> = {}) {\n    this.instance = axios.create({ ...axiosConfig, baseURL: axiosConfig.baseURL || \"\" });\n    this.secure = secure;\n    this.format = format;\n    this.securityWorker = securityWorker;\n  }\n\n  public setSecurityData = (data: SecurityDataType | null) => {\n    this.securityData = data;\n  };\n\n  protected mergeRequestParams(params1: AxiosRequestConfig, params2?: AxiosRequestConfig): AxiosRequestConfig {\n    const method = params1.method || (params2 && params2.method);\n\n    return {\n      ...this.instance.defaults,\n      ...params1,\n      ...(params2 || {}),\n      headers: {\n        ...((method && this.instance.defaults.headers[method.toLowerCase() as keyof HeadersDefaults]) || {}),\n        ...(params1.headers || {}),\n        ...((params2 && params2.headers) || {}),\n      },\n    };\n  }\n\n  protected stringifyFormItem(formItem: unknown) {\n    if (typeof formItem === \"object\" && formItem !== null) {\n      return JSON.stringify(formItem);\n    } else {\n      return `${formItem}`;\n    }\n  }\n\n  protected createFormData(input: Record<string, unknown>): FormData {\n    if (input instanceof FormData) {\n      return input;\n    }\n    return Object.keys(input || {}).reduce((formData, key) => {\n      const property = input[key];\n      const propertyContent: any[] = property instanceof Array ? property : [property];\n\n      for (const formItem of propertyContent) {\n        const isFileType = formItem instanceof Blob || formItem instanceof File;\n        formData.append(key, isFileType ? formItem : this.stringifyFormItem(formItem));\n      }\n\n      return formData;\n    }, new FormData());\n  }\n\n  public request = async <T = any, _E = any>({\n    secure,\n    path,\n    type,\n    query,\n    format,\n    body,\n    headers,\n    ...params\n  }: Omit<FullRequestParams, \"headers\"> & { headers?: RawAxiosHeaders }): Promise<AxiosResponse<T | _E>> => {\n    const secureParams =\n      ((typeof secure === \"boolean\" ? secure : this.secure) &&\n        this.securityWorker &&\n        (await this.securityWorker(this.securityData))) ||\n      {};\n    if (headers) {\n      (params as FullRequestParams).headers = new AxiosHeaders(headers as AxiosHeaders);\n    } else {\n      (params as FullRequestParams).headers = new AxiosHeaders();\n    }\n    const requestParams = this.mergeRequestParams(params, secureParams);\n    const responseFormat = format || this.format || undefined;\n\n    if (type === ContentType.FormData && body && body !== null && typeof body === \"object\") {\n      body = this.createFormData(body as Record<string, unknown>);\n    }\n\n    if (type === ContentType.Text && body && body !== null && typeof body !== \"string\") {\n      body = JSON.stringify(body);\n    }\n\n    return this.instance.request({\n      ...requestParams,\n      headers: {\n        ...(requestParams.headers || {}),\n        ...(type ? { \"Content-Type\": type } : {}),\n      },\n      params: query,\n      responseType: responseFormat,\n      data: body,\n      url: path,\n    });\n  };\n}\n\n/**\n * @title TGS API\n * @version 10.10.0\n * @license AGPL-3.0 (https://github.com/tgstation/tgstation-server/blob/dev/LICENSE)\n * @externalDocs https://tgstation.github.io/tgstation-server/api.html\n * @contact /tg/station 13 (https://github.com/tgstation)\n *\n * A production scale tool for DreamMaker server management\n */\nexport class Api<SecurityDataType extends unknown> {\n  http: HttpClient<SecurityDataType>;\n\n  constructor(http: HttpClient<SecurityDataType>) {\n    this.http = http;\n  }\n\n  api = {\n    /**\n     * No description\n     *\n     * @tags Administration\n     * @name AdministrationControllerRead\n     * @summary Get Tgstation.Server.Api.Models.Response.AdministrationResponse server information.\n     * @request GET:/api/Administration\n     * @secure\n     * @response `200` `AdministrationResponse` Retrieved Tgstation.Server.Api.Models.Response.AdministrationResponse data successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `424` `ErrorMessageResponse` The GitHub API rate limit was hit. See response header Retry-After.\n     * @response `429` `ErrorMessageResponse` A GitHub API error occurred. See error message for details.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    administrationControllerRead: (query: AdministrationControllerReadParams, params: RequestParams = {}) =>\n      this.http.request<AdministrationResponse, ErrorMessageResponse>({\n        path: `/api/Administration`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Administration\n     * @name AdministrationControllerUpdate\n     * @summary Attempt to perform a server upgrade.\n     * @request POST:/api/Administration\n     * @secure\n     * @response `202` `ServerUpdateResponse` Update has been started successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The requested release version could not be found in the target GitHub repository.\n     * @response `422` `ErrorMessageResponse` Upgrade operations are unavailable due to the launch configuration of TGS.\n     * @response `424` `ErrorMessageResponse` A GitHub rate limit was encountered or the swarm integrity check failed.\n     * @response `429` `ErrorMessageResponse` A GitHub API error occurred.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    administrationControllerUpdate: (data: AdministrationControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<ServerUpdateResponse, ErrorMessageResponse>({\n        path: `/api/Administration`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Administration\n     * @name AdministrationControllerDelete\n     * @summary Attempts to restart the server.\n     * @request DELETE:/api/Administration\n     * @secure\n     * @response `204` `void` Restart begun successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `422` `ErrorMessageResponse` Restart operations are unavailable due to the launch configuration of TGS.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    administrationControllerDelete: (params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/Administration`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Administration\n     * @name AdministrationControllerListLogs\n     * @summary List Tgstation.Server.Api.Models.Response.LogFileResponses present.\n     * @request GET:/api/Administration/Logs\n     * @secure\n     * @response `200` `PaginatedLogFileResponse` Listed logs successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` An IO error occurred while listing.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    administrationControllerListLogs: (query: AdministrationControllerListLogsParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedLogFileResponse, ErrorMessageResponse>({\n        path: `/api/Administration/Logs`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Administration\n     * @name AdministrationControllerGetLog\n     * @summary Download a Tgstation.Server.Api.Models.Response.LogFileResponse.\n     * @request GET:/api/Administration/Logs/{path}\n     * @secure\n     * @response `200` `LogFileResponse` Downloaded Tgstation.Server.Api.Models.Response.LogFileResponse successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` An IO error occurred while downloading.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    administrationControllerGetLog: (path: string, params: RequestParams = {}) =>\n      this.http.request<LogFileResponse, ErrorMessageResponse>({\n        path: `/api/Administration/Logs/${path}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags ApiRoot\n     * @name ApiRootControllerServerInfo\n     * @summary Main page of the Tgstation.Server.Host.Core.Application.\n     * @request GET:/api\n     * @response `200` `ServerInformationResponse` Tgstation.Server.Api.Models.Response.ServerInformationResponse retrieved successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    apiRootControllerServerInfo: (params: RequestParams = {}) =>\n      this.http.request<ServerInformationResponse, ErrorMessageResponse>({\n        path: `/api`,\n        method: \"GET\",\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags ApiRoot\n     * @name ApiRootControllerCreateToken\n     * @summary Attempt to authenticate a Tgstation.Server.Host.Models.User using Tgstation.Server.Host.Controllers.ApiController.ApiHeaders.\n     * @request POST:/api\n     * @secure\n     * @response `200` `TokenResponse` User logged in and Tgstation.Server.Api.Models.Response.TokenResponse generated successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `void` User authentication failed.\n     * @response `403` `void` User authenticated but is disabled by an administrator.\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `429` `ErrorMessageResponse` OAuth authentication failed due to rate limiting.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    apiRootControllerCreateToken: (params: RequestParams = {}) =>\n      this.http.request<TokenResponse, ErrorMessageResponse | void>({\n        path: `/api`,\n        method: \"POST\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Chat\n     * @name ChatControllerCreate\n     * @summary Create a new chat bot model.\n     * @request PUT:/api/Chat\n     * @secure\n     * @response `201` `ChatBotResponse` Created Tgstation.Server.Host.Models.ChatBot successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    chatControllerCreate: (data: ChatControllerCreatePayload, params: RequestParams = {}) =>\n      this.http.request<ChatBotResponse, ErrorMessageResponse>({\n        path: `/api/Chat`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Chat\n     * @name ChatControllerUpdate\n     * @summary Updates a chat bot model.\n     * @request POST:/api/Chat\n     * @secure\n     * @response `200` `ChatBotResponse` Update applied successfully.\n     * @response `204` `void` Update applied successfully. Tgstation.Server.Host.Models.ChatBot not returned based on user permissions.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The Tgstation.Server.Host.Models.ChatBot with the given ID does not exist in this instance.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    chatControllerUpdate: (data: ChatControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<ChatBotResponse, ErrorMessageResponse>({\n        path: `/api/Chat`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Chat\n     * @name ChatControllerDelete\n     * @summary Delete a Tgstation.Server.Host.Models.ChatBot.\n     * @request DELETE:/api/Chat/{id}\n     * @secure\n     * @response `204` `void` Chat bot deleted or does not exist.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    chatControllerDelete: (id: number, params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/Chat/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Chat\n     * @name ChatControllerGetId\n     * @summary Get a specific Tgstation.Server.Host.Models.ChatBot.\n     * @request GET:/api/Chat/{id}\n     * @secure\n     * @response `200` `ChatBotResponse` Retrieved Tgstation.Server.Host.Models.ChatBot successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The Tgstation.Server.Host.Models.ChatBot with the given ID does not exist in this instance.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    chatControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<ChatBotResponse, ErrorMessageResponse>({\n        path: `/api/Chat/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Chat\n     * @name ChatControllerList\n     * @summary List Tgstation.Server.Host.Models.ChatBots.\n     * @request GET:/api/Chat/List\n     * @secure\n     * @response `200` `PaginatedChatBotResponse` Listed chat bots successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    chatControllerList: (query: ChatControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedChatBotResponse, ErrorMessageResponse>({\n        path: `/api/Chat/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Configuration\n     * @name ConfigurationControllerUpdate\n     * @summary Write to a configuration file.\n     * @request POST:/api/Config\n     * @secure\n     * @response `200` `ConfigurationFileResponse` File updated successfully.\n     * @response `202` `ConfigurationFileResponse` File upload ticket created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    configurationControllerUpdate: (data: ConfigurationControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<ConfigurationFileResponse, ErrorMessageResponse>({\n        path: `/api/Config`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Configuration\n     * @name ConfigurationControllerCreateDirectory\n     * @summary Create a configuration directory.\n     * @request PUT:/api/Config\n     * @secure\n     * @response `200` `ConfigurationFileResponse` Directory already exists.\n     * @response `201` `ConfigurationFileResponse` Directory created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` Conflict\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    configurationControllerCreateDirectory: (\n      data: ConfigurationControllerCreateDirectoryPayload,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<ConfigurationFileResponse, ErrorMessageResponse>({\n        path: `/api/Config`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Configuration\n     * @name ConfigurationControllerDeleteDirectory\n     * @summary Deletes an empty directory.\n     * @request DELETE:/api/Config\n     * @secure\n     * @response `204` `void` Empty directory deleted successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` Conflict\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    configurationControllerDeleteDirectory: (\n      data: ConfigurationControllerDeleteDirectoryPayload,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/Config`,\n        method: \"DELETE\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Configuration\n     * @name ConfigurationControllerFile\n     * @summary Get the contents of a file at a filePath.\n     * @request GET:/api/Config/File/{filePath}\n     * @secure\n     * @response `200` `ConfigurationFileResponse` File read successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` Conflict\n     * @response `410` `ErrorMessageResponse` File does not currently exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    configurationControllerFile: (filePath: string, params: RequestParams = {}) =>\n      this.http.request<ConfigurationFileResponse, ErrorMessageResponse>({\n        path: `/api/Config/File/${filePath}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Configuration\n     * @name ConfigurationControllerDirectory\n     * @summary Get the contents of a directory at a directoryPath.\n     * @request GET:/api/Config/List/{directoryPath}\n     * @secure\n     * @response `200` `PaginatedConfigurationFileResponse` Directory listed successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` Conflict\n     * @response `410` `ErrorMessageResponse` Directory does not currently exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    configurationControllerDirectory: (\n      { directoryPath, ...query }: ConfigurationControllerDirectoryParams,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<PaginatedConfigurationFileResponse, ErrorMessageResponse>({\n        path: `/api/Config/List/${directoryPath}`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Configuration\n     * @name ConfigurationControllerList\n     * @summary Get the contents of the root configuration directory.\n     * @request GET:/api/Config/List\n     * @secure\n     * @response `200` `PaginatedConfigurationFileResponse` OK\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    configurationControllerList: (query: ConfigurationControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedConfigurationFileResponse, ErrorMessageResponse>({\n        path: `/api/Config/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamDaemon\n     * @name DreamDaemonControllerCreate\n     * @summary Launches the watchdog.\n     * @request PUT:/api/DreamDaemon\n     * @secure\n     * @response `202` `JobResponse` Watchdog launch started successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamDaemonControllerCreate: (params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse>({\n        path: `/api/DreamDaemon`,\n        method: \"PUT\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamDaemon\n     * @name DreamDaemonControllerRead\n     * @summary Get the watchdog status.\n     * @request GET:/api/DreamDaemon\n     * @secure\n     * @response `200` `DreamDaemonResponse` Read Tgstation.Server.Api.Models.Response.DreamDaemonResponse information successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamDaemonControllerRead: (params: RequestParams = {}) =>\n      this.http.request<DreamDaemonResponse, ErrorMessageResponse>({\n        path: `/api/DreamDaemon`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamDaemon\n     * @name DreamDaemonControllerDelete\n     * @summary Stops the Watchdog if it's running.\n     * @request DELETE:/api/DreamDaemon\n     * @secure\n     * @response `204` `void` Watchdog terminated.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamDaemonControllerDelete: (params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/DreamDaemon`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamDaemon\n     * @name DreamDaemonControllerUpdate\n     * @summary Update watchdog settings to be applied at next server reboot.\n     * @request POST:/api/DreamDaemon\n     * @secure\n     * @response `200` `DreamDaemonResponse` Settings applied successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamDaemonControllerUpdate: (data: DreamDaemonControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<DreamDaemonResponse, ErrorMessageResponse>({\n        path: `/api/DreamDaemon`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamDaemon\n     * @name DreamDaemonControllerRestart\n     * @summary Creates a Tgstation.Server.Api.Models.Response.JobResponse to restart the Watchdog. It will not start if it wasn't already running.\n     * @request PATCH:/api/DreamDaemon\n     * @secure\n     * @response `202` `JobResponse` Restart Tgstation.Server.Api.Models.Response.JobResponse started successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamDaemonControllerRestart: (params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse>({\n        path: `/api/DreamDaemon`,\n        method: \"PATCH\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamDaemon\n     * @name DreamDaemonControllerCreateDump\n     * @summary Creates a Tgstation.Server.Api.Models.Response.JobResponse to generate a DreamDaemon process dump.\n     * @request PATCH:/api/DreamDaemon/Diagnostics\n     * @secure\n     * @response `202` `JobResponse` Dump Tgstation.Server.Api.Models.Response.JobResponse started successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamDaemonControllerCreateDump: (params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse>({\n        path: `/api/DreamDaemon/Diagnostics`,\n        method: \"PATCH\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamMaker\n     * @name DreamMakerControllerRead\n     * @summary Read current deployment settings.\n     * @request GET:/api/DreamMaker\n     * @secure\n     * @response `200` `DreamMakerResponse` Read deployment settings successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamMakerControllerRead: (params: RequestParams = {}) =>\n      this.http.request<DreamMakerResponse, ErrorMessageResponse>({\n        path: `/api/DreamMaker`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamMaker\n     * @name DreamMakerControllerCreate\n     * @summary Begin deploying repository code.\n     * @request PUT:/api/DreamMaker\n     * @secure\n     * @response `202` `JobResponse` Created deployment Tgstation.Server.Api.Models.Response.JobResponse successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamMakerControllerCreate: (params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse>({\n        path: `/api/DreamMaker`,\n        method: \"PUT\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamMaker\n     * @name DreamMakerControllerUpdate\n     * @summary Update deployment settings.\n     * @request POST:/api/DreamMaker\n     * @secure\n     * @response `200` `DreamMakerResponse` Changes applied successfully. The updated Tgstation.Server.Host.Models.DreamMakerSettings will be returned.\n     * @response `204` `void` Changes applied successfully. The updated Tgstation.Server.Host.Models.DreamMakerSettings will be not be returned due to permissions.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamMakerControllerUpdate: (data: DreamMakerControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<DreamMakerResponse, ErrorMessageResponse>({\n        path: `/api/DreamMaker`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamMaker\n     * @name DreamMakerControllerGetId\n     * @summary Get a Tgstation.Server.Host.Models.CompileJob specified by a given id.\n     * @request GET:/api/DreamMaker/{id}\n     * @secure\n     * @response `200` `CompileJobResponse` Tgstation.Server.Host.Models.CompileJob retrieved successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `404` `ErrorMessageResponse` Specified Tgstation.Server.Host.Models.CompileJob ID does not exist in this instance.\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamMakerControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<CompileJobResponse, ErrorMessageResponse>({\n        path: `/api/DreamMaker/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags DreamMaker\n     * @name DreamMakerControllerList\n     * @summary List all Tgstation.Server.Host.Models.CompileJobTgstation.Server.Api.Models.EntityIds for the instance.\n     * @request GET:/api/DreamMaker/List\n     * @secure\n     * @response `200` `PaginatedCompileJobResponse` Retrieved Tgstation.Server.Api.Models.EntityIds successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    dreamMakerControllerList: (query: DreamMakerControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedCompileJobResponse, ErrorMessageResponse>({\n        path: `/api/DreamMaker/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Engine\n     * @name EngineControllerRead\n     * @summary Gets the active Tgstation.Server.Api.Models.EngineVersion.\n     * @request GET:/api/Engine\n     * @secure\n     * @response `200` `EngineResponse` Retrieved version information successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` No engine versions installed.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    engineControllerRead: (params: RequestParams = {}) =>\n      this.http.request<EngineResponse, ErrorMessageResponse>({\n        path: `/api/Engine`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Engine\n     * @name EngineControllerUpdate\n     * @summary Changes the active engine version to the one specified in a given model.\n     * @request POST:/api/Engine\n     * @secure\n     * @response `200` `EngineInstallResponse` Switched active engine version successfully.\n     * @response `202` `EngineInstallResponse` Created Tgstation.Server.Host.Models.Job to install and switch active engine version successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    engineControllerUpdate: (data: EngineControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<EngineInstallResponse, ErrorMessageResponse>({\n        path: `/api/Engine`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Engine\n     * @name EngineControllerDelete\n     * @summary Attempts to delete the BYOND version specified in a given model from the instance.\n     * @request DELETE:/api/Engine\n     * @secure\n     * @response `202` `JobResponse` Created Tgstation.Server.Host.Models.Job to delete target version successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` Attempted to delete the active BYOND System.Version.\n     * @response `410` `ErrorMessageResponse` The Tgstation.Server.Api.Models.EngineVersion specified was not installed.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    engineControllerDelete: (data: EngineControllerDeletePayload, params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse>({\n        path: `/api/Engine`,\n        method: \"DELETE\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Engine\n     * @name EngineControllerList\n     * @summary Lists installed Tgstation.Server.Api.Models.EngineVersions.\n     * @request GET:/api/Engine/List\n     * @secure\n     * @response `200` `PaginatedEngineResponse` Retrieved version information successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    engineControllerList: (query: EngineControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedEngineResponse, ErrorMessageResponse>({\n        path: `/api/Engine/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Instance\n     * @name InstanceControllerCreate\n     * @summary Create or attach an Tgstation.Server.Api.Models.Instance.\n     * @request PUT:/api/Instance\n     * @secure\n     * @response `200` `InstanceResponse` Instance attached successfully.\n     * @response `201` `InstanceResponse` Instance created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instanceControllerCreate: (data: InstanceControllerCreatePayload, params: RequestParams = {}) =>\n      this.http.request<InstanceResponse, ErrorMessageResponse>({\n        path: `/api/Instance`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Instance\n     * @name InstanceControllerUpdate\n     * @summary Modify an Tgstation.Server.Api.Models.Instance's settings.\n     * @request POST:/api/Instance\n     * @secure\n     * @response `200` `InstanceResponse` Instance updated successfully.\n     * @response `202` `InstanceResponse` Instance updated successfully and relocation job created.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instanceControllerUpdate: (data: InstanceControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<InstanceResponse, ErrorMessageResponse>({\n        path: `/api/Instance`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Instance\n     * @name InstanceControllerDelete\n     * @summary Detach an Tgstation.Server.Api.Models.Instance with the given id.\n     * @request DELETE:/api/Instance/{id}\n     * @secure\n     * @response `204` `void` Instance detatched successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instanceControllerDelete: (id: number, params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/Instance/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Instance\n     * @name InstanceControllerGetId\n     * @summary Get a specific Tgstation.Server.Api.Models.Instance.\n     * @request GET:/api/Instance/{id}\n     * @secure\n     * @response `200` `InstanceResponse` Retrieved Tgstation.Server.Api.Models.Instance successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instanceControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<InstanceResponse, ErrorMessageResponse>({\n        path: `/api/Instance/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Instance\n     * @name InstanceControllerGrantPermissions\n     * @summary Gives the current user full permissions on a given instance id.\n     * @request PATCH:/api/Instance/{id}\n     * @secure\n     * @response `204` `void` Granted permissions successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` Gone\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instanceControllerGrantPermissions: (id: number, params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/Instance/${id}`,\n        method: \"PATCH\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Instance\n     * @name InstanceControllerList\n     * @summary List Tgstation.Server.Api.Models.Instances.\n     * @request GET:/api/Instance/List\n     * @secure\n     * @response `200` `PaginatedInstanceResponse` Retrieved Tgstation.Server.Api.Models.Instances successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instanceControllerList: (query: InstanceControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedInstanceResponse, ErrorMessageResponse>({\n        path: `/api/Instance/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags InstancePermissionSet\n     * @name InstancePermissionSetControllerCreate\n     * @summary Create an Tgstation.Server.Host.Models.InstancePermissionSet.\n     * @request PUT:/api/InstancePermissionSet\n     * @secure\n     * @response `201` `InstancePermissionSetResponse` Tgstation.Server.Host.Models.InstancePermissionSet created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The Tgstation.Server.Api.Models.PermissionSet does not exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instancePermissionSetControllerCreate: (\n      data: InstancePermissionSetControllerCreatePayload,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<InstancePermissionSetResponse, ErrorMessageResponse>({\n        path: `/api/InstancePermissionSet`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags InstancePermissionSet\n     * @name InstancePermissionSetControllerUpdate\n     * @summary Update the permissions for an Tgstation.Server.Host.Models.InstancePermissionSet.\n     * @request POST:/api/InstancePermissionSet\n     * @secure\n     * @response `200` `InstancePermissionSetResponse` Tgstation.Server.Host.Models.InstancePermissionSet updated successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The requested Tgstation.Server.Host.Models.InstancePermissionSet does not currently exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instancePermissionSetControllerUpdate: (\n      data: InstancePermissionSetControllerUpdatePayload,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<InstancePermissionSetResponse, ErrorMessageResponse>({\n        path: `/api/InstancePermissionSet`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags InstancePermissionSet\n     * @name InstancePermissionSetControllerRead\n     * @summary Read the active Tgstation.Server.Host.Models.InstancePermissionSet.\n     * @request GET:/api/InstancePermissionSet\n     * @secure\n     * @response `200` `InstancePermissionSetResponse` Tgstation.Server.Host.Models.InstancePermissionSet retrieved successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instancePermissionSetControllerRead: (params: RequestParams = {}) =>\n      this.http.request<InstancePermissionSetResponse, ErrorMessageResponse>({\n        path: `/api/InstancePermissionSet`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags InstancePermissionSet\n     * @name InstancePermissionSetControllerList\n     * @summary Lists Tgstation.Server.Host.Models.InstancePermissionSets for the instance.\n     * @request GET:/api/InstancePermissionSet/List\n     * @secure\n     * @response `200` `PaginatedInstancePermissionSetResponse` Retrieved Tgstation.Server.Host.Models.InstancePermissionSets successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instancePermissionSetControllerList: (\n      query: InstancePermissionSetControllerListParams,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<PaginatedInstancePermissionSetResponse, ErrorMessageResponse>({\n        path: `/api/InstancePermissionSet/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags InstancePermissionSet\n     * @name InstancePermissionSetControllerGetId\n     * @summary Gets a specific Tgstation.Server.Api.Models.Internal.InstancePermissionSet.\n     * @request GET:/api/InstancePermissionSet/{id}\n     * @secure\n     * @response `200` `InstancePermissionSetResponse` Retrieve Tgstation.Server.Api.Models.Internal.InstancePermissionSet successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The requested Tgstation.Server.Api.Models.Internal.InstancePermissionSet does not currently exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instancePermissionSetControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<InstancePermissionSetResponse, ErrorMessageResponse>({\n        path: `/api/InstancePermissionSet/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags InstancePermissionSet\n     * @name InstancePermissionSetControllerDelete\n     * @summary Delete an Tgstation.Server.Host.Models.InstancePermissionSet.\n     * @request DELETE:/api/InstancePermissionSet/{id}\n     * @secure\n     * @response `204` `void` Target Tgstation.Server.Host.Models.InstancePermissionSet deleted.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` Target Tgstation.Server.Host.Models.InstancePermissionSet or no longer exists.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    instancePermissionSetControllerDelete: (id: number, params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/InstancePermissionSet/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Job\n     * @name JobControllerRead\n     * @summary Get active Tgstation.Server.Api.Models.Response.JobResponses for the instance.\n     * @request GET:/api/Job\n     * @secure\n     * @response `200` `PaginatedJobResponse` Retrieved active Tgstation.Server.Host.Models.Jobs successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    jobControllerRead: (query: JobControllerReadParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedJobResponse, ErrorMessageResponse>({\n        path: `/api/Job`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Job\n     * @name JobControllerList\n     * @summary List all Tgstation.Server.Api.Models.Response.JobResponse for the instance in reverse creation order.\n     * @request GET:/api/Job/List\n     * @secure\n     * @response `200` `PaginatedJobResponse` Retrieved Tgstation.Server.Host.Models.JobTgstation.Server.Api.Models.EntityIds successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    jobControllerList: (query: JobControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedJobResponse, ErrorMessageResponse>({\n        path: `/api/Job/List`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Job\n     * @name JobControllerDelete\n     * @summary Cancel a running Tgstation.Server.Api.Models.Response.JobResponse.\n     * @request DELETE:/api/Job/{id}\n     * @secure\n     * @response `202` `JobResponse` Tgstation.Server.Host.Models.Job cancellation requested successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `404` `ErrorMessageResponse` Tgstation.Server.Host.Models.Job does not exist in this instance.\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `void` Tgstation.Server.Host.Models.Job could not be found in the job manager. Has it already completed?.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    jobControllerDelete: (id: number, params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse | void>({\n        path: `/api/Job/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Job\n     * @name JobControllerGetId\n     * @summary Get a specific Tgstation.Server.Api.Models.Response.JobResponse.\n     * @request GET:/api/Job/{id}\n     * @secure\n     * @response `200` `JobResponse` Retrieved Tgstation.Server.Host.Models.Job successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `404` `ErrorMessageResponse` Tgstation.Server.Host.Models.Job does not exist in this instance.\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    jobControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<JobResponse, ErrorMessageResponse>({\n        path: `/api/Job/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Repository\n     * @name RepositoryControllerCreate\n     * @summary Begin cloning the repository if it doesn't exist.\n     * @request PUT:/api/Repository\n     * @secure\n     * @response `201` `RepositoryResponse` The repository was created successfully and the Tgstation.Server.Api.Models.Response.JobResponse to clone it has begun.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    repositoryControllerCreate: (data: RepositoryControllerCreatePayload, params: RequestParams = {}) =>\n      this.http.request<RepositoryResponse, ErrorMessageResponse>({\n        path: `/api/Repository`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Repository\n     * @name RepositoryControllerDelete\n     * @summary Delete the repository.\n     * @request DELETE:/api/Repository\n     * @secure\n     * @response `202` `RepositoryResponse` Job to delete the repository created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    repositoryControllerDelete: (params: RequestParams = {}) =>\n      this.http.request<RepositoryResponse, ErrorMessageResponse>({\n        path: `/api/Repository`,\n        method: \"DELETE\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Repository\n     * @name RepositoryControllerReclone\n     * @summary Delete the repository.\n     * @request PATCH:/api/Repository\n     * @secure\n     * @response `202` `RepositoryResponse` Job to delete the repository created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    repositoryControllerReclone: (params: RequestParams = {}) =>\n      this.http.request<RepositoryResponse, ErrorMessageResponse>({\n        path: `/api/Repository`,\n        method: \"PATCH\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Repository\n     * @name RepositoryControllerRead\n     * @summary Get the repository's status.\n     * @request GET:/api/Repository\n     * @secure\n     * @response `200` `RepositoryResponse` Retrieved the repository settings successfully.\n     * @response `201` `RepositoryResponse` Retrieved the repository settings successfully, though they did not previously exist.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `RepositoryResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    repositoryControllerRead: (params: RequestParams = {}) =>\n      this.http.request<RepositoryResponse, ErrorMessageResponse | RepositoryResponse>({\n        path: `/api/Repository`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Repository\n     * @name RepositoryControllerUpdate\n     * @summary Perform updates to the repository.\n     * @request POST:/api/Repository\n     * @secure\n     * @response `200` `RepositoryResponse` Updated the repository settings successfully.\n     * @response `202` `RepositoryResponse` Updated the repository settings successfully and a Tgstation.Server.Api.Models.Response.JobResponse was created to make the requested git changes.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The database entity for the requested instance could not be retrieved. The instance was likely detached.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    repositoryControllerUpdate: (data: RepositoryControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<RepositoryResponse, ErrorMessageResponse>({\n        path: `/api/Repository`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Transfer\n     * @name TransferControllerDownload\n     * @summary Downloads a file with a given ticket.\n     * @request GET:/api/Transfer\n     * @secure\n     * @response `200` `File` Started streaming download successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The ticket was no longer or was never valid.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    transferControllerDownload: (query: TransferControllerDownloadParams, params: RequestParams = {}) =>\n      this.http.request<File, ErrorMessageResponse>({\n        path: `/api/Transfer`,\n        method: \"GET\",\n        query: query,\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags Transfer\n     * @name TransferControllerUpload\n     * @summary Uploads a file with a given ticket.\n     * @request PUT:/api/Transfer\n     * @secure\n     * @response `204` `void` Uploaded file successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `void` An error occurred during the upload.\n     * @response `410` `ErrorMessageResponse` The ticket was no longer or was never valid.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    transferControllerUpload: (\n      query: TransferControllerUploadParams,\n      data: TransferControllerUploadPayload,\n      params: RequestParams = {},\n    ) =>\n      this.http.request<void, ErrorMessageResponse | void>({\n        path: `/api/Transfer`,\n        method: \"PUT\",\n        query: query,\n        body: data,\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags User\n     * @name UserControllerCreate\n     * @summary Create a new Tgstation.Server.Host.Models.User.\n     * @request PUT:/api/User\n     * @response `201` `UserResponse` Tgstation.Server.Host.Models.User created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `void` The requested system identifier could not be found.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userControllerCreate: (data: UserControllerCreatePayload, params: RequestParams = {}) =>\n      this.http.request<UserResponse, ErrorMessageResponse | void>({\n        path: `/api/User`,\n        method: \"PUT\",\n        body: data,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags User\n     * @name UserControllerUpdate\n     * @summary Update a Tgstation.Server.Host.Models.User.\n     * @request POST:/api/User\n     * @response `200` `UserResponse` Tgstation.Server.Host.Models.User updated successfully. Not returned due to lack of permissions.\n     * @response `204` `void` No Content\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `404` `ErrorMessageResponse` Requested Tgstation.Server.Api.Models.EntityId.Id does not exist.\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` Requested Tgstation.Server.Api.Models.Internal.UserApiBase.Group does not exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userControllerUpdate: (data: UserControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<UserResponse, ErrorMessageResponse>({\n        path: `/api/User`,\n        method: \"POST\",\n        body: data,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags User\n     * @name UserControllerRead\n     * @summary Get information about the current Tgstation.Server.Host.Models.User.\n     * @request GET:/api/User\n     * @response `200` `UserResponse` The Tgstation.Server.Host.Models.User was retrieved successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userControllerRead: (params: RequestParams = {}) =>\n      this.http.request<UserResponse, ErrorMessageResponse>({\n        path: `/api/User`,\n        method: \"GET\",\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags User\n     * @name UserControllerList\n     * @summary List all Tgstation.Server.Host.Models.Users in the server.\n     * @request GET:/api/User/List\n     * @response `200` `PaginatedUserResponse` Retrieved Tgstation.Server.Host.Models.Users successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userControllerList: (query: UserControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedUserResponse, ErrorMessageResponse>({\n        path: `/api/User/List`,\n        method: \"GET\",\n        query: query,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags User\n     * @name UserControllerGetId\n     * @summary Get a specific Tgstation.Server.Host.Models.User.\n     * @request GET:/api/User/{id}\n     * @secure\n     * @response `200` `UserResponse` The Tgstation.Server.Host.Models.User was retrieved successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `404` `ErrorMessageResponse` The Tgstation.Server.Host.Models.User does not exist.\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<UserResponse, ErrorMessageResponse>({\n        path: `/api/User/${id}`,\n        method: \"GET\",\n        secure: true,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags UserGroup\n     * @name UserGroupControllerCreate\n     * @summary Create a new Tgstation.Server.Host.Models.UserGroup.\n     * @request PUT:/api/UserGroup\n     * @secure\n     * @response `201` `UserGroupResponse` Tgstation.Server.Host.Models.UserGroup created successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userGroupControllerCreate: (data: UserGroupControllerCreatePayload, params: RequestParams = {}) =>\n      this.http.request<UserGroupResponse, ErrorMessageResponse>({\n        path: `/api/UserGroup`,\n        method: \"PUT\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags UserGroup\n     * @name UserGroupControllerUpdate\n     * @summary Update a Tgstation.Server.Host.Models.UserGroup.\n     * @request POST:/api/UserGroup\n     * @secure\n     * @response `200` `UserGroupResponse` Tgstation.Server.Host.Models.UserGroup updated successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `void` The requested Tgstation.Server.Host.Models.UserGroup does not currently exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userGroupControllerUpdate: (data: UserGroupControllerUpdatePayload, params: RequestParams = {}) =>\n      this.http.request<UserGroupResponse, ErrorMessageResponse | void>({\n        path: `/api/UserGroup`,\n        method: \"POST\",\n        body: data,\n        secure: true,\n        type: ContentType.Json,\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags UserGroup\n     * @name UserGroupControllerGetId\n     * @summary Gets a specific Tgstation.Server.Host.Models.UserGroup.\n     * @request GET:/api/UserGroup/{id}\n     * @response `200` `UserGroupResponse` Retrieve Tgstation.Server.Host.Models.UserGroup successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `410` `ErrorMessageResponse` The requested Tgstation.Server.Host.Models.UserGroup does not currently exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userGroupControllerGetId: (id: number, params: RequestParams = {}) =>\n      this.http.request<UserGroupResponse, ErrorMessageResponse>({\n        path: `/api/UserGroup/${id}`,\n        method: \"GET\",\n        format: \"json\",\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags UserGroup\n     * @name UserGroupControllerDelete\n     * @summary Delete a Tgstation.Server.Host.Models.UserGroup.\n     * @request DELETE:/api/UserGroup/{id}\n     * @secure\n     * @response `204` `void` Tgstation.Server.Host.Models.UserGroup was deleted.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse` The Tgstation.Server.Host.Models.UserGroup is not empty.\n     * @response `410` `ErrorMessageResponse` The Tgstation.Server.Host.Models.UserGroup didn't exist.\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userGroupControllerDelete: (id: number, params: RequestParams = {}) =>\n      this.http.request<void, ErrorMessageResponse>({\n        path: `/api/UserGroup/${id}`,\n        method: \"DELETE\",\n        secure: true,\n        ...params,\n      }),\n\n    /**\n     * No description\n     *\n     * @tags UserGroup\n     * @name UserGroupControllerList\n     * @summary Lists all Tgstation.Server.Host.Models.UserGroups.\n     * @request GET:/api/UserGroup/List\n     * @response `200` `PaginatedUserGroupResponse` Retrieved Tgstation.Server.Host.Models.UserGroups successfully.\n     * @response `400` `ErrorMessageResponse`\n     * @response `401` `any`\n     * @response `403` `any`\n     * @response `406` `ErrorMessageResponse`\n     * @response `409` `ErrorMessageResponse`\n     * @response `500` `ErrorMessageResponse`\n     * @response `501` `ErrorMessageResponse`\n     * @response `503` `any`\n     */\n    userGroupControllerList: (query: UserGroupControllerListParams, params: RequestParams = {}) =>\n      this.http.request<PaginatedUserGroupResponse, ErrorMessageResponse>({\n        path: `/api/UserGroup/List`,\n        method: \"GET\",\n        query: query,\n        format: \"json\",\n        ...params,\n      }),\n  };\n}\n","import { OAuthProvider } from \"../generatedcode/generated\";\n\nexport enum CredentialsType {\n    Password,\n    OAuth\n}\n\nexport interface IPasswordCredentials {\n    type: CredentialsType.Password;\n    userName: string;\n    password: string;\n}\n\nexport interface IOAuthCredentials {\n    type: CredentialsType.OAuth;\n    provider: OAuthProvider;\n    token: string;\n}\n\nexport type ICredentials = IPasswordCredentials | IOAuthCredentials;\n","import { AxiosResponse } from \"axios\";\n\nimport { replaceAll } from \"../../../utils/misc\";\nimport { ErrorCode as TGSErrorCode, ErrorMessageResponse } from \"../../generatedcode/generated\";\nimport configOptions from \"../../util/config\";\nimport CredentialsProvider from \"../../util/CredentialsProvider\";\n\nexport type GenericErrors =\n    | ErrorCode.HTTP_BAD_REQUEST\n    | ErrorCode.HTTP_DATA_INEGRITY\n    | ErrorCode.HTTP_API_MISMATCH\n    | ErrorCode.HTTP_SERVER_ERROR\n    | ErrorCode.HTTP_UNIMPLEMENTED\n    //    | ErrorCode.HTTP_SERVER_NOT_READY\n    | ErrorCode.AXIOS\n    | ErrorCode.UNHANDLED_RESPONSE\n    | ErrorCode.UNHANDLED_GLOBAL_RESPONSE\n    | ErrorCode.HTTP_ACCESS_DENIED\n    | ErrorCode.HTTP_NOT_ACCEPTABLE\n    | ErrorCode.OK\n    | ErrorCode.NO_APIPATH\n    | ErrorCode.APP_FAIL;\n\nexport enum ErrorCode {\n    OK = 'Isnt displayed but is used as an \"error\" when everything is ok', //void\n    HTTP_BAD_REQUEST = \"error.http.bad_request\", //errmessage\n    HTTP_DATA_INEGRITY = \"error.http.data_integrity\", //errmessage\n    HTTP_API_MISMATCH = \"error.http.api_mismatch\", //void\n    HTTP_SERVER_ERROR = \"error.http.server_error\", //errmessage\n    HTTP_UNIMPLEMENTED = \"error.http.unimplemented\", //errmessage\n    //auto retry    HTTP_SERVER_NOT_READY = 'error.http.server_not_ready', //void\n    HTTP_ACCESS_DENIED = \"error.http.access_denied\", //void\n    HTTP_NOT_ACCEPTABLE = \"error.http.not_acceptable\", //void\n    UNHANDLED_RESPONSE = \"error.unhandled_response\", //axiosresponse\n    UNHANDLED_GLOBAL_RESPONSE = \"error.unhandled_global_response\", //axiosresponse\n    AXIOS = \"error.axios\", //jserror\n\n    //Generic errors\n    GITHUB_FAIL = \"error.github\", //jserror\n    APP_FAIL = \"error.app\", //jserror\n    NO_APIPATH = \"error.no_apipath\", //void\n\n    //Login errors\n    LOGIN_FAIL = \"error.login.bad_user_pass\", //void\n    LOGIN_NOCREDS = \"error.login.no_creds\", //void\n    LOGIN_DISABLED = \"error.login.user_disabled\", //void\n    LOGIN_BAD_OAUTH = \"error.login.bad_oauth\", //jserror\n    LOGIN_RATELIMIT = \"error.login.rate_limit\", //errmessage\n\n    //User errors\n    USER_NO_SYS_IDENT = \"error.user.no_sys_ident\", //errmessage\n    USER_NOT_FOUND = \"error.user.not_found\", //errmessage\n\n    //Administration errors\n    ADMIN_GITHUB_RATE = \"error.admin.rate\", //errmessage\n    ADMIN_GITHUB_ERROR = \"error.admin.error\", //errmessage\n    ADMIN_WATCHDOG_UNAVAIL = \"error.admin.watchdog.avail\", //errmessage\n    ADMIN_VERSION_NOT_FOUND = \"error.admin.update.notfound\", //errmessage\n    ADMIN_LOGS_IO_ERROR = \"error.admin.logs.io\", //errmessage\n\n    //Job errors\n    JOB_JOB_NOT_FOUND = \"error.job.not_found\", //errmessage\n    JOB_JOB_COMPLETE = \"error.job.complete\", //void\n\n    //Transfer errors\n    TRANSFER_NOT_AVAILABLE = \"error.transfer.not_available\", //errmessage\n    UPLOAD_FAILED = \"error.transfer.upload_failed\", //void\n\n    GROUP_NOT_FOUND = \"error.group.not_found\", //errmessage\n    GROUP_NOT_EMPTY = \"error.group.not_empty\", //errmessage\n\n    //Watchdog errors\n    NO_DB_ENTITY = \"error.no_db_entity\", //errmessage\n\n    //Engine errors\n    ENGINE_VERSION_NOT_FOUND = \"error.no_engine_version\",\n\n    //DreamMaker errors\n    COMPILE_JOB_NOT_FOUND = \"error.compile_job_not_found\", //errmessage\n\n    //Config File errors\n    CONFIG_FILE_NOT_FOUND = \"error.config_file_not_found\",\n    CONFIG_FILE_IO_ERROR = \"error.config_file_io\",\n    CONFIG_FILE_DIRECTORY_NOT_FOUND = \"error.config_file_directory_not_found\",\n\n    BAD_YML = \"error.bad_yml\",\n    BAD_TGS_YML_VERSION = \"error.bad_tgs_yml_version\",\n\n    BAD_CHANNELS_JSON = \"error.bad_channels_json\",\n\n    BAD_HUB_CONNECTION = \"error.bad_hub_connection\"\n}\n\ntype errorMessage = {\n    errorMessage: ErrorMessageResponse;\n};\ntype axiosResponse = {\n    axiosResponse: AxiosResponse;\n};\ntype jsError = {\n    jsError: Error;\n};\ntype voidError = {\n    void: true;\n};\n\nexport enum DescType {\n    LOCALE,\n    TEXT\n}\n\ninterface Desc {\n    type: DescType;\n    desc: string;\n}\n\nexport type allAddons = errorMessage | axiosResponse | jsError | voidError;\n\nexport default class InternalError<T extends ErrorCode = ErrorCode> {\n    public readonly code: T;\n    public readonly desc?: Desc;\n    public readonly extendedInfo: string;\n    public readonly originalErrorMessage?: ErrorMessageResponse;\n\n    public constructor(code: T, addon: allAddons, origin?: AxiosResponse, noError?: boolean) {\n        this.code = code;\n        if (\"errorMessage\" in addon) {\n            const err = addon.errorMessage;\n            this.originalErrorMessage = err;\n            this.desc = {\n                type: DescType.TEXT,\n                desc: `${TGSErrorCode[err.errorCode]}: ${err.message}${\n                    err.additionalData ? \": \" + err.additionalData : \"\"\n                }`\n            };\n            if (!err.message) {\n                this.desc = {\n                    type: DescType.TEXT,\n                    desc: TGSErrorCode[err.errorCode]\n                };\n            }\n        }\n        if (\"jsError\" in addon) {\n            const err = addon.jsError;\n            this.desc = {\n                type: DescType.TEXT,\n                desc: `${err.name}: ${err.message}`\n            };\n        }\n        const stack = new Error().stack;\n\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (origin?.config.headers[\"Authorization\"]) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            origin.config.headers[\"Authorization\"] = \"*********\";\n        }\n\n        let debuginfo = JSON.stringify({ addon, origin, config: configOptions, stack });\n        debuginfo = debuginfo.replace(\n            /Basic (?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?/g,\n            \"Basic **************\"\n        );\n        debuginfo = debuginfo.replace(\n            /{\"username\":\".+?\",\"password\":\".+?\"}/g,\n            '{\"username\":\"*******\",\"password\":\"*******\"}'\n        );\n        if (CredentialsProvider.hasToken()) {\n            debuginfo = replaceAll(debuginfo, CredentialsProvider.token!.bearer, \"**************\");\n        }\n        if (configOptions.githubtoken.value) {\n            debuginfo = replaceAll(\n                debuginfo,\n                configOptions.githubtoken.value as string,\n                \"**************\"\n            );\n        }\n        this.extendedInfo = debuginfo;\n\n        if (!noError) {\n            console.error(\n                `Error occured within the application: ${this.code} (${\n                    this.desc?.desc ?? \"No description\"\n                })`,\n                this\n            );\n        }\n\n        //@ts-expect-error yeah well, i aint extending the window interface\n        if (window.breakonerror) {\n            // eslint-disable-next-line no-debugger\n            debugger;\n        }\n    }\n}\n","import InternalError, { ErrorCode } from \"./InternalError\";\n\nexport enum StatusCode {\n    OK,\n    ERROR\n}\n\nexport interface InternalStatusErr<Codes extends ErrorCode> {\n    code: StatusCode.ERROR;\n    error: InternalError<Codes>;\n}\n\nexport interface InternalStatusOK<T> {\n    code: StatusCode.OK;\n    payload: T;\n}\n\ntype InternalStatus<T, Codes extends ErrorCode> = InternalStatusOK<T> | InternalStatusErr<Codes>;\n\nconst InternalStatus = function InternalStatus<T, Codes extends ErrorCode>(\n    this: InternalStatus<T, Codes>,\n    args: InternalStatus<T, Codes>\n): Readonly<InternalStatus<T, Codes>> {\n    return Object.freeze(Object.assign({}, args));\n} as unknown as {\n    new <T, Codes extends ErrorCode>(\n        args: InternalStatus<T, Codes>\n    ): Readonly<InternalStatus<T, Codes>>;\n};\n\nexport default InternalStatus;\n","import { MODE } from \"../../definitions/constants\";\nimport type { TokenResponse } from \"../generatedcode/generated\";\nimport { CredentialsType, ICredentials, IPasswordCredentials } from \"../models/ICredentials\";\n\n//Data structure meant to help against circular dependencies within the ApiClient\n//Its rather dumb and only holds username, password and the token.\n//Also contains a function to determine if theres a token here\nexport default new (class CredentialsProvider {\n    //token\n    public token?: TokenResponse;\n    public defaulted?: boolean;\n\n    //credentials\n    public credentials?: ICredentials;\n    public default: IPasswordCredentials = {\n        type: CredentialsType.Password,\n        userName: \"admin\",\n        password: \"ISolemlySwearToDeleteTheDataDirectory\"\n    };\n\n    public hasToken() {\n        return (\n            this.token && this.token.bearer /* &&\n            (!this.token.expiresAt || new Date(this.token.expiresAt) > new Date(Date.now()))*/\n        );\n    }\n\n    public constructor() {\n        if (MODE === \"DEV\") {\n            window.credentialProvider = this;\n        }\n    }\n})();\n","import { TypedEmitter } from \"tiny-typed-emitter\";\n\nimport type { TokenResponse } from \"../generatedcode/generated\";\n\ninterface IEvents {\n    //tasks once the user is fully logged in\n    loginSuccess: (token: TokenResponse) => void;\n}\n\nclass LoginHooks extends TypedEmitter<IEvents> {\n    private promiseHooks: Set<(token: TokenResponse) => Promise<unknown>> = new Set();\n\n    public runHooks(token: TokenResponse) {\n        console.log(\"Running login hooks\");\n        let i = 0;\n        const work: Array<Promise<void>> = [];\n        for (const hook of this.promiseHooks) {\n            const id = i;\n            console.log(`Running hook ${hook.name}(${id})`);\n            work.push(\n                new Promise<void>((resolve, reject) => {\n                    hook(token)\n                        .then(() => {\n                            console.log(`Done hook ${hook.name}(${id})`);\n                            resolve();\n                        })\n                        .catch(err => {\n                            console.error(`Error running hook ${hook.name}(${id}): `, err);\n                            reject(err);\n                        });\n                })\n            );\n            i++;\n        }\n        Promise.all(work)\n            .then(() => {\n                console.log(\"Running post login event\");\n                this.emit(\"loginSuccess\", token);\n            })\n            .catch(() => console.error(\"An error occured while running login hooks\"));\n    }\n\n    public addHook(hook: (token: TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.add(hook);\n    }\n\n    public removeHook(hook: (token: TokenResponse) => Promise<unknown>): void {\n        this.promiseHooks.delete(hook);\n    }\n}\n\nexport default new LoginHooks();\n","import { DEFAULT_APIPATH, MODE } from \"../../definitions/constants\";\n\nexport type ConfigValue = number | string | boolean;\n\nexport type ConfigOption = BaseConfigOption &\n    (NumConfigOption | StrConfigOption | PwdConfigOption | BoolConfigOption | EnumConfigOption);\n\nexport interface BaseConfigOption {\n    id: string;\n    site_local?: boolean;\n}\n\nexport interface NumConfigOption extends BaseConfigOption {\n    type: \"num\";\n    value: number;\n    min?: number;\n    max?: number;\n    callback?: (oldValue: number, newValue: number) => void;\n}\nexport interface StrConfigOption extends BaseConfigOption {\n    type: \"str\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface PwdConfigOption extends BaseConfigOption {\n    type: \"pwd\";\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\nexport interface BoolConfigOption extends BaseConfigOption {\n    type: \"bool\";\n    value: boolean;\n    callback?: (oldValue: boolean, newValue: boolean) => void;\n}\nexport interface EnumConfigOption extends BaseConfigOption {\n    type: \"enum\";\n    possibleValues: Record<string, string>;\n    value: string;\n    callback?: (oldValue: string, newValue: string) => void;\n}\n\nexport type ConfigMap = {\n    [key: string]: ConfigOption;\n};\n\nexport enum jobsWidgetOptions {\n    ALWAYS = \"always\",\n    AUTO = \"auto\",\n    NEVER = \"never\"\n}\n\nexport enum InstanceEditSidebar {\n    AUTO = \"auto\",\n    COLLAPSE = \"collapse\",\n    EXPAND = \"expand\"\n}\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesConfig = <Type>(elements: {\n    [Property in keyof Type]: ConfigOption;\n}) => elements;\n\nconst configOptions = asElementTypesConfig({\n    githubtoken: {\n        id: \"config.githubtoken\",\n        type: \"pwd\",\n        value: \"\"\n    },\n    apipath: {\n        id: \"config.apipath\",\n        type: \"str\",\n        site_local: true,\n        value:\n            MODE === \"DEV\"\n                ? DEFAULT_APIPATH\n                : window.publicPath\n                  ? new URL(\"..\", new URL(window.publicPath, window.location.href)).href\n                  : DEFAULT_APIPATH\n    },\n    jobpollinactive: {\n        id: \"config.jobpollinactive\",\n        type: \"num\",\n        value: 15\n    },\n    jobpollactive: {\n        id: \"config.jobpollactive\",\n        type: \"num\",\n        value: 5\n    },\n    jobswidgetdisplay: {\n        id: \"config.jobswidgetdisplay\",\n        type: \"enum\",\n        possibleValues: jobsWidgetOptions,\n        value: jobsWidgetOptions.AUTO\n    },\n    instanceprobetimer: {\n        id: \"config.instanceprobetimer\",\n        type: \"num\",\n        value: 60\n    },\n    itemsperpage: {\n        id: \"config.itemsperpage\",\n        type: \"num\",\n        value: 25,\n        min: 1,\n        max: 100\n    },\n    instanceeditsidebar: {\n        id: \"config.instanceeditsidebar\",\n        type: \"enum\",\n        possibleValues: InstanceEditSidebar,\n        value: InstanceEditSidebar.AUTO\n    },\n    showjson: {\n        id: \"config.showjson\",\n        type: \"bool\",\n        value: MODE === \"DEV\"\n    },\n    manualpr: {\n        id: \"config.manualpr\",\n        type: \"bool\",\n        value: true\n    },\n    restjobs2: {\n        id: \"config.restjobs2\",\n        type: \"bool\",\n        value: false\n    }\n});\n\nexport default configOptions;\n"],"names":["_ServerClient","ServerClient","ApiClient","constructor","super","apiHttpClient","apiClient","apiRequestInterceptor","onFulfilled","async","configOptions","apipath","value","errorobj","InternalError","ErrorCode","NO_APIPATH","void","Promise","reject","overrideTokenDetection","url","tok","this","wait4Token","headers","bearer","onRejected","error","apiResponseInterceptor","val","axiosServer","snowflake","code","response","status","globalHandledCodes","includes","err","AXIOS","jsError","res","errorMessage","data","HTTP_BAD_REQUEST","request","config","resolve","autoLogin","login","then","StatusCode","OK","ERROR","emit","logout","HTTP_ACCESS_DENIED","method","HTTP_NOT_ACCEPTABLE","HTTP_DATA_INEGRITY","HTTP_API_MISMATCH","HTTP_SERVER_ERROR","HTTP_UNIMPLEMENTED","console","log","setTimeout","UNHANDLED_GLOBAL_RESPONSE","axiosResponse","initialized","loadingServerInfo","_serverInfo","loggingIn","getServerInfo","bind","LoginHooks","addHook","on","undefined","CredentialsProvider","token","runHooks","callback","window","location","reload","serverInfo","defaultHeaders","Accept","Api","API_VERSION","VERSION","initApi","time","HttpClient","baseURL","withCredentials","AxiosHeaders","validateStatus","instance","interceptors","use","timeEnd","result","localStorage","getItem","expiresAtUnixTimestampStr","defaultToken","parseInt","Date","now","storedToken","setToken","wait4Init","hasToken","newCreds","defaulted","oauthAutoLogin","credentials","type","CredentialsType","OAuth","InternalStatus","LOGIN_NOCREDS","resolver","info","removeListener","Password","userName","toLowerCase","password","api","apiRootControllerCreateToken","auth","username","OAuthProvider","provider","Authorization","stat","payload","LOGIN_FAIL","LOGIN_DISABLED","LOGIN_RATELIMIT","UNHANDLED_RESPONSE","removeItem","_token","bypassCache","apiRootControllerServerInfo","cache","validate","previousToken","previousDefaulted","failed","setItem","jwt","jwtDecode","exp","toString","cachedUser","_cachedUser","loadingUserInfo","createAllUsersWithAA","getCurrentUser","editUser","newUser","userControllerUpdate","current","id","USER_NOT_FOUND","user","userControllerRead","thing","listUsers","page","pageSize","itemsperpage","userControllerList","content","sort","a","b","getUser","userControllerGetId","createUser","newuser","enabled","instanceManagerRights","administrationRights","perm","Object","values","InstanceManagerRights","AdministrationRights","userControllerCreate","USER_NO_SYS_IDENT","TypedEmitter","clients","name","ChatBotRights","ChatProvider","ConfigurationRights","ConfigurationType","DMApiValidationMode","DreamDaemonRights","DreamDaemonSecurity","DreamDaemonVisibility","DreamMakerRights","EngineRights","EngineType","InstancePermissionSetRights","RemoteGitProvider","RepositoryRights","RightsType","WatchdogStatus","ContentType","securityWorker","secure","format","axiosConfig","securityData","setSecurityData","path","query","body","params","secureParams","requestParams","mergeRequestParams","responseFormat","FormData","createFormData","Text","JSON","stringify","responseType","axios","create","params1","params2","defaults","stringifyFormItem","formItem","input","keys","reduce","formData","key","property","propertyContent","Array","isFileType","Blob","File","append","http","administrationControllerRead","administrationControllerUpdate","Json","administrationControllerDelete","administrationControllerListLogs","administrationControllerGetLog","chatControllerCreate","chatControllerUpdate","chatControllerDelete","chatControllerGetId","chatControllerList","configurationControllerUpdate","configurationControllerCreateDirectory","configurationControllerDeleteDirectory","configurationControllerFile","filePath","configurationControllerDirectory","directoryPath","configurationControllerList","dreamDaemonControllerCreate","dreamDaemonControllerRead","dreamDaemonControllerDelete","dreamDaemonControllerUpdate","dreamDaemonControllerRestart","dreamDaemonControllerCreateDump","dreamMakerControllerRead","dreamMakerControllerCreate","dreamMakerControllerUpdate","dreamMakerControllerGetId","dreamMakerControllerList","engineControllerRead","engineControllerUpdate","engineControllerDelete","engineControllerList","instanceControllerCreate","instanceControllerUpdate","instanceControllerDelete","instanceControllerGetId","instanceControllerGrantPermissions","instanceControllerList","instancePermissionSetControllerCreate","instancePermissionSetControllerUpdate","instancePermissionSetControllerRead","instancePermissionSetControllerList","instancePermissionSetControllerGetId","instancePermissionSetControllerDelete","jobControllerRead","jobControllerList","jobControllerDelete","jobControllerGetId","repositoryControllerCreate","repositoryControllerDelete","repositoryControllerReclone","repositoryControllerRead","repositoryControllerUpdate","transferControllerDownload","transferControllerUpload","userGroupControllerCreate","userGroupControllerUpdate","userGroupControllerGetId","userGroupControllerDelete","userGroupControllerList","DescType","addon","origin","noError","desc","extendedInfo","originalErrorMessage","TEXT","TGSErrorCode","errorCode","message","additionalData","stack","Error","debuginfo","replace","replaceAll","githubtoken","breakonerror","args","freeze","assign","default","promiseHooks","Set","i","work","hook","push","catch","all","add","removeHook","delete","jobsWidgetOptions","InstanceEditSidebar","site_local","publicPath","URL","href","DEFAULT_APIPATH","jobpollinactive","jobpollactive","jobswidgetdisplay","possibleValues","AUTO","instanceprobetimer","min","max","instanceeditsidebar","showjson","MODE","manualpr","restjobs2"],"sourceRoot":""}