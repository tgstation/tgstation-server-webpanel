{"version":3,"file":"1930.a299e5e3ce155c06e80c.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/DreamMakerClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    CompileJobResponse,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    ErrorMessageResponse,\n    JobResponse,\n    PaginatedCompileJobResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\n\ntype getDeployInfoErrors = GenericErrors;\ntype startCompileErrors = GenericErrors;\ntype updateDeployInfoErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\ntype listCompileJobsErrors = GenericErrors;\ntype getCompileJobErrors = GenericErrors | ErrorCode.COMPILE_JOB_NOT_FOUND;\n\nexport default new (class DreamDaemonClient extends ApiClient {\n    public async getDeployInfo(\n        instance: number\n    ): Promise<InternalStatus<DreamMakerResponse, getDeployInfoErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.dreamMakerControllerRead({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as DreamMakerResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async startCompile(\n        instance: number\n    ): Promise<InternalStatus<JobResponse, startCompileErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.dreamMakerControllerCreate({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as JobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateDeployInfo(\n        instance: number,\n        settings: DreamMakerRequest\n    ): Promise<InternalStatus<DreamMakerResponse | null, updateDeployInfoErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.dreamMakerControllerUpdate(settings, {\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as DreamMakerResponse\n                });\n            }\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listCompileJobs(\n        instance: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedCompileJobResponse, listCompileJobsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.dreamMakerControllerList(\n                { page, pageSize },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedCompileJobResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getCompileJob(\n        instance: number,\n        compileJob: number\n    ): Promise<InternalStatus<CompileJobResponse, getCompileJobErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.dreamMakerControllerGetId(compileJob, {\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as CompileJobResponse\n                });\n            }\n            case 404: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.COMPILE_JOB_NOT_FOUND,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","getDeployInfo","instance","response","ServerClient","wait4Init","apiClient","api","dreamMakerControllerRead","headers","Instance","toString","stat","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","UNHANDLED_RESPONSE","axiosResponse","startCompile","dreamMakerControllerCreate","updateDeployInfo","settings","dreamMakerControllerUpdate","NO_DB_ENTITY","errorMessage","listCompileJobs","page","pageSize","configOptions","itemsperpage","value","dreamMakerControllerList","getCompileJob","compileJob","dreamMakerControllerGetId","COMPILE_JOB_NOT_FOUND"],"sourceRoot":""}