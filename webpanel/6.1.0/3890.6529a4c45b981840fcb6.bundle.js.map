{"version":3,"file":"3890.6529a4c45b981840fcb6.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/User/Create.tsx"],"sourcesContent":["import { History as LibHistory } from \"history\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport type { UserResponse } from \"../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    username: string;\n    sysuser: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    creating?: boolean;\n    redirect?: boolean;\n}\ninterface IProps extends RouteComponentProps {\n    postCreateAction?: (user: UserResponse, history: LibHistory) => void;\n}\n\nclass UserCreate extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public static defaultProps = {\n        postCreateAction: (user: UserResponse, history: LibHistory) => {\n            RouteData.selecteduserid = user.id;\n            history.push(AppRoutes.useredit.link ?? AppRoutes.useredit.route);\n        }\n    };\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            username: \"\",\n            sysuser: \"\"\n        };\n\n        this.submitTGS = this.submitTGS.bind(this);\n        this.submitSYS = this.submitSYS.bind(this);\n    }\n\n    // noinspection DuplicatedCode\n    private validate(): boolean {\n        let err = false;\n        if (this.state.password1.length < this.context.serverInfo.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        return err;\n    }\n\n    private async submitTGS(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        //validation\n        if (this.validate()) return;\n        if (!this.state.username) return;\n\n        this.setState({\n            creating: true\n        });\n\n        const user = await UserClient.createUser({\n            name: this.state.username,\n            password: this.state.password1\n        });\n        // noinspection DuplicatedCode\n        if (user.code == StatusCode.OK) {\n            this.props.postCreateAction!(user.payload, this.props.history);\n        } else {\n            this.addError(user.error);\n            this.setState({\n                creating: false\n            });\n        }\n    }\n\n    private async submitSYS(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        //validation\n        if (!this.state.sysuser) return;\n\n        this.setState({\n            creating: true\n        });\n\n        const user = await UserClient.createUser({\n            systemIdentifier: this.state.sysuser\n        });\n        // noinspection DuplicatedCode\n        if (user.code == StatusCode.OK) {\n            this.props.postCreateAction!(user.payload, this.props.history);\n        } else {\n            this.addError(user.error);\n            this.setState({\n                creating: false\n            });\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): ReactNode {\n        if (this.state.creating) {\n            return <Loading text=\"loading.user.create\" />;\n        }\n\n        const handleUsernameInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ username: event.target.value });\n        const handleSysuserInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ sysuser: event.target.value });\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <h3>\n                    <FormattedMessage id=\"routes.usercreate\" />\n                </h3>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    <Form onSubmit={event => void this.submitTGS(event)}>\n                        <Form.Group controlId=\"username\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.username\" />\n                            </Form.Label>\n                            <Form.Control\n                                required\n                                onChange={handleUsernameInput}\n                                value={this.state.username}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"password1\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.password\" />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                onChange={handlePwd1Input}\n                                value={this.state.password1}\n                                isInvalid={this.state.matchError || this.state.lengthError}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.lengthError ? (\n                                    <React.Fragment>\n                                        <FormattedMessage id=\"login.password.repeat.short\" />\n                                        {this.context.serverInfo.minimumPasswordLength}\n                                    </React.Fragment>\n                                ) : (\n                                    \"\"\n                                )}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"password2\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.password.repeat\" />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                onChange={handlePwd2Input}\n                                value={this.state.password2}\n                                isInvalid={this.state.matchError || this.state.lengthError}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.matchError ? (\n                                    <FormattedMessage id=\"login.password.repeat.match\" />\n                                ) : (\n                                    \"\"\n                                )}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"view.user.create.tgs\" />\n                        </Button>\n                    </Form>\n                    <hr />\n                    <Form onSubmit={event => void this.submitSYS(event)}>\n                        <Form.Group controlId=\"sysuser\">\n                            <Form.Label>\n                                <FormattedMessage id=\"generic.systemidentifier\" />\n                            </Form.Label>\n                            <Form.Control\n                                required\n                                onChange={handleSysuserInput}\n                                value={this.state.sysuser}\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"view.user.create.sys\" />\n                        </Button>\n                    </Form>\n                </Col>\n            </div>\n        );\n    }\n}\nUserCreate.contextType = GeneralContext;\nexport default withRouter(UserCreate);\n"],"names":["UserCreate","React","constructor","props","super","this","state","errors","password1","password2","username","sysuser","submitTGS","bind","submitSYS","validate","err","length","context","serverInfo","minimumPasswordLength","setState","lengthError","matchError","event","preventDefault","creating","user","UserClient","createUser","name","password","code","StatusCode","OK","postCreateAction","payload","history","addError","error","systemIdentifier","prevState","Array","from","push","render","Loading","text","className","map","index","ErrorAlert","key","onClose","prev","newarr","undefined","FormattedMessage","id","Col","lg","md","Form","onSubmit","Group","controlId","Label","Control","required","onChange","target","value","type","isInvalid","Feedback","Button","defaultProps","RouteData","selecteduserid","AppRoutes","useredit","link","route","contextType","GeneralContext","withRouter"],"sourceRoot":""}