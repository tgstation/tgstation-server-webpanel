{"version":3,"file":"6867.39ade2f89b5a54c2c509.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Deployment.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/JobHistory.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Server.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/InstanceEdit.tsx"],"sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceResponse,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient, { GetInstanceErrors } from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, {\n    StatusCode\n} from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ntype IProps = RouteComponentProps;\ninterface IState {\n    moving: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: [],\n            moving: false\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        if (!!instance.autoUpdateCron && !!instance.autoUpdateInterval) {\n            alert(\"Cannot set both auto update interval and cron!\");\n            return;\n        }\n\n        const instanceId = this.context.instance.id;\n        let newPath: string | undefined;\n        if (instance.path && instance.path != this.context.instance.path) {\n            newPath = instance.path;\n            instance.path = null;\n            instance.online = false; // need to offline the instance before moving it\n            this.setState({ moving: true });\n        }\n\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: instanceId\n        });\n        if (response.code !== StatusCode.OK) {\n            this.addError(response.error);\n            this.setState({ moving: false });\n            return;\n        }\n\n        if (newPath) {\n            //move the instance\n            const response2 = await InstanceClient.editInstance({\n                id: this.context.instance.id,\n                path: newPath\n            });\n\n            if (response2.code !== StatusCode.OK) {\n                this.addError(response2.error);\n                this.setState({ moving: false });\n                await this.context.reloadInstance();\n                return;\n            }\n\n            // we can't use the jobs controller because instance move jobs are special so just wait until the move is done\n            let response3: InternalStatus<InstanceResponse, GetInstanceErrors>;\n            do {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                response3 = await InstanceClient.getInstance(instanceId);\n\n                if (response3.code !== StatusCode.OK) {\n                    this.addError(response3.error);\n                    this.setState({ moving: false });\n                    await this.context.reloadInstance();\n                    return;\n                }\n            } while (response3.payload.moveJob);\n\n            const response4 = await InstanceClient.editInstance({\n                online: true,\n                id: instanceId\n            });\n            if (response4.code !== StatusCode.OK) {\n                this.addError(response4.error);\n                this.setState({ moving: false });\n            } else {\n                JobsController.registerJob(response2.payload.moveJob!, instanceId);\n            }\n        }\n\n        await this.context.reloadInstance();\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateCron: {\n                name: \"fields.instance.cron\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.autoUpdateCron,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                {this.state.moving ? (\n                    <Loading text=\"loading.instance.move\" />\n                ) : (\n                    <InputForm fields={fields} onSave={this.editInstance} />\n                )}\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    CompileJobResponse,\n    DreamDaemonSecurity,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    DreamMakerRights\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamMakerRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { DeploymentsData, ViewDataType } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\n\nexport function Deployment(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [deployInfo, setDeployInfo] = useState<DreamMakerResponse | null>(null);\n    const [compileJobs, setCompileJobs] = useState<CompileJobResponse[] | null>(null);\n    const [compileJobsPage, setCompileJobsPage] = useState<number>(1);\n    const [compileJobsTotalPages, setCompileJobsTotalPages] = useState<number>(0);\n\n    // adjusts the size of the viewer pages, undefined uses default server page size\n    const [compileJobsPageSize, setCompileJobsPageSize] = useState<number | undefined>(5);\n\n    const canRead = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Read\n    );\n    const canCompile = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n    const canReadDeployments = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.CompileJobs\n    );\n\n    async function loadDeployInfo() {\n        if (!canRead) return setIsLoading(false);\n\n        setIsLoading(true);\n        const response = await DreamMakerClient.getDeployInfo(instanceEditContext.instance.id);\n        setIsLoading(false);\n\n        if (response.code === StatusCode.OK) {\n            setDeployInfo(response.payload);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    async function loadCompileJobs(page: number): Promise<void> {\n        if (!canReadDeployments) {\n            return;\n        }\n\n        // loading is handled in viewer component\n        setCompileJobs(null);\n        const response = await DreamMakerClient.listCompileJobs(instanceEditContext.instance.id, {\n            page,\n            pageSize: compileJobsPageSize\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (!compileJobsPageSize) setCompileJobsPageSize(response.payload.pageSize);\n\n            setCompileJobsTotalPages(response.payload.totalPages);\n            setCompileJobsPage(page);\n            setCompileJobs(response.payload.content);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    useEffect(() => {\n        void loadDeployInfo();\n        void loadCompileJobs(1);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [instanceEditContext.instance.id]);\n\n    let timeout = undefined;\n    const parsedTimeMatch = /(?:(?<days>\\d+)\\.)?(?<hours>\\d+):(?<minutes>\\d+):(?<seconds>\\d+)/.exec(\n        deployInfo?.timeout ?? \"\"\n    );\n    if (parsedTimeMatch) {\n        const parsedTime = parsedTimeMatch.groups!;\n        timeout =\n            (parseInt(parsedTime.days ?? 0) * 24 + parseInt(parsedTime.hours)) * 60 +\n            parseInt(parsedTime.minutes) +\n            parseInt(parsedTime.seconds) / 60;\n    }\n\n    const fields = {\n        projectName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.projectname\",\n            tooltip: \"fields.instance.deploy.projectname.desc\",\n            defaultValue: deployInfo?.projectName,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetDme\n            )\n        },\n        compilerAdditionalArguments: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.compilerargs\",\n            tooltip: \"fields.instance.deploy.compilerargs.desc\",\n            defaultValue: deployInfo?.compilerAdditionalArguments,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetCompilerArguments\n            )\n        },\n        timeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.deploy.timeout\",\n            tooltip: \"fields.instance.deploy.timeout.desc\",\n            defaultValue: timeout,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetTimeout\n            )\n        },\n        apiValidationPort: {\n            type: FieldType.Number as FieldType.Number,\n            min: 0,\n            max: 65535,\n            name: \"fields.instance.deploy.apiport\",\n            tooltip: \"fields.instance.deploy.apiport.desc\",\n            defaultValue: deployInfo?.apiValidationPort,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationPort\n            )\n        },\n        apiValidationSecurityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DreamDaemonSecurity,\n            name: \"fields.instance.deploy.seclevel\",\n            tooltip: \"fields.instance.deploy.seclevel.desc\",\n            defaultValue: deployInfo?.apiValidationSecurityLevel,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetSecurityLevel\n            )\n        },\n        requireDMApiValidation: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.deploy.validateapi\",\n            tooltip: \"fields.instance.deploy.validateapi.desc\",\n            defaultValue: deployInfo?.requireDMApiValidation,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationRequirement\n            )\n        }\n    };\n\n    let deploymentViewData: DeploymentsData | null = null;\n    const paging = {\n        currentPage: compileJobsPage,\n        totalPages: compileJobsTotalPages,\n        loadPage: loadCompileJobs,\n        pageSize: compileJobsPageSize ?? 0 // will always be set before being accessed\n    };\n\n    if (!canReadDeployments) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            paging\n        };\n    } else if (compileJobs) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            compileJobs,\n            paging\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ deployInfo }} />\n            {displayErrors(errorState)}\n            {canReadDeployments ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3>\n                <FormattedMessage id=\"view.instance.deploy.title\" />\n            </h3>\n            {!canRead ? <GenericAlert title=\"view.instance.no_metadata\" /> : null}\n            {isLoading ? (\n                <Loading text=\"loading.deployments\" />\n            ) : (\n                <>\n                    <InputForm\n                        hideDisabled={!canRead}\n                        fields={fields}\n                        onSave={async _result => {\n                            let newTimeout: undefined | string = undefined;\n                            if (_result.timeout) {\n                                const days = Math.floor(_result.timeout / (24 * 60));\n                                _result.timeout -= days * (24 * 60);\n                                const hours = Math.floor(_result.timeout / 60);\n                                _result.timeout -= hours * 60;\n                                const minutes = Math.floor(_result.timeout);\n                                _result.timeout -= minutes;\n                                const seconds = Math.floor(_result.timeout * 60);\n                                if (days) {\n                                    newTimeout = `${days}.${hours}:${minutes}:${seconds}`;\n                                } else {\n                                    newTimeout = `${hours}:${minutes}:${seconds}`;\n                                }\n                            }\n\n                            const result = {\n                                ..._result,\n                                timeout: newTimeout\n                            } as DreamMakerRequest;\n\n                            setIsLoading(true);\n                            const response = await DreamMakerClient.updateDeployInfo(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.ERROR) {\n                                addError(errorState, response.error);\n                            } else {\n                                await loadDeployInfo();\n                            }\n                            setIsLoading(false);\n                        }}\n                    />\n                    <hr />\n                    <SimpleToolTip\n                        tooltipid=\"generic.no_perm\"\n                        show={canCompile ? false : undefined}>\n                        <Button\n                            disabled={!canCompile}\n                            onClick={() =>\n                                void (async () => {\n                                    const response = await DreamMakerClient.startCompile(\n                                        instanceEditContext.instance.id\n                                    );\n                                    if (response.code === StatusCode.ERROR) {\n                                        addError(errorState, response.error);\n                                    } else {\n                                        JobsController.registerJob(\n                                            response.payload,\n                                            instanceEditContext.instance.id\n                                        );\n                                        JobsController.fastmode = 5;\n                                    }\n                                })()\n                            }>\n                            <FormattedMessage id=\"view.instance.deploy.deploy\" />\n                        </Button>\n                    </SimpleToolTip>\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport JobsClient, { TGSJobResponse } from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport JobCard from \"../../../utils/JobCard\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\nexport default function JobHistory(): JSX.Element {\n    const instanceEditContext = React.useContext(InstanceEditContext);\n\n    const [jobs, setJobs] = useState<TGSJobResponse[]>([]);\n    const [errors, setErrors] = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(\n        RouteData.jobhistorypage.get(instanceEditContext.instance.id) ?? 1\n    );\n    const [maxPage, setMaxPage] = useState<number | undefined>(undefined);\n\n    //const [];\n\n    useEffect(() => {\n        async function loadJobs() {\n            const response = await JobsClient.listJobs(instanceEditContext.instance.id, {\n                page: page\n            });\n            if (response.code === StatusCode.OK) {\n                if (page > response.payload.totalPages && response.payload.totalPages !== 0)\n                    setPage(1);\n                setJobs(response.payload.content);\n                setMaxPage(response.payload.totalPages);\n            } else {\n                addError(response.error);\n            }\n            setLoading(false);\n        }\n\n        RouteData.jobhistorypage.set(instanceEditContext.instance.id, page);\n        setLoading(true);\n        void loadJobs();\n    }, [page, instanceEditContext.instance.id]);\n\n    useEffect(() => {}, [errors]);\n\n    function addError(error: InternalError<ErrorCode>): void {\n        setErrors(prevState => {\n            const errors = Array.from(prevState);\n            errors.push(error);\n            return errors;\n        });\n    }\n\n    async function onCancel(job: TGSJobResponse) {\n        const status = await JobsClient.deleteJob(job.instanceId, job.id);\n\n        if (status.code === StatusCode.OK) {\n            JobsController.fastmode = 5;\n        } else {\n            addError(status.error);\n        }\n    }\n\n    if (loading) {\n        return <Loading text=\"loading.instance.jobs.list\" />;\n    }\n\n    return (\n        <div>\n            <DebugJsonViewer obj={jobs} />\n            {errors.map((err, index) => {\n                if (!err) return;\n                return (\n                    <ErrorAlert\n                        key={index}\n                        error={err}\n                        onClose={() =>\n                            setErrors(prev => {\n                                const newarr = Array.from(prev);\n                                newarr[index] = undefined;\n                                return newarr;\n                            })\n                        }\n                    />\n                );\n            })}\n            {jobs\n                .sort((a, b) => b.id - a.id)\n                .filter(job => !!job.stoppedAt)\n                .map(job => (\n                    <JobCard job={job} key={job.id} onCancel={j => void onCancel(j)} />\n                ))}\n            <PageHelper\n                selectPage={newPage => setPage(newPage)}\n                totalPages={maxPage ?? 1}\n                currentPage={page}\n            />\n        </div>\n    );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\nimport { gte as SemVerGte } from \"semver\";\n\nimport DreamDaemonClient from \"../../../../ApiClient/DreamDaemonClient\";\nimport {\n    DreamDaemonRequest,\n    DreamDaemonResponse,\n    DreamDaemonRights,\n    DreamDaemonSecurity,\n    DreamDaemonVisibility,\n    EngineType,\n    WatchdogStatus\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamDaemonRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { ViewDataType, WatchdogData } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum GracefulAction {\n    None,\n    Stop,\n    Restart\n}\n\nfunction Server(props: WrappedComponentProps): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const [watchdogSettings, setWatchdogSettings] = useState<DreamDaemonResponse>();\n    const [loading, setLoading] = useState(false);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => void loadWatchdogSettings(), [instanceEditContext.instance.id]);\n\n    async function loadWatchdogSettings(): Promise<void> {\n        if (\n            !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.ReadMetadata\n            )\n        ) {\n            return setWatchdogSettings({});\n        }\n\n        const response = await DreamDaemonClient.getWatchdogStatus(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            setWatchdogSettings(response.payload);\n        }\n    }\n    async function saveWatchdogSettings(newSettings: DreamDaemonRequest): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.updateWatchdogStatus(\n            instanceEditContext.instance.id,\n            newSettings\n        );\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        }\n        await loadWatchdogSettings();\n        setLoading(false);\n    }\n\n    async function startWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.startWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function stopWatchdog(): Promise<void> {\n        if (!confirm(props.intl.formatMessage({ id: \"view.instance.server.prompt.stop\" }))) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.stopWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function restartWatchdog(): Promise<void> {\n        if (!confirm(props.intl.formatMessage({ id: \"view.instance.server.prompt.restart\" }))) {\n            return;\n        }\n\n        setLoading(true);\n        const response = await DreamDaemonClient.restartWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.registerCallback(response.payload.id, () => void loadWatchdogSettings());\n            JobsController.fastmode = 5;\n            await loadWatchdogSettings();\n        }\n        setLoading(false);\n    }\n\n    async function dumpWatchdog(): Promise<void> {\n        setLoading(true);\n        const response = await DreamDaemonClient.dumpWatchdog(instanceEditContext.instance.id);\n        if (response.code === StatusCode.ERROR) {\n            addError(errorState, response.error);\n        } else {\n            JobsController.fastmode = 5;\n        }\n        setLoading(false);\n    }\n\n    if (!watchdogSettings) {\n        return <>{displayErrors(errorState)}</>;\n    }\n\n    if (loading) {\n        return <Loading />;\n    }\n\n    const fields = {\n        autoStart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostart\",\n            defaultValue: watchdogSettings.autoStart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAutoStart\n            )\n        },\n        startProfiler: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.autostartprofiler\",\n            defaultValue: watchdogSettings.startProfiler,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetProfiler\n            )\n        },\n        logOutput: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.logoutput\",\n            defaultValue: watchdogSettings.logOutput,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetLogOutput\n            )\n        },\n        port: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.port\",\n            defaultValue: watchdogSettings.port,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        },\n        visibility: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.visibility\",\n            defaultValue: watchdogSettings.visibility,\n            enum: DreamDaemonVisibility,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetVisibility\n            )\n        },\n        securityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.watchdog.securitylevel\",\n            defaultValue: watchdogSettings.securityLevel,\n            enum: DreamDaemonSecurity,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetSecurity\n            )\n        },\n        startupTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.startup\",\n            defaultValue: watchdogSettings.startupTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetStartupTimeout\n            )\n        },\n        topicRequestTimeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.timeout.topic\",\n            defaultValue: watchdogSettings.topicRequestTimeout,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetTopicTimeout\n            )\n        },\n        healthCheckSeconds: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.healthcheck\",\n            defaultValue: watchdogSettings.healthCheckSeconds,\n            min: 0,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetHealthCheckInterval\n            )\n        },\n        dumpOnHealthCheckRestart: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.dumpOnHealthCheckRestart\",\n            defaultValue: watchdogSettings.dumpOnHealthCheckRestart,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.CreateDump\n            )\n        },\n        minidumps: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.minidumps\",\n            defaultValue: watchdogSettings.minidumps,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetMinidumps\n            )\n        },\n        allowWebClient: {\n            type: FieldType.Boolean as FieldType.Boolean,\n            name: \"fields.instance.watchdog.allowwebclient\",\n            defaultValue: watchdogSettings.allowWebClient,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetWebClient\n            )\n        },\n        additionalParameters: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.additionalparams\",\n            defaultValue: watchdogSettings.additionalParameters,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetAdditionalParameters\n            )\n        },\n        mapThreads: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.mapthreads\",\n            defaultValue: watchdogSettings.mapThreads,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetMapThreads\n            )\n        },\n        openDreamTopicPort: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.watchdog.od_topic_port\",\n            tooltip: \"fields.instance.watchdog.od_topic_port.desc\",\n            defaultValue: watchdogSettings.openDreamTopicPort,\n            min: 0,\n            max: 65535,\n            disabled: !hasDreamDaemonRight(\n                instanceEditContext.instancePermissionSet,\n                DreamDaemonRights.SetPort\n            )\n        }\n    };\n\n    const anyEditableField = Object.values(fields).some(field => !field.disabled);\n\n    const no_perm_tooltip = (\n        <Tooltip id=\"generic.no_perm\">\n            <FormattedMessage id=\"generic.no_perm\" />\n        </Tooltip>\n    );\n\n    const canStart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Start\n    );\n    const canStop = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Shutdown\n    );\n    const canRestart = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.Restart\n    );\n    const canDump = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.CreateDump\n    );\n    const canMetadata = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadMetadata\n    );\n    const canGracefulAny =\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftShutdown\n        ) ||\n        hasDreamDaemonRight(\n            instanceEditContext.instancePermissionSet,\n            DreamDaemonRights.SoftRestart\n        );\n    const canActionAny = canStart || canStop || canRestart || canDump;\n\n    const canBroadcast = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.BroadcastMessage\n    );\n\n    const broadcastNotAllowed =\n        !canBroadcast ||\n        (canMetadata &&\n            (watchdogSettings.status !== WatchdogStatus.Online ||\n                (watchdogSettings.activeCompileJob?.dmApiVersion != null &&\n                    !SemVerGte(watchdogSettings.activeCompileJob?.dmApiVersion, \"5.7.0\"))));\n\n    const broadcastFields = {\n        message: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.watchdog.broadcast\",\n            defaultValue: \"\",\n            disabled: broadcastNotAllowed,\n            tooltip: \"fields.instance.watchdog.broadcast.desc\"\n        }\n    };\n\n    const canViewDeployment = hasDreamDaemonRight(\n        instanceEditContext.instancePermissionSet,\n        DreamDaemonRights.ReadRevision\n    );\n\n    let deploymentViewData: WatchdogData | null = null;\n    if (watchdogSettings) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.Watchdog,\n            activeCompileJob: watchdogSettings.activeCompileJob,\n            stagedCompileJob: watchdogSettings.stagedCompileJob\n        };\n    }\n\n    const OneGibibyte = 1073741824;\n    const ramUsage = watchdogSettings?.immediateMemoryUsage;\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={watchdogSettings} />\n            {displayErrors(errorState)}\n            <h2 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.status\" />\n                <Badge\n                    pill\n                    variant={\n                        watchdogSettings.status === WatchdogStatus.Online\n                            ? \"success\"\n                            : watchdogSettings.status === WatchdogStatus.Offline\n                              ? \"danger\"\n                              : \"warning\"\n                    }>\n                    <FormattedMessage\n                        id={`view.instance.server.status.${\n                            WatchdogStatus[watchdogSettings.status!]\n                        }`}\n                    />\n                </Badge>\n            </h2>\n            {ramUsage ? (\n                <h4>\n                    <Badge\n                        pill\n                        variant={\n                            deploymentViewData?.activeCompileJob?.engineVersion.engine ==\n                            EngineType.OpenDream\n                                ? \"success\"\n                                : ramUsage > OneGibibyte * 3\n                                  ? \"danger\"\n                                  : ramUsage > OneGibibyte * 2\n                                    ? \"warning\"\n                                    : \"success\"\n                        }>\n                        <div>\n                            <FormattedMessage id=\"view.instance.server.status.ram\" />\n                            :&nbsp;\n                            {Math.round((ramUsage / OneGibibyte) * 100) / 100}\n                            GB\n                        </div>\n                    </Badge>\n                </h4>\n            ) : null}\n            <hr />\n            {canViewDeployment ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.settings\" />\n            </h3>\n            {!canMetadata ? (\n                anyEditableField ? (\n                    <GenericAlert title=\"view.instance.no_metadata\" />\n                ) : (\n                    <GenericAlert title=\"view.instance.server.no_metadata_and_no_settings\" />\n                )\n            ) : null}\n            <InputForm fields={fields} onSave={saveWatchdogSettings} hideDisabled={!canMetadata} />\n            <hr />\n            <h3 className=\"text-center\">\n                <FormattedMessage id=\"view.instance.server.actions\" />\n            </h3>\n            {canActionAny ? (\n                <>\n                    {!canMetadata ? (\n                        <GenericAlert title=\"view.instance.server.no_metadata_actions\" />\n                    ) : null}\n                    <div className=\"text-center mb-3\">\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStart ? false : undefined}>\n                            <Button\n                                variant=\"success\"\n                                className=\"mx-2\"\n                                onClick={() => void startWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Offline) ||\n                                    !canStart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.start\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canStop ? false : undefined}>\n                            <Button\n                                variant=\"danger\"\n                                className=\"mx-2\"\n                                onClick={() => void stopWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canStop\n                                }>\n                                <FormattedMessage id=\"view.instance.server.stop\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canRestart ? false : undefined}>\n                            <Button\n                                variant=\"warning\"\n                                className=\"mx-2\"\n                                onClick={() => void restartWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status == WatchdogStatus.Offline) ||\n                                    !canRestart\n                                }>\n                                <FormattedMessage id=\"view.instance.server.restart\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <OverlayTrigger\n                            overlay={no_perm_tooltip}\n                            show={canDump ? false : undefined}>\n                            <Button\n                                variant=\"info\"\n                                className=\"mx-2\"\n                                onClick={() => void dumpWatchdog()}\n                                disabled={\n                                    (canMetadata &&\n                                        watchdogSettings.status != WatchdogStatus.Online) ||\n                                    !canDump\n                                }>\n                                <FormattedMessage id=\"view.instance.server.dump\" />\n                            </Button>\n                        </OverlayTrigger>\n                    </div>\n                </>\n            ) : (\n                <GenericAlert title=\"view.instance.server.no_actions\" />\n            )}\n            {!canMetadata && canGracefulAny ? (\n                <GenericAlert title=\"view.instance.server.no_metadata_graceful\" />\n            ) : null}\n\n            {canMetadata || canGracefulAny ? (\n                <div className=\"w-75 mx-auto\">\n                    <InputField\n                        name=\"view.instance.graceful\"\n                        type={FieldType.Enum}\n                        enum={GracefulAction}\n                        tooltip=\"view.instance.graceful.desc\"\n                        defaultValue={\n                            watchdogSettings.softRestart\n                                ? GracefulAction.Restart\n                                : watchdogSettings.softShutdown\n                                  ? GracefulAction.Stop\n                                  : GracefulAction.None\n                        }\n                        disabled={!canGracefulAny}\n                        onChange={_result => {\n                            const result = _result as GracefulAction;\n\n                            switch (result) {\n                                case GracefulAction.None:\n                                    if (\n                                        !watchdogSettings?.softRestart &&\n                                        !watchdogSettings?.softShutdown\n                                    )\n                                        return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: watchdogSettings.softShutdown\n                                            ? false\n                                            : undefined,\n                                        softRestart: watchdogSettings.softRestart\n                                            ? false\n                                            : undefined\n                                    });\n                                    break;\n                                case GracefulAction.Stop:\n                                    if (watchdogSettings?.softShutdown) return;\n                                    void saveWatchdogSettings({\n                                        softShutdown: true\n                                    });\n                                    break;\n                                case GracefulAction.Restart:\n                                    if (watchdogSettings?.softRestart) return;\n                                    void saveWatchdogSettings({\n                                        softRestart: true\n                                    });\n                                    break;\n                            }\n                        }}\n                    />\n                </div>\n            ) : canActionAny ? (\n                <GenericAlert title=\"view.instance.server.no_graceful\" />\n            ) : null}\n\n            <div className=\"w-75 mx-auto\">\n                <br />\n                <InputForm\n                    fields={broadcastFields}\n                    onSave={fieldsResult => {\n                        void saveWatchdogSettings({\n                            broadcastMessage: fieldsResult.message\n                        });\n                    }}\n                    saveMessageId=\"view.instance.server.broadcast\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default injectIntl(Server);\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { faGamepad } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentType } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport {\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    EngineRights,\n    InstancePermissionSetResponse,\n    RepositoryRights\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions, { InstanceEditSidebar } from \"../../../ApiClient/util/config\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport {\n    InstanceEditContext,\n    UnsafeInstanceEditContext\n} from \"../../../contexts/InstanceEditContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport AccessDenied from \"../../utils/AccessDenied\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\nimport ChatBots from \"./Edit/ChatBots\";\nimport Config from \"./Edit/Config\";\nimport { Deployment } from \"./Edit/Deployment\";\nimport Engine from \"./Edit/Engine\";\nimport Files from \"./Edit/Files\";\nimport InstancePermissions from \"./Edit/InstancePermissions\";\nimport JobHistory from \"./Edit/JobHistory\";\nimport Repository from \"./Edit/Repository\";\nimport Server from \"./Edit/Server\";\n\ntype IProps = RouteComponentProps<{ id: string; tab?: string }>;\ntype IState = Omit<UnsafeInstanceEditContext, \"user\" | \"serverInfo\"> & {\n    tab: string;\n    instanceid: number;\n};\n\nconst minimumEnginePerms =\n    EngineRights.ReadActive |\n    EngineRights.ListInstalled |\n    EngineRights.InstallOfficialOrChangeActiveByondVersion |\n    EngineRights.InstallCustomByondVersion |\n    EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion |\n    EngineRights.InstallCustomOpenDreamVersion;\n\nconst minimumServerPerms =\n    DreamDaemonRights.SetPort |\n    DreamDaemonRights.SetAutoStart |\n    DreamDaemonRights.SetSecurity |\n    DreamDaemonRights.ReadMetadata |\n    DreamDaemonRights.SetWebClient |\n    DreamDaemonRights.SoftRestart |\n    DreamDaemonRights.SoftShutdown |\n    DreamDaemonRights.Restart |\n    DreamDaemonRights.Shutdown |\n    DreamDaemonRights.Start |\n    DreamDaemonRights.SetStartupTimeout |\n    DreamDaemonRights.SetHealthCheckInterval |\n    DreamDaemonRights.CreateDump |\n    DreamDaemonRights.SetTopicTimeout |\n    DreamDaemonRights.SetAdditionalParameters |\n    DreamDaemonRights.SetVisibility;\n\nconst minimumRepoPerms =\n    RepositoryRights.SetOrigin |\n    RepositoryRights.SetSha |\n    RepositoryRights.MergePullRequest |\n    RepositoryRights.UpdateBranch |\n    RepositoryRights.ChangeCommitter |\n    RepositoryRights.ChangeTestMergeCommits |\n    RepositoryRights.ChangeCredentials |\n    RepositoryRights.SetReference |\n    RepositoryRights.Read |\n    RepositoryRights.ChangeAutoUpdateSettings |\n    RepositoryRights.Delete |\n    RepositoryRights.ChangeSubmoduleUpdate;\n\nconst minimumDeployPerms =\n    DreamMakerRights.Read |\n    DreamMakerRights.Compile |\n    DreamMakerRights.SetApiValidationPort |\n    DreamMakerRights.SetDme |\n    DreamMakerRights.SetApiValidationRequirement |\n    DreamMakerRights.SetTimeout |\n    DreamMakerRights.SetSecurityLevel;\n\nconst minimumChatPerms = ChatBotRights.Read | ChatBotRights.Create;\n\nconst minimumFilePerms =\n    ConfigurationRights.Read | ConfigurationRights.List | ConfigurationRights.Write;\n\nclass InstanceEdit extends React.Component<IProps, IState> {\n    public static tabs: [\n        string,\n        IconProp,\n        (\n            instancePermissionSet: InstancePermissionSetResponse,\n            generalContext: GeneralContext\n        ) => boolean,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ComponentType<any>?\n    ][] = [\n        [\"info\", \"info\", () => true, Config],\n        [\n            \"repository\",\n            \"code-branch\",\n            instancePermissionSet => !!(instancePermissionSet.repositoryRights & minimumRepoPerms),\n            Repository\n        ],\n        [\n            \"engine\",\n            faGamepad,\n            instancePermissionSet => !!(instancePermissionSet.engineRights & minimumEnginePerms),\n            Engine\n        ],\n        [\n            \"deployment\",\n            \"hammer\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamMakerRights & minimumDeployPerms),\n            Deployment\n        ],\n        [\n            \"dreamdaemon\",\n            \"server\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamDaemonRights & minimumServerPerms),\n            Server\n        ],\n        [\n            \"chatbots\",\n            \"comments\",\n            instancePermissionSet => !!(instancePermissionSet.chatBotRights & minimumChatPerms),\n            ChatBots\n        ],\n        [\n            \"files\",\n            \"folder-open\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.configurationRights & minimumFilePerms),\n            Files\n        ],\n        [\"users\", \"users\", () => true, InstancePermissions],\n        [\"jobs\", \"stream\", () => true, JobHistory]\n    ];\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.reloadInstance = this.reloadInstance.bind(this);\n        this.deleteContextError = this.deleteContextError.bind(this);\n\n        RouteData.selectedinstanceid = parseInt(this.props.match.params.id);\n\n        this.state = {\n            tab: props.match.params.tab ?? InstanceEdit.tabs[0][0],\n            errors: new Set(),\n            instance: null,\n            instancePermissionSet: null,\n            reloadInstance: this.reloadInstance,\n            deleteError: this.deleteContextError,\n            instanceid: parseInt(this.props.match.params.id)\n        };\n    }\n\n    public deleteContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.errors);\n            newSet.delete(error);\n            return {\n                errors: newSet\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        await this.reloadInstance();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (\n            this.props.match.params.tab &&\n            prevProps.match.params.tab != this.props.match.params.tab\n        ) {\n            this.setState({\n                tab: this.props.match.params.tab\n            });\n        }\n    }\n\n    public async reloadInstance(): Promise<void> {\n        this.setState({\n            instance: null,\n            instancePermissionSet: null\n        });\n        const response = await InstanceClient.getInstance(this.state.instanceid);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.state.instanceid,\n                true\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSet: response2.payload\n                });\n            } else {\n                this.setState(prev => {\n                    const newSet = new Set(prev.errors);\n                    newSet.add(response2.error);\n                    return {\n                        instancePermissionSet: null,\n                        errors: newSet\n                    };\n                });\n            }\n        } else {\n            this.setState(prev => {\n                const newSet = new Set(prev.errors);\n                newSet.add(response.error);\n                return {\n                    instance: null,\n                    errors: newSet\n                };\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.instance || !this.state.instancePermissionSet) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        const nav = () => {\n            return (\n                <Nav\n                    defaultActiveKey={this.state.tab}\n                    onSelect={eventKey => {\n                        eventKey = eventKey ?? InstanceEdit.tabs[0][0];\n                        RouteData.selectedinstanceedittab = eventKey;\n                        this.props.history.push(\n                            AppRoutes.instanceedit.link ?? AppRoutes.instanceedit.route\n                        );\n                        this.setState({ tab: eventKey ?? InstanceEdit.tabs[0][0] });\n                    }}\n                    fill\n                    variant=\"pills\"\n                    activeKey={this.state.tab}\n                    className={\n                        \"flex-nowrap text-nowrap flex-column hover-bar sticky-top \" +\n                        (configOptions.instanceeditsidebar.value === InstanceEditSidebar.COLLAPSE\n                            ? \"pin-close\"\n                            : configOptions.instanceeditsidebar.value === InstanceEditSidebar.EXPAND\n                              ? \"pin-open\"\n                              : \"\")\n                    }\n                    style={{ top: \"8em\" }}>\n                    {InstanceEdit.tabs.map(([tabKey, icon, accessCb, component]) => {\n                        if (!this.state.instancePermissionSet) {\n                            throw Error(\n                                \"this.state.instancePermissionSet is null in instanceedit nav map\"\n                            );\n                        }\n                        const wip = !component;\n                        const accessDenied = !accessCb(\n                            this.state.instancePermissionSet,\n                            this.context\n                        );\n\n                        return (\n                            <Nav.Item key={tabKey}>\n                                <Nav.Link\n                                    eventKey={tabKey}\n                                    bsPrefix=\"nav-link instanceedittab\"\n                                    className={\n                                        (wip ? \"no-access text-white\" : \"\") +\n                                        (accessDenied ? \"no-access text-white font-italic\" : \"\") +\n                                        \" text-left\"\n                                    }>\n                                    <React.Fragment>\n                                        <FontAwesomeIcon\n                                            icon={accessDenied ? \"lock\" : icon}\n                                            fixedWidth\n                                        />\n                                        <div\n                                            className={\n                                                \"tab-text d-inline-block \" +\n                                                (accessDenied ? \"font-weight-lighter\" : \"\")\n                                            }>\n                                            <span className=\"pl-1\">\n                                                <FormattedMessage\n                                                    id={`view.instanceedit.tabs.${tabKey}`}\n                                                />\n                                            </span>\n                                        </div>\n                                    </React.Fragment>\n                                </Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n            );\n        };\n\n        return (\n            <InstanceEditContext.Provider\n                value={\n                    Object.assign(\n                        { user: this.context.user, serverInfo: this.context.serverInfo },\n                        this.state\n                    ) as InstanceEditContext\n                }>\n                <Card className=\"behind-nav\">\n                    <Card.Header className=\"text-center mb-2 sticky-top\">\n                        <h3>\n                            <FormattedMessage\n                                id=\"view.instanceedit.title\"\n                                values={{\n                                    instanceid: this.props.match.params.id,\n                                    instancename: this.state.instance.name\n                                }}\n                            />\n                        </h3>\n                        <h5 className=\"text-white-50\">\n                            <FormattedMessage id={`view.instanceedit.tabs.${this.state.tab}`} />\n                        </h5>\n                    </Card.Header>\n                    <Tab.Container\n                        mountOnEnter\n                        unmountOnExit\n                        id=\"instanceedit\"\n                        activeKey={this.state.tab}>\n                        <div className=\"d-flex flex-row z-front\">\n                            <Card.Body className=\"flex-grow-0\">{nav()}</Card.Body>\n                            <Card.Body className=\"bg-body\">\n                                <Tab.Content>\n                                    {InstanceEdit.tabs.map(([tabKey, , accessCb, Comp]) => {\n                                        if (!this.state.instancePermissionSet) {\n                                            throw Error(\n                                                \"this.state.instancePermissionSet is null in render card map\"\n                                            );\n                                        }\n                                        return (\n                                            <Tab.Pane eventKey={tabKey} key={tabKey}>\n                                                {Comp ? (\n                                                    !accessCb(\n                                                        this.state.instancePermissionSet,\n                                                        this.context\n                                                    ) ? (\n                                                        <AccessDenied />\n                                                    ) : (\n                                                        <Comp />\n                                                    )\n                                                ) : (\n                                                    <WIPNotice />\n                                                )}\n                                            </Tab.Pane>\n                                        );\n                                    })}\n                                </Tab.Content>\n                            </Card.Body>\n                        </div>\n                    </Tab.Container>\n                </Card>\n            </InstanceEditContext.Provider>\n        );\n    }\n}\n\nInstanceEdit.contextType = GeneralContext;\nexport default withRouter(InstanceEdit);\n"],"names":["InstanceSettings","React","constructor","props","super","this","editInstance","bind","state","errors","moving","addError","error","setState","prevState","Array","from","push","instance","autoUpdateCron","autoUpdateInterval","alert","instanceId","context","id","newPath","path","online","response","InstanceClient","code","StatusCode","OK","response2","reloadInstance","response3","Promise","resolve","setTimeout","getInstance","payload","moveJob","response4","JobsController","registerJob","render","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","fields","name","type","FieldType","String","defaultValue","disabled","InstanceManagerRights","Rename","Relocate","chatBotLimit","Number","min","SetChatBotLimit","SetAutoUpdate","configurationType","Enum","enum","ConfigurationType","SetConfiguration","className","FormattedMessage","DebugJsonViewer","obj","map","err","index","ErrorAlert","key","onClose","prev","newarr","undefined","Loading","text","InputForm","onSave","contextType","InstanceEditContext","withRouter","Deployment","instanceEditContext","useContext","errorState","useState","isLoading","setIsLoading","deployInfo","setDeployInfo","compileJobs","setCompileJobs","compileJobsPage","setCompileJobsPage","compileJobsTotalPages","setCompileJobsTotalPages","compileJobsPageSize","setCompileJobsPageSize","canRead","hasDreamMakerRight","instancePermissionSet","DreamMakerRights","Read","canCompile","Compile","canReadDeployments","CompileJobs","async","loadDeployInfo","DreamMakerClient","getDeployInfo","loadCompileJobs","page","listCompileJobs","pageSize","totalPages","content","timeout","useEffect","parsedTimeMatch","exec","parsedTime","groups","parseInt","days","hours","minutes","seconds","projectName","tooltip","SetDme","compilerAdditionalArguments","SetCompilerArguments","SetTimeout","apiValidationPort","max","SetApiValidationPort","apiValidationSecurityLevel","DreamDaemonSecurity","SetSecurityLevel","requireDMApiValidation","Boolean","SetApiValidationRequirement","deploymentViewData","paging","currentPage","loadPage","viewDataType","ViewDataType","displayErrors","DeploymentViewer","viewData","GenericAlert","title","hideDisabled","newTimeout","_result","Math","floor","result","updateDeployInfo","ERROR","SimpleToolTip","tooltipid","show","Button","onClick","startCompile","fastmode","JobHistory","jobs","setJobs","setErrors","loading","setLoading","setPage","RouteData","jobhistorypage","get","maxPage","setMaxPage","set","JobsClient","listJobs","loadJobs","sort","a","b","filter","job","stoppedAt","JobCard","onCancel","j","status","deleteJob","PageHelper","selectPage","newPage","GracefulAction","injectIntl","watchdogSettings","setWatchdogSettings","loadWatchdogSettings","hasDreamDaemonRight","DreamDaemonRights","ReadMetadata","DreamDaemonClient","getWatchdogStatus","saveWatchdogSettings","newSettings","updateWatchdogStatus","autoStart","SetAutoStart","startProfiler","SetProfiler","logOutput","SetLogOutput","port","SetPort","visibility","DreamDaemonVisibility","SetVisibility","securityLevel","SetSecurity","startupTimeout","SetStartupTimeout","topicRequestTimeout","SetTopicTimeout","healthCheckSeconds","SetHealthCheckInterval","dumpOnHealthCheckRestart","CreateDump","minidumps","SetMinidumps","allowWebClient","SetWebClient","additionalParameters","SetAdditionalParameters","mapThreads","SetMapThreads","openDreamTopicPort","anyEditableField","Object","values","some","field","no_perm_tooltip","Tooltip","canStart","Start","canStop","Shutdown","canRestart","Restart","canDump","canMetadata","canGracefulAny","SoftShutdown","SoftRestart","canActionAny","broadcastNotAllowed","BroadcastMessage","WatchdogStatus","Online","activeCompileJob","dmApiVersion","SemVerGte","broadcastFields","message","canViewDeployment","ReadRevision","Watchdog","stagedCompileJob","OneGibibyte","ramUsage","immediateMemoryUsage","Badge","pill","variant","Offline","engineVersion","engine","EngineType","OpenDream","round","OverlayTrigger","overlay","startWatchdog","registerCallback","confirm","intl","formatMessage","stopWatchdog","restartWatchdog","dumpWatchdog","InputField","softRestart","softShutdown","Stop","None","onChange","fieldsResult","broadcastMessage","saveMessageId","minimumEnginePerms","EngineRights","ReadActive","ListInstalled","InstallOfficialOrChangeActiveByondVersion","InstallCustomByondVersion","InstallOfficialOrChangeActiveOpenDreamVersion","InstallCustomOpenDreamVersion","minimumServerPerms","minimumRepoPerms","RepositoryRights","SetOrigin","SetSha","MergePullRequest","UpdateBranch","ChangeCommitter","ChangeTestMergeCommits","ChangeCredentials","SetReference","ChangeAutoUpdateSettings","Delete","ChangeSubmoduleUpdate","minimumDeployPerms","minimumChatPerms","ChatBotRights","Create","minimumFilePerms","ConfigurationRights","List","Write","InstanceEdit","deleteContextError","selectedinstanceid","match","params","tab","tabs","Set","deleteError","instanceid","newSet","delete","componentDidMount","componentDidUpdate","prevProps","InstancePermissionSetClient","getCurrentInstancePermissionSet","add","Provider","value","assign","serverInfo","Card","Header","instancename","Tab","Container","mountOnEnter","unmountOnExit","activeKey","Body","nav","Nav","defaultActiveKey","onSelect","eventKey","selectedinstanceedittab","history","AppRoutes","instanceedit","link","route","fill","configOptions","instanceeditsidebar","InstanceEditSidebar","COLLAPSE","EXPAND","style","top","tabKey","icon","accessCb","component","Error","wip","accessDenied","Item","Link","bsPrefix","FontAwesomeIcon","fixedWidth","Content","Comp","Pane","AccessDenied","WIPNotice","Config","repositoryRights","Repository","faGamepad","engineRights","Engine","dreamMakerRights","dreamDaemonRights","Server","chatBotRights","ChatBots","configurationRights","Files","InstancePermissions","GeneralContext"],"sourceRoot":""}