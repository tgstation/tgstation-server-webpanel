{"version":3,"file":"9600.548cdd57623bd908519a.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/DeploymentViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx"],"sourcesContent":["import {\n    faCaretDown,\n    faCaretRight,\n    faExclamationTriangle\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport { Badge, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\nimport { lt as SemverLessThan } from \"semver\";\n\nimport { CompileJobResponse, DreamDaemonSecurity } from \"../../ApiClient/generatedcode/generated\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport Engine from \"../views/Instance/Edit/Engine\";\nimport { DebugJsonViewer } from \"./JsonViewer\";\nimport Loading from \"./Loading\";\nimport PageHelper from \"./PageHelper\";\n\nexport enum ViewDataType {\n    CompileJobs,\n    Watchdog\n}\n\nexport interface CompileJobsPaging {\n    currentPage: number;\n    totalPages: number;\n    pageSize: number;\n    loadPage: (page: number) => Promise<void>;\n}\n\nexport interface DeploymentsData {\n    viewDataType: ViewDataType;\n    compileJobs?: CompileJobResponse[];\n    paging: CompileJobsPaging;\n}\n\nexport interface WatchdogData {\n    viewDataType: ViewDataType;\n    activeCompileJob?: CompileJobResponse | null;\n    stagedCompileJob?: CompileJobResponse | null;\n}\n\ntype CompileJobViewerData = WatchdogData | DeploymentsData;\n\ninterface IProps {\n    viewData: CompileJobViewerData | null; // null means loading\n}\n\ninterface IState {\n    openTestMergesId: number | null;\n}\n\nclass DeploymentViewer extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            openTestMergesId: null\n        };\n    }\n\n    public render(): ReactNode {\n        return (\n            <div>\n                <DebugJsonViewer obj={this.props.viewData} />\n                <h3 className=\"text-center\">\n                    <FormattedMessage id=\"view.instance.server.deployment_info\" />\n                </h3>\n                {!this.props.viewData ? (\n                    <Loading text=\"loading.compile_jobs\" />\n                ) : (\n                    this.renderViewData(this.props.viewData)\n                )}\n            </div>\n        );\n    }\n    /*\n    <React.Fragment>\n                        {this.props.viewData.viewDataType === ViewDataType.CompileJobs ? (\n                            <PageHelper\n                                className=\"mt-4\"\n                                selectPage={newPage => void this.props.paging.loadPage(newPage)}\n                                totalPages={this.state.maxPage ?? 1}\n                                currentPage={this.state.page}\n                            />\n                        ) : (\n                            <React.Fragment />\n                        )}\n                    </React.Fragment>\n    */\n\n    private renderViewData(viewData: CompileJobViewerData): React.ReactNode {\n        let noJobs = false;\n        let renderFunc: () => React.ReactNode;\n        const watchdogViewData = viewData as WatchdogData;\n        const deploymentsViewData = viewData as DeploymentsData;\n        switch (viewData.viewDataType) {\n            case ViewDataType.Watchdog:\n                noJobs = !watchdogViewData.activeCompileJob;\n                renderFunc = () => this.renderWatchdog(watchdogViewData);\n                break;\n            case ViewDataType.CompileJobs:\n                noJobs =\n                    !!deploymentsViewData.compileJobs &&\n                    deploymentsViewData.compileJobs.length === 0;\n                renderFunc = () => this.renderDeployments(deploymentsViewData);\n                break;\n            default:\n                throw new Error(\"Invalid enum value for ViewDataType!\");\n        }\n\n        if (noJobs)\n            return (\n                <h1>\n                    <Badge variant=\"warning\">\n                        <FormattedMessage id=\"view.utils.deployment_viewer.no_jobs\" />\n                    </Badge>\n                </h1>\n            );\n\n        return renderFunc();\n    }\n\n    private renderTable(tableContents: React.ReactNode): React.ReactNode {\n        return (\n            <Table className=\"table table-hover\">\n                <thead>\n                    <tr>\n                        <th></th>\n                        <th></th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.id\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.byond\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.started_at\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.completed_at\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.started_by\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.project\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.revision\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.origin\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.security\" />\n                        </th>\n                        <th>\n                            <FormattedMessage id=\"view.utils.deployment_viewer.table.dmapi\" />\n                        </th>\n                    </tr>\n                </thead>\n                <tbody>{tableContents}</tbody>\n            </Table>\n        );\n    }\n\n    private renderWatchdog(viewData: WatchdogData): React.ReactNode {\n        return this.renderTable(\n            <React.Fragment>\n                <tr>\n                    <td colSpan={11}>\n                        <h3>\n                            <Badge pill variant=\"success\">\n                                <FormattedMessage id=\"view.instance.server.deployment_info.active\" />\n                            </Badge>\n                        </h3>\n                    </td>\n                </tr>\n                {this.renderCompileJob(viewData.activeCompileJob!)}\n                {viewData.stagedCompileJob ? (\n                    <React.Fragment>\n                        <tr>\n                            <td colSpan={11}>\n                                <h3>\n                                    <Badge pill variant=\"warning\">\n                                        <FormattedMessage id=\"view.instance.server.deployment_info.staged\" />\n                                    </Badge>\n                                </h3>\n                            </td>\n                        </tr>\n                        {this.renderCompileJob(viewData.stagedCompileJob)}\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n    private renderDeployments(viewData: DeploymentsData): React.ReactNode {\n        return (\n            <React.Fragment>\n                {this.renderTable(\n                    <React.Fragment>\n                        {viewData.compileJobs!.map(compileJob => this.renderCompileJob(compileJob))}\n                    </React.Fragment>\n                )}\n                <PageHelper\n                    className=\"mt-4\"\n                    selectPage={newPage => void viewData.paging.loadPage(newPage)}\n                    totalPages={viewData.paging.totalPages}\n                    currentPage={viewData.paging.currentPage}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderCompileJob(compileJob: CompileJobResponse) {\n        const engineVersion = Engine.friendlyVersion(compileJob.engineVersion);\n\n        // we use en-GB so we get the fucking SANE DD/MM/YYYY\n        const dateFormatter: Intl.DateTimeFormatOptions = {\n            day: \"2-digit\",\n            year: \"numeric\",\n            month: \"2-digit\",\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n            hour12: false,\n            timeZoneName: \"short\"\n        };\n\n        const hasTestMerges =\n            compileJob.revisionInformation.activeTestMerges &&\n            compileJob.revisionInformation.activeTestMerges.length > 0;\n        const testMergesOpen = this.state.openTestMergesId === compileJob.id;\n\n        const outOfDateDMApi =\n            !compileJob.dmApiVersion ||\n            SemverLessThan(compileJob.dmApiVersion, this.context?.serverInfo?.dmApiVersion);\n\n        return (\n            <React.Fragment>\n                <tr\n                    className=\"nowrap\"\n                    onClick={() => {\n                        if (testMergesOpen) {\n                            this.setState({\n                                openTestMergesId: null\n                            });\n                        } else if (hasTestMerges) {\n                            this.setState({\n                                openTestMergesId: compileJob.id\n                            });\n                        }\n                    }}>\n                    <td>\n                        {hasTestMerges ? (\n                            <h5\n                                style={{\n                                    whiteSpace: \"nowrap\"\n                                }}>\n                                <OverlayTrigger\n                                    overlay={\n                                        <Tooltip id={`${compileJob.id}-tooltip-test-merges`}>\n                                            <FormattedMessage\n                                                id={`view.utils.deployment_viewer.test_merges_hint.${\n                                                    testMergesOpen ? \"hide\" : \"show\"\n                                                }`}\n                                            />\n                                        </Tooltip>\n                                    }>\n                                    {({ ref, ...triggerHandler }) => (\n                                        <span\n                                            ref={ref as React.Ref<HTMLSpanElement>}\n                                            {...triggerHandler}>\n                                            <FontAwesomeIcon\n                                                icon={testMergesOpen ? faCaretDown : faCaretRight}\n                                            />\n                                        </span>\n                                    )}\n                                </OverlayTrigger>\n                            </h5>\n                        ) : null}\n                    </td>\n                    <td>\n                        {outOfDateDMApi ? (\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${compileJob.id}-tooltip-dmapi`}>\n                                        <FormattedMessage\n                                            id=\"view.utils.deployment_viewer.dmapi_outdated\"\n                                            values={{\n                                                codebase: compileJob.dmApiVersion ?? \"N/A\",\n                                                tgs: this.context.serverInfo.dmApiVersion\n                                            }}\n                                        />\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <Badge\n                                        pill\n                                        variant=\"danger\"\n                                        style={{\n                                            cursor: \"pointer\"\n                                        }}\n                                        ref={ref as React.Ref<HTMLSpanElement>}\n                                        {...triggerHandler}\n                                        onClick={(e: React.MouseEvent<HTMLSpanElement>) => {\n                                            window\n                                                .open(\n                                                    \"https://github.com/tgstation/tgstation-server/releases?q=%23tgs-dmapi-release&expanded=true\",\n                                                    \"_blank\"\n                                                )\n                                                ?.focus();\n                                            e.stopPropagation();\n                                        }}>\n                                        <FontAwesomeIcon icon={faExclamationTriangle} />\n                                    </Badge>\n                                )}\n                            </OverlayTrigger>\n                        ) : null}\n                    </td>\n                    <td>{compileJob.id}</td>\n                    <td>{engineVersion}</td>\n                    <td>\n                        {new Date(compileJob.job.startedAt).toLocaleString(\"en-CA\", dateFormatter)}\n                    </td>\n                    <td>\n                        {new Date(compileJob.job.stoppedAt!).toLocaleString(\"en-CA\", dateFormatter)}\n                    </td>\n                    <td>{compileJob.job.startedBy.name}</td>\n                    <td>{compileJob.dmeName}</td>\n                    <td>{compileJob.revisionInformation.commitSha.substring(0, 7)}</td>\n                    <td>{compileJob.revisionInformation.originCommitSha.substring(0, 7)}</td>\n                    <td>\n                        {compileJob.minimumSecurityLevel != null ? (\n                            Object.keys(DreamDaemonSecurity).filter(v => isNaN(Number(v)))[\n                                compileJob.minimumSecurityLevel\n                            ]\n                        ) : (\n                            <i>\n                                <FormattedMessage id=\"generic.not_applicable\" />\n                            </i>\n                        )}\n                    </td>\n                    <td>{compileJob.dmApiVersion}</td>\n                </tr>\n                {testMergesOpen ? (\n                    <tr>\n                        <td colSpan={10}>\n                            <Table>\n                                <thead>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.number\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.title\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.revision\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.merged_by\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.merged_at\" />\n                                    </th>\n                                    <th>\n                                        <FormattedMessage id=\"view.utils.deployment_viewer.table.pr.comment\" />\n                                    </th>\n                                </thead>\n                                <tbody>\n                                    {compileJob.revisionInformation.activeTestMerges.map(\n                                        testMerge => (\n                                            <tr\n                                                key={`test-merge-#${testMerge.number}-cj-${compileJob.id}`}>\n                                                <td>\n                                                    <a href={testMerge.url}>#{testMerge.number}</a>\n                                                </td>\n                                                <td>\n                                                    <a href={testMerge.url}>\n                                                        {testMerge.titleAtMerge}\n                                                    </a>\n                                                </td>\n                                                <td>{testMerge.targetCommitSha.substring(0, 7)}</td>\n                                                <td>{testMerge.mergedBy.name}</td>\n                                                <td>\n                                                    {new Date(testMerge.mergedAt).toLocaleString(\n                                                        \"en-CA\",\n                                                        dateFormatter\n                                                    )}\n                                                </td>\n                                                <td>\n                                                    {testMerge.comment ? (\n                                                        testMerge.comment\n                                                    ) : (\n                                                        <i>\n                                                            <FormattedMessage id=\"generic.not_applicable\" />\n                                                        </i>\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        )\n                                    )}\n                                </tbody>\n                            </Table>\n                        </td>\n                    </tr>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nDeploymentViewer.contextType = InstanceEditContext;\nexport default DeploymentViewer;\n","import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          noLocalize?: boolean;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function StringControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n                ref={ref}\n            />\n        );\n    }\n);\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function PasswordControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n                type=\"password\"\n                ref={ref}\n            />\n        );\n    }\n);\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function BooleanControl(props, ref): JSX.Element {\n        const rndId = Math.random().toString();\n        return (\n            <label\n                htmlFor={rndId}\n                className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n                <Form.Check\n                    id={rndId}\n                    checked={props.value as boolean}\n                    onChange={e => props.onChange(e.target.checked)}\n                    type=\"switch\"\n                    className=\"m-auto\"\n                    disabled={props.disabled}\n                    ref={ref}\n                />\n            </label>\n        );\n    }\n);\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(\n    function NumberControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as number}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    props.onChange(\n                        isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                    )\n                }\n                disabled={props.disabled}\n                min={props.min}\n                max={props.max}\n                type=\"number\"\n                ref={ref}\n            />\n        );\n    }\n);\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n    noLocalize?: boolean;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(\n    function EnumControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(parseInt(e.target.value))}\n                disabled={props.disabled}\n                as=\"select\"\n                custom\n                ref={ref}>\n                {Object.entries(props.enum)\n                    //filters out reverse mapping\n                    .filter(([key]) => isNaN(parseInt(key)))\n                    .map(([key, value]) => {\n                        return props.noLocalize ? (\n                            <option key={value} value={value}>\n                                {key}\n                            </option>\n                        ) : (\n                            <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                                {message => (\n                                    <option key={value} value={value}>\n                                        {message}\n                                    </option>\n                                )}\n                            </FormattedMessage>\n                        );\n                    })}\n            </Form.Control>\n        );\n    }\n);\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-50 w-xl-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon={faInfo} />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    noLocalize={props.noLocalize}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n          ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n            ExtractValues<Fields[Id][\"enum\"]>\n          : Fields[Id][\"type\"] extends FieldType.Boolean\n            ? boolean\n            : Fields[Id][\"type\"] extends FieldType.String\n              ? string\n              : Fields[Id][\"type\"] extends FieldType.Password\n                ? string\n                : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n    saveMessageId?: string;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id={props.saveMessageId ?? \"generic.save\"} />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n"],"names":["ViewDataType","DeploymentViewer","React","constructor","props","super","this","state","openTestMergesId","render","DebugJsonViewer","obj","viewData","className","FormattedMessage","id","renderViewData","Loading","text","renderFunc","noJobs","watchdogViewData","deploymentsViewData","viewDataType","Watchdog","activeCompileJob","renderWatchdog","CompileJobs","compileJobs","length","renderDeployments","Error","Badge","variant","renderTable","tableContents","Table","colSpan","pill","renderCompileJob","stagedCompileJob","map","compileJob","PageHelper","selectPage","newPage","paging","loadPage","totalPages","currentPage","engineVersion","Engine","friendlyVersion","dateFormatter","day","year","month","hour","minute","hour12","timeZoneName","hasTestMerges","revisionInformation","activeTestMerges","testMergesOpen","outOfDateDMApi","dmApiVersion","SemverLessThan","context","serverInfo","onClick","setState","style","whiteSpace","OverlayTrigger","overlay","Tooltip","ref","triggerHandler","_extends","FontAwesomeIcon","icon","faCaretDown","faCaretRight","values","codebase","tgs","cursor","e","window","open","focus","stopPropagation","faExclamationTriangle","Date","job","startedAt","toLocaleString","stoppedAt","startedBy","name","dmeName","commitSha","substring","originCommitSha","minimumSecurityLevel","Object","keys","DreamDaemonSecurity","filter","v","isNaN","Number","testMerge","key","number","href","url","titleAtMerge","targetCommitSha","mergedBy","mergedAt","comment","contextType","InstanceEditContext","FieldType","StringControl","Form","Control","value","onChange","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","Check","checked","NumberControl","valueAsNumber","min","max","EnumControl","parseInt","as","custom","entries","enum","noLocalize","message","defaultValues","Enum","Boolean","String","Password","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","undefined","changed","InputGroup","innerid","tooltip","show","Prepend","Text","visibility","faInfo","newValue","Append","Button","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","some","innerProps","readOnly","newVal","isValid","save","outputObject","alwaysInclude","includeAll","onSave","saveMessageId"],"sourceRoot":""}