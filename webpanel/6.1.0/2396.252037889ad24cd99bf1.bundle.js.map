{"version":3,"file":"2396.252037889ad24cd99bf1.bundle.js","mappings":"6hBAeO,IAAKA,EAAS,SAATA,GAAS,OAATA,EAAS,kBAATA,EAAS,gBAATA,EAAS,gBAATA,EAAS,oBAATA,EAAS,YAATA,CAAS,MAsDrB,MAAMC,EAAgBC,EAAAA,YAClB,SAAuBC,EAAOC,GAC1B,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOH,OACvCI,SAAUR,EAAMQ,SAChBP,IAAKA,GAGjB,IAGEQ,EAAkBV,EAAAA,YACpB,SAAyBC,EAAOC,GAC5B,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOH,OACvCI,SAAUR,EAAMQ,SAChBE,KAAK,WACLT,IAAKA,GAGjB,IAGEU,EAAiBZ,EAAAA,YACnB,SAAwBC,EAAOC,GAC3B,MAAMW,EAAQC,KAAKC,SAASC,WAC5B,OACIhB,EAAAA,cAAA,SACIiB,QAASJ,EACTK,UAAU,sEACVlB,EAAAA,cAACG,EAAAA,EAAKgB,MAAK,CACPC,GAAIP,EACJQ,QAASpB,EAAMI,MACfC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOa,SACvCV,KAAK,SACLO,UAAU,SACVT,SAAUR,EAAMQ,SAChBP,IAAKA,IAIrB,IAOEoB,EAAgBtB,EAAAA,YAClB,SAAuBC,EAAOC,GAC1B,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAWC,GACPN,EAAMK,SACFiB,MAAMhB,EAAEC,OAAOgB,eAAiBjB,EAAEC,OAAOH,MAAQE,EAAEC,OAAOgB,eAGlEf,SAAUR,EAAMQ,SAChBgB,IAAKxB,EAAMwB,IACXC,IAAKzB,EAAMyB,IACXf,KAAK,SACLT,IAAKA,GAGjB,IAOEyB,EAAc3B,EAAAA,YAChB,SAAqBC,EAAOC,GACxB,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASsB,SAASrB,EAAEC,OAAOH,QAChDI,SAAUR,EAAMQ,SAChBoB,GAAG,SACHC,QAAM,EACN5B,IAAKA,GACJ6B,OAAOC,QAAQ/B,EAAMgC,MAEjBC,QAAO,EAAEC,KAASZ,MAAMK,SAASO,MACjCC,KAAI,EAAED,EAAK9B,KACDJ,EAAMoC,WACTrC,EAAAA,cAAA,UAAQmC,IAAK9B,EAAOA,MAAOA,GACtB8B,GAGLnC,EAAAA,cAACsC,EAAAA,EAAgB,CAAClB,GAAI,GAAGnB,EAAMsC,QAAQJ,IAAOA,IAAKA,IAC9CK,GACGxC,EAAAA,cAAA,UAAQmC,IAAK9B,EAAOA,MAAOA,GACtBmC,OAQrC,IAGSC,EAAoD,CAC7D,CAAC3C,EAAU4C,MAAO,EAClB,CAAC5C,EAAU6C,QAAS,EACpB,CAAC7C,EAAU8C,UAAU,EACrB,CAAC9C,EAAU+C,QAAS,GACpB,CAAC/C,EAAUgD,UAAW,IAGX,SAASC,EAAW9C,GAC/B,MAAO+C,EAAcC,IAAmBC,EAAAA,EAAAA,UACpCjD,EAAMkD,cAAgBV,EAAcxC,EAAMU,OAExCyC,GAAaC,EAAAA,EAAAA,QAAyB,OAC5CC,EAAAA,EAAAA,YAAU,KACNL,EAAgBhD,EAAMkD,cAAgBV,EAAcxC,EAAMU,MAAM,GAEjE,CAACV,EAAMkD,gBAEVG,EAAAA,EAAAA,YAAU,KASN,OARIF,EAAWG,UACPH,EAAWG,QAAQC,gBACnBJ,EAAWG,QAAQE,UAAUC,OAAO,cAEpCN,EAAWG,QAAQE,UAAUE,IAAI,eAIjC1D,EAAMU,MACV,KAAKb,EAAU8C,QAMf,KAAK9C,EAAU4C,KACf,KAAK5C,EAAU6C,OAGf,KAAK7C,EAAU+C,OACf,KAAK/C,EAAUgD,SAEX,YADA7C,EAAMK,SAAS0C,EAAwBI,EAAWG,SAASC,kBAAmB,GAEtF,GAED,CAACR,IAEJ,MAUMY,EAIF,CACAC,OAAQ9D,EACR+D,SAAUpD,EACVqD,QAASnD,EACT,CAACd,EAAU6C,aAASqB,EACpB,CAAClE,EAAU4C,WAAOsB,GAGhBC,EAAUjB,IAAiB/C,EAAMkD,cAAgBV,EAAcxC,EAAMU,OAE3E,OACIX,EAAAA,cAACkE,EAAAA,EAAU,KACPlE,EAAAA,cAACmE,EAAAA,EAAc,CACXC,SA3BKC,EA2BYpE,EAAMqE,QA1B1BD,EAGDrE,EAAAA,cAACuE,EAAAA,EAAO,CAACnD,GAAIiD,GACTrE,EAAAA,cAACsC,EAAAA,EAAgB,CAAClB,GAAIiD,KAJTrE,EAAAA,cAACA,EAAAA,SAAc,OA2B5BwE,OAAMvE,EAAMqE,cAAUN,IACrB,EAAG9D,SAAQuE,KACRzE,EAAAA,cAACkE,EAAAA,EAAWQ,QAAO,CAACxD,UAAU,gBAC1BlB,EAAAA,cAACkE,EAAAA,EAAWS,KAAIC,EAAA,CAAC1D,UAAU,eAAkBuD,GACzCzE,EAAAA,cAAA,QAAMkB,UAAW+C,EAAU,mBAAqB,IAC5CjE,EAAAA,cAACsC,EAAAA,EAAgB,CAAClB,GAAInB,EAAMsC,QAEhCvC,EAAAA,cAAA,OAAKkB,UAAU,WACVjB,EAAMQ,SAAWT,EAAAA,cAACsC,EAAAA,EAAgB,CAAClB,GAAG,qBAAwB,KAC/DpB,EAAAA,cAAA,OACIE,IAAKA,EACLgB,UAAU,sBACV2D,MAAO,CAAEC,WAAY7E,EAAMqE,QAAU,QAAU,WAC/CtE,EAAAA,cAAC+E,EAAAA,EAAe,CAACC,KAAMC,EAAAA,YAO9ChF,EAAMU,OAASb,EAAU6C,OACtB3C,EAAAA,cAACsB,EAAa,CACVjB,MAAO2C,EACP1C,SAAU4E,GAAYjC,EAAgBiC,GACtC3C,KAAMtC,EAAMsC,KACZ9B,SAAUR,EAAMQ,SAChBiB,IAAKzB,EAAMyB,IACXD,IAAKxB,EAAMwB,IACXvB,IAAKkD,IAETnD,EAAMU,OAASb,EAAU4C,KACzB1C,EAAAA,cAAC2B,EAAW,CACRtB,MAAO2C,EACP1C,SAAU4E,GAAYjC,EAAgBiC,GACtC3C,KAAMtC,EAAMsC,KACZN,KAAMhC,EAAMgC,KACZI,WAAYpC,EAAMoC,WAClB5B,SAAUR,EAAMQ,WAGpBT,EAAAA,cACI4D,EAAc3D,EAAMU,MACpB,CACIN,MAAO2C,EACP1C,SAAU4E,GAAYjC,EAAgBiC,GACtCzE,SAAUR,EAAMQ,SAChB8B,KAAMtC,EAAMU,KACZT,IAAKkD,IAKjBpD,EAAAA,cAACkE,EAAAA,EAAWiB,OAAM,KACdnF,EAAAA,cAACoF,EAAAA,EAAM,CACHP,MAAO,CAAEC,YAAab,GAAWhE,EAAMQ,SAAW,cAAWuD,GAC7DqB,QAAQ,SACRC,QAASA,IACLrC,EAAgBhD,EAAMkD,cAAgBV,EAAcxC,EAAMU,QAE9DX,EAAAA,cAAC+E,EAAAA,EAAe,CAACC,KAAK,YAvFrBX,KA4FrB,C,+UC7Qe,SAASkB,EACpBtF,GAEA,MAAMuF,EAAmB,IAAIC,IAIvBC,EAAgB,IAAID,KACnBE,EAAaC,IAAkB1C,EAAAA,EAAAA,UAAiD,CAAC,IAExFI,EAAAA,EAAAA,YAAU,KACNvB,OAAO8D,KAAK5F,EAAM6F,QAAQC,SAAQ3E,IAC9BwE,GAAeI,IAAa,IACrBA,EACH,CAAC5E,GAAK,CAAC,KACR,GACL,GAGH,IAEH,IAAK,MAAOA,EAAI6E,KAAUlE,OAAOC,QAAQ/B,EAAM6F,QAC3CJ,EAAcQ,IAAI9E,EAAI6E,GACtBT,EAAiBU,IACbD,GAGA/C,EAAAA,EAAAA,UAA0B+C,EAAM9C,cAAgBV,EAAAA,GAAcwD,EAAMtF,QAI5E,IAAIwF,GAAU,EACVC,GAAa,EACjB,IAAK,MAAOhF,EAAIiF,KAAoBX,EAAe,CAC/C,MAAOY,GAAcd,EAAiBe,IAAIF,GACpCG,EAAab,EAAYvE,GAK/B,IAJKiF,EAAgBlD,cAAgBV,EAAAA,GAAc4D,EAAgB1F,QAAU2F,IACzEH,GAAU,GACVK,GAAYC,UAASL,GAAa,GAElCD,GAAWC,EAAY,KAC/B,CAuBA,OAAInG,EAAMyG,eACD3E,OAAO4E,OAAO1G,EAAM6F,QAAQc,MAAKX,IAAUA,EAAMxF,WAC3CT,EAAAA,cAAAA,EAAAA,SAAA,MAKXA,EAAAA,cAAA,WACK+B,OAAOC,QAAQ/B,EAAM6F,QAAQ1D,KAAI,EAAEhB,EAAI6E,MACpC,MAAM,SAAExF,KAAaoG,GAAeZ,EACpC,OAAIhG,EAAMyG,cAAgBjG,EAAiB,KAGvCT,EAAAA,cAAC+C,EAAAA,GAAU6B,EAAA,CACPzC,IAAKf,GACDyF,EAAU,CACdpG,SAAUR,EAAM6G,UAAYrG,EAC5BH,SAAUA,CAACyG,EAAyBC,KAChCxB,EAAiBe,IAAIN,GAAQ,GAAGc,GAChCnB,GAAeI,IAAa,IACrBA,EACH,CAAC5E,GAAK,IACC4E,EAAU5E,GACbqF,SAAUO,MAEf,IAET,IAGVhH,EAAAA,cAAA,OAAKkB,UAAU,oBACXlB,EAAAA,cAACmE,EAAAA,EAAc,CACXC,QACIpE,EAAAA,cAACuE,EAAAA,EAAO,CAACnD,GAAI,gBACTpB,EAAAA,cAACsC,EAAAA,EAAgB,CAAClB,GAAG,0BAG7BoD,OAAM4B,QAAapC,GACnBhE,EAAAA,cAACoF,EAAAA,EAAM,CACHC,QAASpF,EAAM6G,UAAYV,EAAa,SAAW,UACnD3F,SAAUR,EAAM6G,WAAaX,GAAWC,EACxCd,QA9DP2B,KACT,MAAMC,EAAgD,CAAC,EAEvD,IAAK,MAAO9F,EAAIiF,KAAoBX,EAAe,CAC/C,MAAOY,GAAcd,EAAiBe,IAAIF,IAGrCA,EAAgBc,eACjBb,IACKD,EAAgBlD,cAAgBV,EAAAA,GAAc4D,EAAgB1F,QAClEV,EAAMmH,cAIXF,EAAa9F,GAAMkF,EACvB,CAEArG,EAAMoH,OAAOH,EAAa,GA8CVlH,EAAAA,cAACsC,EAAAA,EAAgB,CAAClB,GAAInB,EAAMqH,eAAiB,oBAMrE,C,kGC1Je,SAASC,EAAWtH,GAC/B,OACID,EAAAA,cAACwH,IAAS,CACNC,IAAKxH,EAAMyH,IACXnF,KAAM,OACNoF,MAAM,OACNC,UAAU,WACVC,WAAS,EACTC,kBAAkB,GAG9B,CAEO,SAASC,EAAgB9H,GAC5B,OAAK+H,EAAAA,GAAcC,SAAS5H,MAIxBL,EAAAA,cAAA,OAAKkB,UAAU,aACXlB,EAAAA,cAACuH,EAAU,CAACG,IAAKzH,EAAMyH,OAJpB1H,EAAAA,cAAAA,EAAAA,SAAA,KAOf,C,uDCIO,MAAMkI,E,QAAsBlI,mBAC/BgE,E,2GCqBJmE,eAAeC,EAAKC,EAAcC,EAAYC,GAC1C,MAAMC,EAAWH,EAAQG,SAASC,MAAMH,EAAiBC,GAMzD,OAJIP,EAAAA,GAAcU,YAAYrI,QAC1BmI,EAASG,QAAQC,cAAgB,SAASZ,EAAAA,GAAcU,YAAYrI,SAGjEgI,EAAQG,EACnB,CAEAL,eAAeU,IACX,OAAIb,EAAAA,GAAcU,YAAYrI,MACnB,CACHM,KAAM,QACNmI,UAAW,MACXC,MAAOf,EAAAA,GAAcU,YAAYrI,OAG9B,CACHM,KAAM,kBAGlB,CAEA,MAAMqI,EAAeA,IACVjH,OAAOkH,OAAOJ,EAAKK,KAAK,MAAO,CAClCd,KAAMA,EAAKc,KAAK,QAMlB3I,EAAI,IAAK,cAA2B4I,EAAAA,aAG/BC,WAAAA,GACHC,QAAQ,KAHKC,eAAS,EAKtB,MAAMC,EAAOC,EAAAA,EAAQC,OAAOC,EAAAA,EAAOC,EAAAA,GAEnCC,KAAKN,UAAY,IAAIC,EAAK,CACtBP,eACAa,UAAW,kCAAoCC,EAAAA,GAC/CC,QAAS,yBACTC,SAAU,CACNC,YAAaA,CAACC,EAAoBC,KAC9BC,QAAQC,KACJ,uCAAuCF,EAAQG,UAAUH,EAAQI,OAGlC,IAA/BJ,EAAQ9B,QAAQmC,aAEhBJ,QAAQK,IAAI,kBAAkBP,eACvB,IAIfQ,qBAAsBA,CAACC,EAAWR,KAE9BC,QAAQC,KAAK,8BAA8BF,EAAQG,UAAUH,EAAQI,MAAM,IAI3F,CAEA,4BAAaK,CACTC,EACAC,GAEA,IACI,MAAMC,QAAiBnB,KAAKN,UAAU0B,MAAMzE,IAAI,CAC5CsE,QACAC,SAGEG,QAAerB,KAAKN,UAAU0B,MAAME,UAAU,CAChDL,QACAC,OACAG,OAAQF,EAASI,KAAKC,iBAG1B,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,GACjBC,QAASR,EAAOE,KAAKO,OAAOC,KAEpC,CAAE,MAAOpL,GACL,OAAO,IAAI8K,EAAAA,EAA8C,CACrDC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS1L,KAGrB,CACJ,CAEA,iBAAa2L,EAAY,MACrBrB,EAAK,KACLC,EAAI,QACJvH,EAAO,IACP4I,IAOA,IAAIV,EACAW,EAAc,EAClB,IACIX,QAAgB7B,KAAKN,UAAU+C,SAC3BzC,KAAKN,UAAU0B,MAAMsB,aACrB,CAAEzB,QAAOC,SACT,CAACyB,EAAUC,IACAD,EAASpB,KAAKsB,QAAO,CAACC,EAAQC,KACjC,MAAMC,EAAQ,6BAA6BC,KAAKF,EAAQpK,MAAQ,IAChE,IAAKqK,EAAO,OAAOF,EAGnB,GADqB9K,SAASgL,EAAM,GAAG,IACpB,EAAG,OAAOF,EAE7B,MAAMI,EAAUF,EAAM,GACtB,IAAIG,GAAM,EAGV,GAAID,GAAWvJ,EAAS,CACpB,GAAI6I,GAAe,IAAMD,EAErB,OADCK,IACME,EAEXN,IACAW,GAAM,CACV,CAQA,OANAL,EAAOM,KAAK,CACRF,UACAG,KAAMN,EAAQM,MAAQ,GACtB1J,QAASuJ,IAAYvJ,EACrBwJ,QAEGL,CAAM,GACd,KAGf,CAAE,MAAOnM,GACL,OAAO,IAAI8K,EAAAA,EAAoD,CAC3DC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS1L,KAGrB,CACA,OAAO,IAAI8K,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,GACjBC,WAER,CAEQyB,WAAAA,CAAYC,GAChB,MAAO,CACHC,OAAQD,EAAGC,OACXC,MAAOF,EAAGE,MACVC,OAAQH,EAAGI,MAAMC,OAAS,QAC1BC,MAAON,EAAGO,UAAY,SAAYP,EAAGM,MACrCE,KAAMR,EAAGS,SACTC,KAAMV,EAAGU,KAAKlC,IACdmC,KAAMX,EAAGY,KAAKpC,IACdqC,eAAgBb,EAAGc,OAAOrH,MACtBsH,GACIA,EAAM3L,MAAM4L,cAAcC,SAAS,cACnCF,EAAM3L,MAAM4L,cAAcC,SAAS,gBAGnD,CAEA,YAAaC,EAAO,MAChBxD,EAAK,KACLC,EAAI,UACJwD,IAMA,IAAI7C,EAAyB,GAC7B,IACIA,SACU7B,KAAKN,UAAU+C,SAASzC,KAAKN,UAAUiF,MAAMC,KAAM,CACrD3D,QACAC,OACA2C,MAAO,UAEbrL,IAAIwH,KAAKsD,aAEX,IAAK,MAAMuB,KAAYH,GAAa,GAChC,IAAK7C,EAAQiD,MAAKvB,GAAMA,EAAGC,QAAUqB,IAAW,CAC5C,MAAMtB,SACIvD,KAAKN,UAAUiF,MAAMhI,IAAI,CAC3BsE,QACAC,OACA6D,YAAaF,KAEnBtD,KACFM,EAAQuB,KAAKpD,KAAKsD,YAAYC,GAClC,CAER,CAAE,MAAO5M,GAEL,OADA6J,QAAQyB,MAAMtL,GACP,IAAI8K,EAAAA,EAAqD,CAC5DC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS1L,KAGrB,CACA,OAAO,IAAI8K,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,GACjBC,WAER,CAEA,kBAAamD,EAAa,MACtB/D,EAAK,KACLC,EAAI,GACJqC,EAAE,aACF0B,IAOA,IACIC,EADArD,EAAoB,GAExB,IAoBI,GAnBAA,QAAgB7B,KAAKN,UAAU+C,SAC3BzC,KAAKN,UAAUiF,MAAMQ,YACrB,CACIlE,QACAC,OACA6D,YAAaxB,EAAGC,OAChB4B,SAAU,MAEd,EAAG7D,UACCA,EAAK/I,KAAIsJ,IAAU,CACfnJ,KAAMmJ,EAAOA,OAAOlJ,QAAQyM,MAAM,MAAM,GACxCtD,IAAKD,EAAOC,IACZpB,IAAKmB,EAAOkC,eAKxBnC,EAAQyD,UAEJL,IAAiBpD,EAAQiD,MAAKhD,GAAUA,EAAOC,MAAQkD,IAAe,CACtE,MAAMM,SACIvF,KAAKN,UAAU0B,MAAMoE,UAAU,CACjCvE,QACAC,OACA5K,IAAK2O,KAEX1D,KACF2D,EAAc,CACVvM,KAAM4M,EAAazD,OAAOlJ,QAAQyM,MAAM,MAAM,GAC9CtD,IAAKwD,EAAaxD,IAClBpB,IAAK4E,EAAavB,SAE1B,CACJ,CAAE,MAAOrN,GAEL,OADA6J,QAAQyB,MAAMtL,GACP,IAAI8K,EAAAA,EAGT,CACEC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS1L,KAGrB,CACA,OAAO,IAAI8K,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,GACjBC,QAAS,CAACA,EAASqD,IAE3B,CAEA,aAAaO,CACTxE,EACAC,EACAwE,EACApP,GAEA,IACI,MAAM,KAAEiL,SAAevB,KAAKN,UAAU0B,MAAMuE,WAAW,CACnDC,UAAW,CACPC,OAAQ,UAEZ5E,QACAC,OACAwE,OACApP,QAIJ,GAAIwP,MAAMC,QAAQxE,GACd,OAAO,IAAIE,EAAAA,EAA8C,CACrDC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS,IAAI2D,MAAM,GAAGN,0BAKlC,GAAkB,SAAdnE,EAAKxK,KACL,OAAO,IAAI0K,EAAAA,EAA8C,CACrDC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS,IAAI2D,MAAM,GAAGN,cAAiBnE,EAAKxK,aAMxD,MAAMkP,EAAO1E,EAAa2E,QAE1B,OAAO,IAAIzE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,GACjBC,QAASoE,GAEjB,CAAE,MAAOtP,GAEL,OADA6J,QAAQyB,MAAMtL,GACP,IAAI8K,EAAAA,EAA8C,CACrDC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS1L,KAGrB,CACJ,CAEA,0BAAawP,CACTlF,EACAC,EACAwE,EACApP,GAEA,IACI,MAAM,KAAEiL,SAAevB,KAAKN,UAAU0B,MAAMuE,WAAW,CACnD1E,QACAC,OACAwE,OACApP,QAIJ,IAAKwP,MAAMC,QAAQxE,GACf,OAAO,IAAIE,EAAAA,EAAuD,CAC9DC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS,IAAI2D,MAAM,GAAGN,8BAKlC,MAAM5C,EAA0B,GAQhC,OAPAvB,EAAKpF,SAAQiK,GACTtD,EAAOM,KAAK,CACRsC,KAAMU,EAAQV,KACdW,YAA6B,OAAhBD,EAAQrP,SAItB,IAAI0K,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,GACjBC,QAASiB,GAEjB,CAAE,MAAOnM,GAEL,OADA6J,QAAQyB,MAAMtL,GACP,IAAI8K,EAAAA,EAAuD,CAC9DC,KAAMC,EAAAA,EAAWK,MACjBC,MAAO,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,YAAa,CAC5CC,QAAS1L,KAGrB,CACJ,GAEJ,K","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          noLocalize?: boolean;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function StringControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n                ref={ref}\n            />\n        );\n    }\n);\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function PasswordControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n                type=\"password\"\n                ref={ref}\n            />\n        );\n    }\n);\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function BooleanControl(props, ref): JSX.Element {\n        const rndId = Math.random().toString();\n        return (\n            <label\n                htmlFor={rndId}\n                className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n                <Form.Check\n                    id={rndId}\n                    checked={props.value as boolean}\n                    onChange={e => props.onChange(e.target.checked)}\n                    type=\"switch\"\n                    className=\"m-auto\"\n                    disabled={props.disabled}\n                    ref={ref}\n                />\n            </label>\n        );\n    }\n);\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(\n    function NumberControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as number}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    props.onChange(\n                        isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                    )\n                }\n                disabled={props.disabled}\n                min={props.min}\n                max={props.max}\n                type=\"number\"\n                ref={ref}\n            />\n        );\n    }\n);\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n    noLocalize?: boolean;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(\n    function EnumControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(parseInt(e.target.value))}\n                disabled={props.disabled}\n                as=\"select\"\n                custom\n                ref={ref}>\n                {Object.entries(props.enum)\n                    //filters out reverse mapping\n                    .filter(([key]) => isNaN(parseInt(key)))\n                    .map(([key, value]) => {\n                        return props.noLocalize ? (\n                            <option key={value} value={value}>\n                                {key}\n                            </option>\n                        ) : (\n                            <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                                {message => (\n                                    <option key={value} value={value}>\n                                        {message}\n                                    </option>\n                                )}\n                            </FormattedMessage>\n                        );\n                    })}\n            </Form.Control>\n        );\n    }\n);\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-50 w-xl-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon={faInfo} />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    noLocalize={props.noLocalize}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n          ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n            ExtractValues<Fields[Id][\"enum\"]>\n          : Fields[Id][\"type\"] extends FieldType.Boolean\n            ? boolean\n            : Fields[Id][\"type\"] extends FieldType.String\n              ? string\n              : Fields[Id][\"type\"] extends FieldType.Password\n                ? string\n                : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n    saveMessageId?: string;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id={props.saveMessageId ?? \"generic.save\"} />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    undefined as unknown as InstanceEditContext\n);\n","/* eslint-disable import/no-unresolved */\nimport { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { EndpointDefaults } from \"@octokit/types\";\n/* eslint-enable import/no-unresolved */\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n}\n\ntype ExtractArrayType<A> = A extends Array<infer ArrayType> ? ArrayType : never;\nexport type GithubPullRequest = ExtractArrayType<\n    RestEndpointMethodTypes[\"pulls\"][\"list\"][\"response\"][\"data\"]\n>;\nexport type FullGithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ntype IEvents = object;\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (retryAfter: number, options: Required<EndpointDefaults>) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onSecondaryRateLimit: (_: number, options: Required<EndpointDefaults>) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getLatestDefaultCommit(\n        owner: string,\n        repo: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const repoData = await this.apiClient.repos.get({\n                owner,\n                repo\n            });\n\n            const branch = await this.apiClient.repos.getBranch({\n                owner,\n                repo,\n                branch: repoData.data.default_branch\n            });\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: branch.data.commit.sha\n            });\n        } catch (e) {\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n\n                        const majorVersion = parseInt(match[1][0]);\n                        if (majorVersion < 4) return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: FullGithubPullRequest | GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : (pr.state as \"open\" | \"closed\"),\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            )\n        };\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            payload = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(this.transformPR);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!payload.find(pr => pr.number == wantedPR)) {\n                    const pr = (\n                        await this.apiClient.pulls.get({\n                            owner,\n                            repo,\n                            pull_number: wantedPR\n                        })\n                    ).data;\n                    payload.push(this.transformPR(pr));\n                }\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["FieldType","StringControl","React","props","ref","Form","Control","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","Check","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","noLocalize","FormattedMessage","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","undefined","changed","InputGroup","OverlayTrigger","overlay","innerid","tooltip","Tooltip","show","triggerHandler","Prepend","Text","_extends","style","visibility","FontAwesomeIcon","icon","faInfo","newValue","Append","Button","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","save","outputObject","alwaysInclude","includeAll","onSave","saveMessageId","JsonViewer","ReactJson","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","showjson","InstanceEditContext","async","hook","request","route","parameters","endpoint","merge","githubtoken","headers","authorization","auth","tokenType","token","authStrategy","assign","bind","TypedEmitter","constructor","super","apiClient","octo","Octokit","plugin","retry","throttling","this","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","console","warn","method","url","retryCount","log","onSecondaryRateLimit","_","getLatestDefaultCommit","owner","repo","repoData","repos","branch","getBranch","data","default_branch","InternalStatus","code","StatusCode","OK","payload","commit","sha","ERROR","error","InternalError","ErrorCode","GITHUB_FAIL","jsError","getVersions","all","oldversions","paginate","listReleases","response","done","reduce","result","release","match","exec","version","old","push","body","transformPR","pr","number","title","author","user","login","state","merged_at","link","html_url","head","tail","base","testmergelabel","labels","label","toLowerCase","includes","getPRs","wantedPRs","pulls","list","wantedPR","find","pull_number","getPRCommits","wantedCommit","extraCommit","listCommits","per_page","split","reverse","_extraCommit","getCommit","getFile","path","getContent","mediaType","format","Array","isArray","Error","raw","content","getDirectoryContents","element","isDirectory"],"sourceRoot":""}