{"version":3,"file":"3649.6f23abf06d3e5490370e.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/SimpleTooltip.tsx","webpack://tgstation-server-control-panel/./src/components/utils/TestMergeRow.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Repository.tsx"],"sourcesContent":["import React from \"react\";\nimport { OverlayTrigger } from \"react-bootstrap\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    tooltipid: string;\n    children: JSX.Element;\n    show: boolean | undefined;\n};\n\nexport default function SimpleToolTip(props: IProps): JSX.Element {\n    return (\n        <OverlayTrigger\n            show={props.show}\n            overlay={\n                <Tooltip id={props.tooltipid}>\n                    <FormattedMessage id={props.tooltipid} />\n                </Tooltip>\n            }>\n            {props.children}\n        </OverlayTrigger>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Collapse } from \"react-bootstrap\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport SelectSearch, { fuzzySearch, SelectedOptionValue } from \"react-select-search\";\n\nimport {\n    RepositoryResponse,\n    RepositoryRights,\n    TestMerge\n} from \"../../ApiClient/generatedcode/generated\";\nimport InternalError from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport GithubClient, { Commit, PullRequest } from \"../../utils/GithubClient\";\nimport { hasRepoRight } from \"../../utils/misc\";\nimport InputField, { FieldType } from \"./InputField\";\nimport Loading from \"./Loading\";\nimport SimpleToolTip from \"./SimpleTooltip\";\n\ninterface IProps {\n    pr: PullRequest;\n    testmergeinfo?: TestMerge;\n    repoInfo: RepositoryResponse;\n    finalState: [commit: string, comment: string] | false;\n    onRemove: () => unknown;\n    onSelectCommit: (commit: string, comment: string | null) => unknown;\n    onError: (error: InternalError) => unknown;\n}\n\nexport default function TestMergeRow({\n    pr,\n    testmergeinfo,\n    repoInfo,\n    finalState,\n    onRemove,\n    onSelectCommit,\n    onError\n}: IProps): JSX.Element {\n    const [showDetails, _setShowDetails] = useState(false);\n    const setShowDetails = (_newVal: ((prevState: boolean) => boolean) | boolean) => {\n        _setShowDetails(prevState => {\n            let newVal;\n            if (typeof _newVal === \"boolean\") {\n                newVal = _newVal;\n            } else {\n                newVal = _newVal(prevState);\n            }\n            if (newVal) void loadCommits();\n            return newVal;\n        });\n    };\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCommit, setSelectedCommit] = useState<string>(pr.head);\n    const [comment, setComment] = useState(finalState ? finalState[1] : \"\");\n    const [commits, setCommits] = useState<Map<string, Commit> | null>(null);\n    const [extraCommit, setExtraCommit] = useState<Commit | null>(null);\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const loadCommits = useCallback(\n        async (force?: boolean) => {\n            if (commits && !force) return;\n\n            const response = await GithubClient.getPRCommits({\n                //Repo info should be set if we are here\n                owner: repoInfo.remoteRepositoryOwner!,\n                repo: repoInfo.remoteRepositoryName!,\n                pr: pr,\n                wantedCommit: testmergeinfo?.targetCommitSha\n            });\n            if (response.code === StatusCode.ERROR) {\n                onError(response.error);\n            } else {\n                const commitMap = new Map();\n                response.payload[0].forEach(commit => commitMap.set(commit.sha, commit));\n                setCommits(commitMap);\n                setExtraCommit(response.payload[1] ?? null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            repoInfo.remoteRepositoryOwner,\n            repoInfo.remoteRepositoryName,\n            pr.head,\n            testmergeinfo?.targetCommitSha\n        ]\n    );\n    useEffect(() => (showDetails ? void loadCommits() : void 0), [showDetails, loadCommits]);\n    useEffect(() => (showModal ? void loadCommits() : void 0), [showModal, loadCommits]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => setShowDetails(false), [finalState]);\n    useEffect(() => setComment(finalState ? finalState[1] : \"\"), [finalState]);\n\n    const colorMap: Record<typeof pr.state, string> = {\n        closed: \"#c93c37\",\n        merged: \"#8256d0\",\n        open: \"#347d39\"\n    };\n    let activeCommit: Commit | undefined = undefined;\n    if (testmergeinfo) {\n        if (commits?.has(testmergeinfo.targetCommitSha)) {\n            activeCommit = commits?.get(testmergeinfo.targetCommitSha);\n        } else if (extraCommit?.sha === testmergeinfo.targetCommitSha) {\n            activeCommit = extraCommit;\n        }\n    }\n    const commitOptions = [...(commits ?? []).values()].map(commit => ({\n        name: commit.name,\n        value: commit.sha,\n        current: commit.sha === testmergeinfo?.targetCommitSha,\n        latest: commit.sha === pr.head,\n        disabled: false\n    }));\n    if (extraCommit) {\n        commitOptions.push({\n            name: \"...\",\n            value: \"\",\n            current: false,\n            latest: false,\n            disabled: true\n        });\n        commitOptions.push({\n            name: extraCommit.name,\n            value: extraCommit.sha,\n            current: extraCommit.sha === testmergeinfo?.targetCommitSha,\n            latest: extraCommit.sha === pr.head,\n            disabled: false\n        });\n    }\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canReset =\n        (hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.UpdateBranch\n            )) ||\n        //Allow updating and removing pending PRs\n        !testmergeinfo;\n\n    return (\n        <>\n            <tr>\n                <td className={\"text-right\" + (finalState ? \" font-weight-bold\" : \"\")}>\n                    #{pr.number}\n                </td>\n                <td>\n                    <Badge\n                        pill\n                        className=\"text-white text-capitalize mr-2\"\n                        style={{ backgroundColor: colorMap[pr.state] }}>\n                        {pr.state}\n                    </Badge>\n                    {pr.testmergelabel ? (\n                        <Badge pill className=\"text-white text-capitalize mr-2\" variant=\"primary\">\n                            <FormattedMessage id=\"view.instance.repo.testmergelabel\" />\n                        </Badge>\n                    ) : null}\n                </td>\n                <td>\n                    <a href={pr.link} target=\"_blank\" rel=\"noreferrer\">\n                        {pr.title}\n                    </a>\n                </td>\n                <td className=\"font-italic\">{pr.author}</td>\n\n                <td>\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-inline-block text-nowrap\">\n                            {finalState ? (\n                                <>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canReset ? false : undefined}>\n                                        <Button\n                                            variant=\"danger\"\n                                            className=\"mx-1\"\n                                            onClick={onRemove}\n                                            disabled={!canReset}>\n                                            <FontAwesomeIcon icon=\"minus\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canAdd && canReset ? false : undefined}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={e =>\n                                                e.shiftKey\n                                                    ? onSelectCommit(\n                                                          pr.head,\n                                                          testmergeinfo?.comment ?? null\n                                                      )\n                                                    : setShowModal(true)\n                                            }\n                                            variant={finalState[0] === pr.head ? \"primary\" : \"info\"}\n                                            //To update, you have to reset and reapply the TM so you need both\n                                            disabled={!canAdd || !canReset}>\n                                            <FontAwesomeIcon icon=\"sync\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    {testmergeinfo ? (\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => setShowDetails(val => !val)}\n                                            active={showDetails}>\n                                            <FontAwesomeIcon icon=\"info\" fixedWidth />\n                                        </Button>\n                                    ) : null}\n                                </>\n                            ) : (\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        variant=\"success\"\n                                        className=\"mx-1\"\n                                        disabled={!canAdd}\n                                        onClick={e =>\n                                            e.shiftKey\n                                                ? onSelectCommit(pr.head, null)\n                                                : setShowModal(true)\n                                        }>\n                                        <FontAwesomeIcon icon=\"plus\" fixedWidth />\n                                    </Button>\n                                </SimpleToolTip>\n                            )}\n                        </div>\n                    </div>\n                </td>\n            </tr>\n\n            <tr>\n                <td className=\"py-0 border-top-0\" />\n                <td colSpan={4} className=\"py-0 border-top-0\">\n                    {testmergeinfo ? (\n                        <Collapse in={showDetails}>\n                            <div>\n                                <div className=\"py-3\">\n                                    <table className=\"reset-table\">\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.by\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.mergedBy.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.comment\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.comment}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.commit\" />\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    {activeCommit ? (\n                                                        <>\n                                                            {activeCommit.name}\n                                                            <a\n                                                                className=\"ml-1\"\n                                                                href={activeCommit.url}\n                                                                target=\"_blank\"\n                                                                rel=\"noreferrer\">\n                                                                (\n                                                                {testmergeinfo.targetCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )}\n                                                                )\n                                                            </a>\n                                                        </>\n                                                    ) : (\n                                                        testmergeinfo.targetCommitSha.substring(\n                                                            0,\n                                                            7\n                                                        )\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </Collapse>\n                    ) : null}\n                </td>\n            </tr>\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.title\" />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>\n                        <a\n                            href={pr.link}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            className=\"text-decoration-none\">\n                            {pr.title}\n                        </a>\n                    </h5>\n                    <FormattedMessage id=\"view.instance.repo.tm.modal.label\" />\n                    {commits ? (\n                        <SelectSearch\n                            filterOptions={fuzzySearch}\n                            search\n                            options={commitOptions}\n                            value={selectedCommit ?? activeCommit?.sha}\n                            autoComplete=\"on\"\n                            //@ts-expect-error error in the library, it's the wrong type\n                            renderOption={(\n                                props,\n                                option: SelectedOptionValue & { current: boolean; latest: boolean },\n                                snapshot,\n                                className\n                            ) => (\n                                //@ts-expect-error error in the library, it's the wrong type\n                                <button\n                                    type=\"button\"\n                                    className={\n                                        className + (option.disabled ? \" font-weight-bold\" : \"\")\n                                    }\n                                    {...props}>\n                                    <Badge>{(option.value as string).substring(0, 7)}</Badge>\n                                    {option.current ? (\n                                        <Badge variant=\"primary\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.testmerged\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.latest ? (\n                                        <Badge variant=\"success\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.latest\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.name}\n                                </button>\n                            )}\n                            onChange={value => setSelectedCommit(value as unknown as string)}\n                        />\n                    ) : (\n                        <Loading text=\"loading.repo.commits\" width={5} widthUnit=\"rem\" />\n                    )}\n                    <InputField\n                        name=\"view.instance.repo.tm.modal.comment\"\n                        type={FieldType.String}\n                        onChange={newComment => setComment(newComment)}\n                        defaultValue={testmergeinfo?.comment ?? \"\"}\n                    />\n                    <span className=\"text-muted font-italic mt-4 d-inline-block\">\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.tip\" />\n                    </span>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={() => setShowModal(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            if (selectedCommit) onSelectCommit(selectedCommit, comment);\n                            setShowModal(false);\n                        }}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Button, ButtonGroup, Card, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    JobResponse,\n    RemoteGitProvider,\n    RepositoryCreateRequest,\n    RepositoryResponse,\n    RepositoryRights,\n    RepositoryUpdateRequest,\n    TestMerge,\n    TestMergeParameters\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport JobsClient from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport RepositoryClient from \"../../../../ApiClient/RepositoryClient\";\nimport configOptions from \"../../../../ApiClient/util/config\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient, { PullRequest } from \"../../../../utils/GithubClient\";\nimport { hasDreamMakerRight, hasRepoRight } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\nimport TestMergeRow from \"../../../utils/TestMergeRow\";\n\nenum PRState {\n    reapply = \"reapply\",\n    added = \"added\",\n    removed = \"removed\",\n    updated = \"updated\",\n    rename = \"renamed\"\n}\n\nenum ResetType {\n    None,\n    Local,\n    Remote\n}\n\ntype IProps = object;\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    repositoryInfo: RepositoryResponse | null;\n    loading: boolean;\n    cloning: boolean;\n    repoBusy: boolean;\n    unableToHookClone: boolean;\n    loadingPRs: boolean;\n    gitHubPRs: PullRequest[] | null;\n    manualPRs: Set<number>;\n    resetType: ResetType;\n    desiredState: Map<number, [current: boolean, sha: string, comment: string | null] | null>;\n    showDeleteModal: boolean;\n    showRecloneModal: boolean;\n    manualPR: number;\n    lastManualPR: number;\n    deployAfter: boolean;\n}\n\nclass Repository extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            errors: [],\n            repositoryInfo: null,\n            loading: true,\n            cloning: false,\n            unableToHookClone: false,\n            gitHubPRs: null,\n            manualPRs: new Set<number>(),\n            resetType: ResetType.Remote,\n            desiredState: new Map<\n                number,\n                [current: boolean, sha: string, comment: string | null] | null\n            >(),\n            showDeleteModal: false,\n            showRecloneModal: false,\n            manualPR: 0,\n            lastManualPR: 0,\n            deployAfter: false,\n            repoBusy: false,\n            loadingPRs: false\n        };\n\n        this.fetchRepositoryInfo = this.fetchRepositoryInfo.bind(this);\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.setState({\n            deployAfter: hasDreamMakerRight(\n                this.context.instancePermissionSet,\n                DreamMakerRights.Compile\n            )\n        });\n        await this.fetchRepositoryInfo(undefined, true);\n    }\n\n    private async fetchRepositoryInfo(\n        cloneJob?: JobResponse,\n        resetDesiredState?: boolean\n    ): Promise<void> {\n        if (!hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read)) {\n            this.setState({\n                loading: false,\n                cloning: false\n            });\n            this.reloadDesiredState(null, resetDesiredState ?? false, false);\n            this.setState({\n                repositoryInfo: null\n            });\n        }\n\n        const response = await RepositoryClient.getRepository(this.context.instance.id);\n\n        this.setState({\n            cloning: false,\n            repoBusy: false\n        });\n        if (response.code === StatusCode.ERROR) {\n            if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoCloning\n            ) {\n                this.setState({\n                    cloning: true,\n                    unableToHookClone: false\n                });\n                if (cloneJob) {\n                    JobsController.registerCallback(cloneJob.id, this.fetchRepositoryInfo);\n                } else {\n                    const response2 = await JobsClient.listActiveJobs(this.context.instance.id, {\n                        page: 1,\n                        pageSize: 100\n                    });\n                    if (response2.code === StatusCode.OK) {\n                        const cloneJob = response2.payload.content\n                            .sort((a, b) => b.id - a.id)\n                            .find(\n                                job =>\n                                    job.description.includes(\"Clone\") &&\n                                    job.description.includes(\"repository\")\n                            );\n                        if (cloneJob) {\n                            JobsController.registerCallback(cloneJob.id, this.fetchRepositoryInfo);\n                        } else {\n                            this.setState({\n                                unableToHookClone: true\n                            });\n                        }\n                    } else {\n                        this.addError(response2.error);\n                        this.setState({\n                            unableToHookClone: true\n                        });\n                    }\n                }\n            } else if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoBusy\n            ) {\n                this.setState({\n                    repoBusy: true\n                });\n            } else {\n                this.addError(response.error);\n            }\n        } else {\n            this.reloadPRs(response.payload, resetDesiredState);\n            //response.payload.remoteGitProvider = RemoteGitProvider.GitLab;\n            this.setState({ repositoryInfo: response.payload });\n        }\n        this.setState({ loading: false });\n    }\n\n    private reloadPRs(repositoryInfo: RepositoryResponse, resetDesiredState?: boolean) {\n        if (\n            repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub &&\n            repositoryInfo.remoteRepositoryName &&\n            repositoryInfo.remoteRepositoryOwner\n        ) {\n            this.setState({\n                loadingPRs: true\n            });\n            GithubClient.getPRs({\n                repo: repositoryInfo.remoteRepositoryName,\n                owner: repositoryInfo.remoteRepositoryOwner,\n                wantedPRs: repositoryInfo.revisionInformation?.activeTestMerges.map(tm => tm.number)\n            })\n                .then(prs => {\n                    this.setState({\n                        loadingPRs: false\n                    });\n                    if (prs.code === StatusCode.ERROR) {\n                        this.addError(prs.error);\n                    } else {\n                        this.setState({\n                            gitHubPRs: prs.payload\n                        });\n                        if (resetDesiredState)\n                            this.reloadDesiredState(repositoryInfo, true, false, prs.payload);\n                    }\n                })\n                .catch(e => {\n                    this.setState({\n                        loadingPRs: false\n                    });\n                    this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: e as Error }));\n                });\n        }\n    }\n\n    private async applyTestmerges(noBranch: boolean): Promise<void> {\n        const editOptions: RepositoryUpdateRequest = {};\n        const repositoryInfo = this.state.repositoryInfo;\n        const willReset = this.state.resetType !== ResetType.None;\n\n        if (this.state.resetType === ResetType.Local) {\n            editOptions.checkoutSha = repositoryInfo?.revisionInformation?.originCommitSha;\n        } else if (this.state.resetType === ResetType.Remote) {\n            editOptions.updateFromOrigin = true;\n            editOptions.reference = repositoryInfo?.reference;\n        }\n\n        if (repositoryInfo && repositoryInfo?.remoteGitProvider === RemoteGitProvider.GitHub) {\n            const testMergeArray: TestMergeParameters[] = [];\n            [...this.state.desiredState.entries()].forEach(([number, prDesiredState]) => {\n                if (!prDesiredState) return;\n                const [current, commit, comment] = prDesiredState;\n                //If we aren't resetting, ignore PRs we didn't touch\n                if (current && !(willReset || noBranch)) return;\n\n                testMergeArray.push({\n                    number: number,\n                    targetCommitSha: commit,\n                    comment\n                });\n            });\n            if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n        }\n        const testMergeArray = editOptions.newTestMerges ?? [];\n        this.state.manualPRs.forEach(pr =>\n            testMergeArray.push({\n                number: pr\n            })\n        );\n        if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n\n        this.setState({\n            loading: true\n        });\n        const response = await RepositoryClient.editRepository(\n            this.context.instance.id,\n            editOptions\n        );\n        this.setState({\n            loading: false\n        });\n        if (response.code === StatusCode.OK) {\n            if (response.payload.activeJob) {\n                this.setState({\n                    loading: true\n                });\n                JobsController.fastmode = 5;\n                JobsController.registerCallback(response.payload.activeJob.id, job => {\n                    return this.fetchRepositoryInfo(\n                        job,\n                        job.errorCode === undefined && job.exceptionDetails === undefined\n                    );\n                });\n                JobsController.registerJob(response.payload.activeJob, this.context.instance.id);\n                if (this.state.deployAfter) {\n                    const jobId = response.payload.activeJob.id;\n                    const deployinterval = setInterval(() => {\n                        const targetJob = JobsController.jobs.get(jobId);\n                        if (typeof targetJob?.progress === \"number\" || targetJob?.stoppedAt) {\n                            void DreamMakerClient.startCompile(this.context.instance.id).then(\n                                response => {\n                                    if (response.code === StatusCode.ERROR) {\n                                        this.addError(response.error);\n                                    }\n                                }\n                            );\n                            clearInterval(deployinterval);\n                        }\n                    }, 5000);\n                }\n            } else {\n                await this.fetchRepositoryInfo();\n            }\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    private reloadDesiredState(\n        repoinfo: RepositoryResponse | null,\n        reset: boolean,\n        harderReset: boolean,\n        gitHubPRs?: PullRequest[] | null\n    ) {\n        gitHubPRs = gitHubPRs ?? this.state.gitHubPRs;\n        if (reset) {\n            this.setState(prevState => {\n                return {\n                    resetType: harderReset ? ResetType.None : prevState.resetType,\n                    manualPRs: new Set<number>()\n                };\n            });\n        }\n\n        if (!repoinfo) return;\n\n        this.setState(prevState => {\n            const desiredState = prevState.desiredState;\n            const newDesiredState = new Map(!reset ? desiredState : []);\n            let updatingTMs = false;\n            const regularReset = reset && !harderReset;\n            repoinfo.revisionInformation?.activeTestMerges.forEach(pr => {\n                const currentDesiredState = newDesiredState.get(pr.number);\n                if (!reset) {\n                    //We want the PR gone, don't retestmerge it\n                    if (!currentDesiredState) return;\n                    //We want the PR updated to a specific commit, don't mess with it\n                    if (currentDesiredState && !currentDesiredState[0]) return;\n                }\n\n                const gitHubPR = gitHubPRs?.find(\n                    potentialGitHubPR => pr.number === potentialGitHubPR.number\n                );\n\n                const defaultDesiredState = gitHubPR?.state === \"merged\" ? false : true;\n                if (regularReset && !defaultDesiredState) {\n                    newDesiredState.set(pr.number, null);\n                    updatingTMs = true;\n                } else {\n                    const newHead = (regularReset ? gitHubPR?.head : null) ?? pr.targetCommitSha;\n                    if (regularReset && newHead !== pr.targetCommitSha) {\n                        updatingTMs = true;\n                    }\n                    newDesiredState.set(pr.number, [true, newHead, pr.comment ?? \"\"]);\n                }\n            });\n\n            const resetType = updatingTMs\n                ? repoinfo.reference === \"(no branch)\"\n                    ? ResetType.Local\n                    : ResetType.Remote\n                : prevState.resetType;\n            return {\n                resetType,\n                desiredState: newDesiredState\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                {this.renderErrors()}\n                {/*Just like... hope its cloned if you don't have read access*/}\n\n                {this.state.cloning ? (\n                    <Loading text=\"loading.repo.cloning\" />\n                ) : this.state.repositoryInfo && !this.state.repositoryInfo.origin ? (\n                    this.renderPreClone()\n                ) : (\n                    <React.Fragment>\n                        <h3>\n                            <FormattedMessage id=\"view.instance.repo.repoinfo\" />\n                        </h3>\n                        {this.state.repoBusy ? (\n                            <Loading text=\"loading.repo.busy\" />\n                        ) : (\n                            <React.Fragment>\n                                {this.renderRepoInformation()}\n                                <hr />\n                                {this.renderSettings()}\n                                <hr />\n                                {this.renderTestMerges()}\n                                <hr />\n                                {this.renderReclone()}\n                                <hr />\n                                {this.renderDelete()}\n                            </React.Fragment>\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n\n    private renderErrors(): React.ReactNode {\n        return (\n            <React.Fragment>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n            </React.Fragment>\n        );\n    }\n\n    private renderRepoInformation(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n        if (!repositoryInfo) return <GenericAlert title=\"view.instance.repo.norepoinfo\" />;\n\n        return (\n            <table className=\"mx-auto text-left\">\n                <tbody>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.origin\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.origin}</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.owner\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.remoteRepositoryOwner}</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.name\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.remoteRepositoryName}</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n\n    private renderPreClone(): React.ReactNode {\n        const cloneFields = {\n            origin: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.url\"\n            },\n            reference: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.ref\",\n                defaultValue: \"\"\n            },\n            accessUser: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.gituser\",\n                defaultValue: \"\"\n            },\n            accessToken: {\n                type: FieldType.String as FieldType.Password,\n                name: \"fields.instance.repository.gitpassword\",\n                defaultValue: \"\"\n            },\n            updateSubmodules: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.enablesubmodules\",\n                defaultValue: true\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <h3>\n                    <FormattedMessage id=\"view.instance.repo.clone\" />\n                </h3>\n                <InputForm\n                    fields={cloneFields}\n                    hideDisabled={\n                        !hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read)\n                    }\n                    onSave={async result => {\n                        const repoCloneRequest: RepositoryCreateRequest = {\n                            ...result\n                        };\n\n                        if (result.reference == \"\") repoCloneRequest.reference = null;\n                        if (result.accessUser == \"\") repoCloneRequest.accessUser = null;\n                        if (result.accessToken == \"\") repoCloneRequest.accessToken = null;\n\n                        const response = await RepositoryClient.cloneRepository(\n                            this.context.instance.id,\n                            repoCloneRequest\n                        );\n                        if (response.code === StatusCode.OK) {\n                            await this.fetchRepositoryInfo(response.payload.activeJob ?? undefined);\n                        } else {\n                            this.addError(response.error);\n                        }\n                    }}\n                    includeAll\n                    saveMessageId=\"generic.clone\"\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderSettings(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n        const editFields = {\n            originCheckoutSha: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.origincheckoutsha\",\n                disabled: true,\n                defaultValue: repositoryInfo\n                    ? repositoryInfo.revisionInformation?.originCommitSha\n                    : \"\",\n                tooltip: \"fields.instance.repository.origincheckoutsha.desc\"\n            },\n            checkoutSha: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.checkoutsha\",\n                defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.commitSha : \"\",\n                tooltip: \"fields.instance.repository.checkoutsha.desc\",\n                disabled: !hasRepoRight(this.context.instancePermissionSet, RepositoryRights.SetSha)\n            },\n            reference: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.reference\",\n                defaultValue: repositoryInfo ? repositoryInfo.reference : \"\",\n                tooltip: \"fields.instance.repository.reference.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.SetReference\n                )\n            },\n            committerName: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.committerName\",\n                defaultValue: repositoryInfo ? repositoryInfo.committerName : \"\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCommitter\n                )\n            },\n            committerEmail: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.committerEmail\",\n                defaultValue: repositoryInfo ? repositoryInfo.committerEmail : \"\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCommitter\n                )\n            },\n            accessUser: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.accessUser\",\n                defaultValue: repositoryInfo ? repositoryInfo.accessUser : \"\",\n                tooltip: \"fields.instance.repository.accessUser.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCredentials\n                )\n            },\n            accessToken: {\n                type: FieldType.Password as FieldType.Password,\n                name: \"fields.instance.repository.accessToken\",\n                tooltip: \"fields.instance.repository.accessToken.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCredentials\n                )\n            },\n            clearAccessToken: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.clearAccessToken\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCredentials\n                )\n            },\n            pushTestMergeCommits: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.pushTestMergeCommits\",\n                defaultValue: repositoryInfo ? repositoryInfo.pushTestMergeCommits : false,\n                tooltip: \"fields.instance.repository.pushTestMergeCommits.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            createGitHubDeployments: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.createGitHubDeployments\",\n                defaultValue: repositoryInfo ? repositoryInfo.createGitHubDeployments : false,\n                tooltip: \"fields.instance.repository.createGitHubDeployments.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            showTestMergeCommitters: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.showTestMergeCommitters\",\n                defaultValue: repositoryInfo ? repositoryInfo.showTestMergeCommitters : false,\n                tooltip: \"fields.instance.repository.showTestMergeCommitters.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            autoUpdatesKeepTestMerges: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.autoUpdatesKeepTestMerges\",\n                defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesKeepTestMerges : false,\n                tooltip: \"fields.instance.repository.autoUpdatesKeepTestMerges.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeAutoUpdateSettings\n                )\n            },\n            autoUpdatesSynchronize: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.autoUpdatesSynchronize\",\n                defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesSynchronize : false,\n                tooltip: \"fields.instance.repository.autoUpdatesSynchronize.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeAutoUpdateSettings\n                )\n            },\n            postTestMergeComment: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.postTestMergeComment\",\n                defaultValue: repositoryInfo ? repositoryInfo.postTestMergeComment : false,\n                tooltip: \"fields.instance.repository.postTestMergeComment.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            updateSubmodules: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.updateSubmodules\",\n                defaultValue: repositoryInfo ? repositoryInfo.updateSubmodules : false,\n                tooltip: \"fields.instance.repository.updateSubmodules.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeSubmoduleUpdate\n                )\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <h3>\n                    <FormattedMessage id=\"view.instance.repo.reposettings\" />\n                </h3>\n                <InputForm\n                    fields={editFields}\n                    onSave={async _result => {\n                        const { clearAccessToken, ...result } = _result;\n                        if (clearAccessToken) {\n                            result.accessUser = \"\";\n                            result.accessToken = \"\";\n                        }\n\n                        this.setState({ loading: true });\n                        const response = await RepositoryClient.editRepository(\n                            this.context.instance.id,\n                            result\n                        );\n                        this.setState({ loading: false });\n                        if (response.code === StatusCode.OK) {\n                            if (response.payload.activeJob) {\n                                this.setState({ loading: true });\n                                JobsController.fastmode = 5;\n                                JobsController.registerCallback(response.payload.activeJob.id, () =>\n                                    this.fetchRepositoryInfo(undefined, true)\n                                );\n                                JobsController.registerJob(\n                                    response.payload.activeJob,\n                                    this.context.instance.id\n                                );\n                            } else {\n                                await this.fetchRepositoryInfo();\n                            }\n                        } else {\n                            this.addError(response.error);\n                        }\n                    }}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderTestMerges(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n\n        const canDeploy = hasDreamMakerRight(\n            this.context.instancePermissionSet,\n            DreamMakerRights.Compile\n        );\n        const canAdd = hasRepoRight(\n            this.context.instancePermissionSet,\n            RepositoryRights.MergePullRequest\n        );\n        const canUpdate =\n            hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(this.context.instancePermissionSet, RepositoryRights.UpdateBranch);\n\n        const testmergedPRs = new Map<number, TestMerge>();\n        if (repositoryInfo) {\n            repositoryInfo.revisionInformation?.activeTestMerges.forEach(pr =>\n                testmergedPRs.set(pr.number, pr)\n            );\n        }\n        const sortedPRs =\n            this.state.gitHubPRs?.sort((a, b) => {\n                if (testmergedPRs.has(a.number) !== testmergedPRs.has(b.number)) {\n                    return testmergedPRs.has(a.number) ? -1 : 1;\n                }\n                if (a.testmergelabel !== b.testmergelabel) {\n                    return a.testmergelabel ? -1 : 1;\n                }\n                return a.number - b.number;\n            }) ?? [];\n        const filteredPendingActions = sortedPRs\n            .map(pr => {\n                const desiredPRState = this.state.desiredState.get(pr.number);\n                const tmInfo = !repositoryInfo\n                    ? undefined\n                    : repositoryInfo?.revisionInformation?.activeTestMerges.find(\n                          activePR => activePR.number === pr.number\n                      );\n\n                if (desiredPRState) {\n                    if (!tmInfo) {\n                        return [PRState.added, pr];\n                    } else if (tmInfo.targetCommitSha !== desiredPRState[1]) {\n                        return [PRState.updated, pr];\n                    } else if ((tmInfo.comment ?? \"\") !== desiredPRState[2]) {\n                        return [PRState.rename, pr];\n                    } else {\n                        return [PRState.reapply, pr];\n                    }\n                }\n                if (!this.state.desiredState.get(pr.number)) {\n                    if (!tmInfo) return null;\n\n                    return [PRState.removed, pr];\n                }\n                return null;\n            })\n            .filter(value => value !== null) as [PRState, PullRequest][];\n        const sortedPendingActions = filteredPendingActions.sort((a, b) => {\n            const order = [PRState.removed, PRState.reapply, PRState.added, PRState.updated];\n            for (const state of order) {\n                if (\n                    // @ts-expect-error again, ts doesn't want people to use xor on booleans, and I disagree\n                    (a[0] === state) ^\n                    (b[0] === state)\n                ) {\n                    return a[0] === state ? -1 : 1;\n                }\n            }\n            return 0;\n        });\n        const noBranch = !repositoryInfo ? false : repositoryInfo.reference === \"(no branch)\";\n        const forceReset = filteredPendingActions.some(\n            action => action[0] != PRState.added && action[0] != PRState.reapply\n        );\n\n        //PRs we haven't touched, only used to display prs to reapply after reset\n        const noPendingChanges =\n            filteredPendingActions.filter(([state]) => state !== PRState.reapply).length === 0 &&\n            this.state.resetType === ResetType.None &&\n            !this.state.manualPRs.size;\n\n        if (repositoryInfo && repositoryInfo.remoteGitProvider == RemoteGitProvider.Unknown)\n            return <GenericAlert title=\"view.instance.repo.testmerges.badprovider\" />;\n\n        return (\n            <div className=\"mx-5\">\n                <Card className=\"mb-5\">\n                    <Card.Header>\n                        <FormattedMessage id=\"view.instance.repo.pending.title\" />\n                    </Card.Header>\n                    <Card.Body className=\"text-left\">\n                        <ul>\n                            {noPendingChanges ? (\n                                <li className=\"font-weight-lighter font-italic\">\n                                    <FormattedMessage id=\"view.instance.repo.pending.none\" />\n                                </li>\n                            ) : (\n                                <React.Fragment>\n                                    {repositoryInfo && noBranch ? (\n                                        <li>\n                                            <FormattedMessage\n                                                id=\"view.instance.repo.pending.reset.nobranch\"\n                                                values={{\n                                                    commit: repositoryInfo.revisionInformation?.originCommitSha.substring(\n                                                        0,\n                                                        7\n                                                    )\n                                                }}\n                                            />\n                                        </li>\n                                    ) : this.state.resetType === ResetType.Remote ? (\n                                        <li>\n                                            <FormattedMessage id=\"view.instance.repo.pending.update\" />\n                                        </li>\n                                    ) : this.state.resetType === ResetType.Local ? (\n                                        <li>\n                                            <FormattedMessage id=\"view.instance.repo.pending.reset\" />\n                                        </li>\n                                    ) : null}\n                                    {repositoryInfo &&\n                                    repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub\n                                        ? sortedPendingActions.map(([state, pr]) => {\n                                              const prDesiredState = this.state.desiredState.get(\n                                                  pr.number\n                                              );\n\n                                              if (\n                                                  state === PRState.reapply &&\n                                                  !(\n                                                      this.state.resetType !== ResetType.None ||\n                                                      noBranch\n                                                  )\n                                              )\n                                                  return null;\n\n                                              let targetCommit = prDesiredState\n                                                  ? prDesiredState[1].substring(0, 7)\n                                                  : null;\n\n                                              const gitHubPR = this.state.gitHubPRs?.find(\n                                                  gitHubPR => pr.number === gitHubPR.number\n                                              );\n\n                                              if (\n                                                  !targetCommit ||\n                                                  gitHubPR?.head.startsWith(targetCommit)\n                                              )\n                                                  targetCommit = `HEAD (${(\n                                                      targetCommit ?? gitHubPR!.head\n                                                  ).substring(0, 7)})`;\n\n                                              return (\n                                                  <li key={pr.number}>\n                                                      <FormattedMessage\n                                                          id={`view.instance.repo.pending.${state}`}\n                                                          values={{\n                                                              number: pr.number,\n                                                              commit: targetCommit,\n                                                              title: pr.title\n                                                          }}\n                                                      />\n                                                  </li>\n                                              );\n                                          })\n                                        : null}\n                                    {[...this.state.manualPRs.values()].map(pr => (\n                                        <li key={pr}>\n                                            <FormattedMessage\n                                                id={`view.instance.repo.pending.added.manual`}\n                                                values={{\n                                                    number: pr\n                                                }}\n                                            />\n                                        </li>\n                                    ))}\n                                    {this.state.deployAfter ? (\n                                        <li key=\"deploy\">\n                                            <FormattedMessage\n                                                id={`view.instance.repo.pending.deploy`}\n                                            />\n                                        </li>\n                                    ) : null}\n                                </React.Fragment>\n                            )}\n                        </ul>\n                        <ButtonGroup size=\"lg\" className=\"mb-2 text-center\">\n                            <Button\n                                disabled={noBranch || !canUpdate}\n                                onClick={() => this.setState({ resetType: ResetType.Remote })}\n                                variant={\n                                    this.state.resetType === ResetType.Remote\n                                        ? \"secondary\"\n                                        : \"primary\"\n                                }>\n                                <FormattedMessage id=\"view.instance.repo.update.remote\" />\n                            </Button>\n                            <OverlayTrigger\n                                placement=\"top\"\n                                overlay={props => (\n                                    <Tooltip id=\"repo-local-reset-tip\" {...props}>\n                                        <FormattedMessage id=\"view.instance.repo.update.local.tip\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    onClick={() => this.setState({ resetType: ResetType.Local })}\n                                    variant={\n                                        this.state.resetType === ResetType.Local\n                                            ? \"secondary\"\n                                            : \"primary\"\n                                    }>\n                                    <FormattedMessage id=\"view.instance.repo.update.local\" />\n                                </Button>\n                            </OverlayTrigger>\n                            <Button\n                                disabled={forceReset}\n                                onClick={() => this.setState({ resetType: ResetType.None })}\n                                variant={\n                                    this.state.resetType === ResetType.None\n                                        ? \"secondary\"\n                                        : \"primary\"\n                                }>\n                                <FormattedMessage id=\"view.instance.repo.update.none\" />\n                            </Button>\n                        </ButtonGroup>\n                        {(configOptions.manualpr.value as boolean) ||\n                        !repositoryInfo ||\n                        !this.state.gitHubPRs ||\n                        repositoryInfo.remoteGitProvider === RemoteGitProvider.GitLab ? (\n                            <div className=\"d-flex mt-5\">\n                                <InputField\n                                    name=\"view.instance.repo.manual\"\n                                    tooltip=\"view.instance.repo.manual.desc\"\n                                    type={FieldType.Number}\n                                    min={0}\n                                    defaultValue={this.state.lastManualPR}\n                                    onChange={newPR => this.setState({ manualPR: newPR })}\n                                    disabled={!canAdd}\n                                />\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        className=\"nowrap ml-3\"\n                                        disabled={\n                                            this.state.manualPR === this.state.lastManualPR ||\n                                            !canAdd\n                                        }\n                                        onClick={() => {\n                                            this.setState(prevState => {\n                                                return {\n                                                    manualPRs: new Set<number>([\n                                                        ...prevState.manualPRs.values(),\n                                                        this.state.manualPR\n                                                    ]),\n                                                    lastManualPR: this.state.manualPR\n                                                };\n                                            });\n                                        }}>\n                                        <FormattedMessage id=\"view.instance.repo.addmanual\" />\n                                    </Button>\n                                </SimpleToolTip>\n                            </div>\n                        ) : null}\n                        <InputField\n                            name=\"view.instance.repo.deployAfter\"\n                            tooltip=\"view.instance.repo.deployAfter.desc\"\n                            type={FieldType.Boolean}\n                            defaultValue={!canDeploy ? false : this.state.deployAfter}\n                            disabled={!canDeploy}\n                            onChange={newVal => this.setState({ deployAfter: newVal })}\n                        />\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button\n                            variant=\"danger\"\n                            className=\"mx-2\"\n                            disabled={noPendingChanges}\n                            onClick={() => this.reloadDesiredState(repositoryInfo, true, true)}>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            className=\"mx-2\"\n                            disabled={noPendingChanges}\n                            onClick={() => void this.applyTestmerges(noBranch)}>\n                            <FormattedMessage id=\"generic.commit\" />\n                        </Button>\n                    </Card.Footer>\n                </Card>\n                {this.state.loadingPRs ? (\n                    <Loading text=\"loading.repo.prs\" />\n                ) : !repositoryInfo ? (\n                    <GenericAlert title=\"view.instance.repo.noautomerge\" />\n                ) : repositoryInfo &&\n                  repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub ? (\n                    <React.Fragment>\n                        <h3>\n                            <FormattedMessage id=\"view.instance.repo.testmerges\" />\n                        </h3>\n                        <br />\n                        <Table variant=\"dark\" striped hover className=\"text-left\">\n                            <tbody>\n                                {sortedPRs.map(pr => (\n                                    <TestMergeRow\n                                        key={pr.number}\n                                        testmergeinfo={testmergedPRs.get(pr.number)}\n                                        pr={pr}\n                                        repoInfo={repositoryInfo}\n                                        finalState={\n                                            this.state.desiredState.get(pr.number)\n                                                ? ((\n                                                      this.state.desiredState.get(pr.number) as [\n                                                          boolean,\n                                                          string,\n                                                          string\n                                                      ]\n                                                  ).slice(1) as [string, string])\n                                                : false\n                                        }\n                                        onRemove={() =>\n                                            this.setState(prevState => {\n                                                return {\n                                                    resetType:\n                                                        prevState.resetType === ResetType.None\n                                                            ? ResetType.Remote\n                                                            : prevState.resetType,\n                                                    desiredState: new Map(\n                                                        prevState.desiredState\n                                                    ).set(pr.number, null)\n                                                };\n                                            })\n                                        }\n                                        onSelectCommit={(commit, comment) =>\n                                            this.setState(prevState => {\n                                                return {\n                                                    desiredState: new Map(\n                                                        prevState.desiredState\n                                                    ).set(pr.number, [false, commit, comment])\n                                                };\n                                            })\n                                        }\n                                        onError={error => this.addError(error)}\n                                    />\n                                ))}\n                            </tbody>\n                        </Table>\n                    </React.Fragment>\n                ) : null}\n            </div>\n        );\n    }\n\n    private renderReclone(): React.ReactNode {\n        const canReclone = hasRepoRight(\n            this.context.instancePermissionSet,\n            RepositoryRights.Reclone\n        );\n\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.repo.reclone.title\" />\n                </h4>\n                <span>\n                    <FormattedMessage id=\"view.instance.repo.reclone.desc\" />\n                </span>\n                <br />\n                <Button\n                    variant=\"warning\"\n                    className=\"mt-2\"\n                    disabled={!canReclone}\n                    onClick={() =>\n                        this.setState({\n                            showRecloneModal: true\n                        })\n                    }>\n                    <FormattedMessage id=\"view.instance.repo.reclone\" />\n                </Button>\n                <Modal\n                    show={this.state.showRecloneModal}\n                    onHide={() =>\n                        this.setState({\n                            showRecloneModal: false\n                        })\n                    }\n                    centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id=\"view.instance.repo.reclone.title\" />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <span>\n                            <FormattedMessage id=\"generic.areyousure\" />\n                        </span>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            onClick={() =>\n                                this.setState({\n                                    showRecloneModal: false\n                                })\n                            }>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={() =>\n                                void (async () => {\n                                    this.setState({\n                                        showRecloneModal: false,\n                                        loading: true\n                                    });\n                                    const response = await RepositoryClient.recloneRepository(\n                                        this.context.instance.id\n                                    );\n                                    this.setState({\n                                        loading: false\n                                    });\n                                    if (response.code === StatusCode.OK) {\n                                        if (response.payload.activeJob) {\n                                            this.setState({\n                                                loading: true\n                                            });\n                                            JobsController.fastmode = 5;\n                                            JobsController.registerCallback(\n                                                response.payload.activeJob.id,\n                                                job => {\n                                                    return this.fetchRepositoryInfo(\n                                                        job,\n                                                        job.errorCode === undefined &&\n                                                            job.exceptionDetails === undefined\n                                                    );\n                                                }\n                                            );\n                                            JobsController.registerJob(\n                                                response.payload.activeJob,\n                                                this.context.instance.id\n                                            );\n                                        } else {\n                                            await this.fetchRepositoryInfo();\n                                        }\n                                    } else {\n                                        this.addError(response.error);\n                                    }\n                                })()\n                            }>\n                            <FormattedMessage id=\"view.instance.repo.reclone\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n\n    private renderDelete(): React.ReactNode {\n        const canDelete = hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Delete);\n\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                </h4>\n                <span>\n                    <FormattedMessage id=\"view.instance.repo.delete.desc\" />\n                </span>\n                <br />\n                <Button\n                    variant=\"danger\"\n                    className=\"mt-2\"\n                    disabled={!canDelete}\n                    onClick={() =>\n                        this.setState({\n                            showDeleteModal: true\n                        })\n                    }>\n                    <FormattedMessage id=\"view.instance.repo.delete\" />\n                </Button>\n                <Modal\n                    show={this.state.showDeleteModal}\n                    onHide={() =>\n                        this.setState({\n                            showDeleteModal: false\n                        })\n                    }\n                    centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <span>\n                            <FormattedMessage id=\"generic.areyousure\" />\n                        </span>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            onClick={() =>\n                                this.setState({\n                                    showDeleteModal: false\n                                })\n                            }>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={() =>\n                                void (async () => {\n                                    this.setState({\n                                        showDeleteModal: false,\n                                        loading: true\n                                    });\n                                    const response = await RepositoryClient.deleteRepository(\n                                        this.context.instance.id\n                                    );\n                                    this.setState({\n                                        loading: false\n                                    });\n                                    if (response.code === StatusCode.OK) {\n                                        if (response.payload.activeJob) {\n                                            this.setState({\n                                                loading: true\n                                            });\n                                            JobsController.fastmode = 5;\n                                            JobsController.registerCallback(\n                                                response.payload.activeJob.id,\n                                                job => {\n                                                    return this.fetchRepositoryInfo(\n                                                        job,\n                                                        job.errorCode === undefined &&\n                                                            job.exceptionDetails === undefined\n                                                    );\n                                                }\n                                            );\n                                            JobsController.registerJob(\n                                                response.payload.activeJob,\n                                                this.context.instance.id\n                                            );\n                                        } else {\n                                            await this.fetchRepositoryInfo();\n                                        }\n                                    } else {\n                                        this.addError(response.error);\n                                    }\n                                })()\n                            }>\n                            <FormattedMessage id=\"view.instance.repo.delete\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nRepository.contextType = InstanceEditContext;\nexport default Repository;\n"],"names":["SimpleToolTip","props","React","OverlayTrigger","show","overlay","Tooltip","id","tooltipid","FormattedMessage","children","TestMergeRow","pr","testmergeinfo","repoInfo","finalState","onRemove","onSelectCommit","onError","showDetails","_setShowDetails","useState","setShowDetails","_newVal","prevState","newVal","loadCommits","showModal","setShowModal","selectedCommit","setSelectedCommit","head","comment","setComment","commits","setCommits","extraCommit","setExtraCommit","instanceEditContext","useContext","InstanceEditContext","useCallback","async","force","response","GithubClient","getPRCommits","owner","remoteRepositoryOwner","repo","remoteRepositoryName","wantedCommit","targetCommitSha","code","StatusCode","ERROR","error","commitMap","Map","payload","forEach","commit","set","sha","useEffect","activeCommit","has","get","commitOptions","values","map","name","value","current","latest","disabled","push","canAdd","hasRepoRight","instancePermissionSet","RepositoryRights","MergePullRequest","canReset","Read","UpdateBranch","className","number","Badge","pill","style","backgroundColor","closed","merged","open","state","testmergelabel","variant","href","link","target","rel","title","author","undefined","Button","onClick","FontAwesomeIcon","icon","fixedWidth","e","shiftKey","val","active","colSpan","Collapse","in","mergedBy","url","substring","Modal","onHide","centered","size","Header","closeButton","Title","Body","SelectSearch","filterOptions","fuzzySearch","search","options","autoComplete","renderOption","option","snapshot","_extends","type","onChange","Loading","text","width","widthUnit","InputField","FieldType","String","newComment","defaultValue","Footer","PRState","ResetType","Repository","constructor","super","this","errors","repositoryInfo","loading","cloning","unableToHookClone","gitHubPRs","manualPRs","Set","resetType","Remote","desiredState","showDeleteModal","showRecloneModal","manualPR","lastManualPR","deployAfter","repoBusy","loadingPRs","fetchRepositoryInfo","bind","addError","setState","Array","from","componentDidMount","hasDreamMakerRight","context","DreamMakerRights","Compile","cloneJob","resetDesiredState","reloadDesiredState","RepositoryClient","getRepository","instance","ErrorCode","HTTP_DATA_INEGRITY","originalErrorMessage","errorCode","TGSErrorCode","RepoCloning","JobsController","registerCallback","response2","JobsClient","listActiveJobs","page","pageSize","OK","content","sort","a","b","find","job","description","includes","RepoBusy","reloadPRs","remoteGitProvider","RemoteGitProvider","GitHub","getPRs","wantedPRs","revisionInformation","activeTestMerges","tm","then","prs","catch","InternalError","APP_FAIL","jsError","applyTestmerges","noBranch","editOptions","willReset","None","Local","checkoutSha","originCommitSha","updateFromOrigin","reference","testMergeArray","entries","prDesiredState","length","newTestMerges","editRepository","activeJob","fastmode","exceptionDetails","registerJob","jobId","deployinterval","setInterval","targetJob","jobs","progress","stoppedAt","DreamMakerClient","startCompile","clearInterval","repoinfo","reset","harderReset","newDesiredState","updatingTMs","regularReset","currentDesiredState","gitHubPR","potentialGitHubPR","newHead","render","DebugJsonViewer","obj","renderErrors","origin","renderPreClone","renderRepoInformation","renderSettings","renderTestMerges","renderReclone","renderDelete","err","index","ErrorAlert","key","onClose","prev","newarr","GenericAlert","cloneFields","accessUser","accessToken","updateSubmodules","Boolean","InputForm","fields","hideDisabled","onSave","repoCloneRequest","result","cloneRepository","includeAll","saveMessageId","editFields","originCheckoutSha","tooltip","commitSha","SetSha","SetReference","committerName","ChangeCommitter","committerEmail","ChangeCredentials","Password","clearAccessToken","pushTestMergeCommits","ChangeTestMergeCommits","createGitHubDeployments","showTestMergeCommitters","autoUpdatesKeepTestMerges","ChangeAutoUpdateSettings","autoUpdatesSynchronize","postTestMergeComment","ChangeSubmoduleUpdate","_result","canDeploy","canUpdate","testmergedPRs","sortedPRs","filteredPendingActions","desiredPRState","tmInfo","activePR","updated","rename","reapply","added","removed","filter","sortedPendingActions","order","forceReset","some","action","noPendingChanges","Unknown","Card","targetCommit","startsWith","ButtonGroup","placement","configOptions","manualpr","GitLab","Number","min","newPR","Table","striped","hover","slice","canReclone","Reclone","recloneRepository","canDelete","Delete","deleteRepository","contextType"],"sourceRoot":""}