{"version":3,"file":"898.506fa6125431a4f5701d.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/User/Create.tsx"],"sourcesContent":["import { History as LibHistory } from \"history\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport type { UserResponse } from \"../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport Loading from \"../../utils/Loading\";\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    password1: string;\n    password2: string;\n    username: string;\n    sysuser: string;\n    matchError?: boolean;\n    lengthError?: boolean;\n    creating?: boolean;\n    redirect?: boolean;\n}\ninterface IProps extends RouteComponentProps {\n    postCreateAction?: (user: UserResponse, history: LibHistory) => void;\n}\n\nclass UserCreate extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public static defaultProps = {\n        postCreateAction: (user: UserResponse, history: LibHistory) => {\n            RouteData.selecteduserid = user.id;\n            history.push(AppRoutes.useredit.link ?? AppRoutes.useredit.route);\n        }\n    };\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            errors: [],\n            password1: \"\",\n            password2: \"\",\n            username: \"\",\n            sysuser: \"\"\n        };\n\n        this.submitTGS = this.submitTGS.bind(this);\n        this.submitSYS = this.submitSYS.bind(this);\n    }\n\n    // noinspection DuplicatedCode\n    private validate(): boolean {\n        let err = false;\n        if (this.state.password1.length < this.context.serverInfo.minimumPasswordLength) {\n            err = true;\n            this.setState({\n                lengthError: true\n            });\n        } else {\n            this.setState({\n                lengthError: false\n            });\n        }\n        if (this.state.password2 !== this.state.password1) {\n            err = true;\n            this.setState({\n                matchError: true\n            });\n        } else {\n            this.setState({\n                matchError: false\n            });\n        }\n        return err;\n    }\n\n    private async submitTGS(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        //validation\n        if (this.validate()) return;\n        if (!this.state.username) return;\n\n        this.setState({\n            creating: true\n        });\n\n        const user = await UserClient.createUser({\n            name: this.state.username,\n            password: this.state.password1\n        });\n        // noinspection DuplicatedCode\n        if (user.code == StatusCode.OK) {\n            this.props.postCreateAction!(user.payload, this.props.history);\n        } else {\n            this.addError(user.error);\n            this.setState({\n                creating: false\n            });\n        }\n    }\n\n    private async submitSYS(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n\n        //validation\n        if (!this.state.sysuser) return;\n\n        this.setState({\n            creating: true\n        });\n\n        const user = await UserClient.createUser({\n            systemIdentifier: this.state.sysuser\n        });\n        // noinspection DuplicatedCode\n        if (user.code == StatusCode.OK) {\n            this.props.postCreateAction!(user.payload, this.props.history);\n        } else {\n            this.addError(user.error);\n            this.setState({\n                creating: false\n            });\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): ReactNode {\n        if (this.state.creating) {\n            return <Loading text=\"loading.user.create\" />;\n        }\n\n        const handleUsernameInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ username: event.target.value });\n        const handleSysuserInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ sysuser: event.target.value });\n        const handlePwd1Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password1: event.target.value });\n        const handlePwd2Input = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password2: event.target.value });\n\n        return (\n            <div className=\"text-center\">\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <h3>\n                    <FormattedMessage id=\"routes.usercreate\" />\n                </h3>\n                <Col className=\"mx-auto\" lg={5} md={8}>\n                    <Form onSubmit={this.submitTGS}>\n                        <Form.Group controlId=\"username\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.username\" />\n                            </Form.Label>\n                            <Form.Control\n                                required\n                                onChange={handleUsernameInput}\n                                value={this.state.username}\n                            />\n                        </Form.Group>\n                        <Form.Group controlId=\"password1\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.password\" />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                onChange={handlePwd1Input}\n                                value={this.state.password1}\n                                isInvalid={this.state.matchError || this.state.lengthError}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.lengthError ? (\n                                    <React.Fragment>\n                                        <FormattedMessage id=\"login.password.repeat.short\" />\n                                        {this.context.serverInfo.minimumPasswordLength}\n                                    </React.Fragment>\n                                ) : (\n                                    \"\"\n                                )}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group controlId=\"password2\">\n                            <Form.Label>\n                                <FormattedMessage id=\"login.password.repeat\" />\n                            </Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                onChange={handlePwd2Input}\n                                value={this.state.password2}\n                                isInvalid={this.state.matchError || this.state.lengthError}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">\n                                {this.state.matchError ? (\n                                    <FormattedMessage id=\"login.password.repeat.match\" />\n                                ) : (\n                                    \"\"\n                                )}\n                            </Form.Control.Feedback>\n                        </Form.Group>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"view.user.create.tgs\" />\n                        </Button>\n                    </Form>\n                    <hr />\n                    <Form onSubmit={this.submitSYS}>\n                        <Form.Group controlId=\"sysuser\">\n                            <Form.Label>\n                                <FormattedMessage id=\"generic.systemidentifier\" />\n                            </Form.Label>\n                            <Form.Control\n                                required\n                                onChange={handleSysuserInput}\n                                value={this.state.sysuser}\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"view.user.create.sys\" />\n                        </Button>\n                    </Form>\n                </Col>\n            </div>\n        );\n    }\n}\nUserCreate.contextType = GeneralContext;\nexport default withRouter(UserCreate);\n"],"names":["UserCreate","React","constructor","props","super","this","state","errors","password1","password2","username","sysuser","submitTGS","bind","submitSYS","validate","err","length","context","serverInfo","minimumPasswordLength","setState","lengthError","matchError","event","preventDefault","creating","user","UserClient","name","password","code","StatusCode","postCreateAction","payload","history","addError","error","systemIdentifier","prevState","Array","from","push","render","text","className","map","index","key","onClose","prev","newarr","undefined","id","lg","md","onSubmit","controlId","required","onChange","target","value","type","isInvalid","defaultProps","RouteData","AppRoutes","contextType","GeneralContext","withRouter"],"sourceRoot":""}