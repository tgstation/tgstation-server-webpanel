{"version":3,"file":"926.9721f261bd7f5a7449df.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/DownloadCard.tsx","webpack://tgstation-server-control-panel/./src/components/utils/WIPNotice.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Files.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Alert, Collapse, ProgressBar } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ProgressEvent } from \"../../ApiClient/TransferClient\";\n\nexport interface IDownloadProps {\n    filename: string;\n    progress: ProgressEvent;\n    onClose: () => void;\n}\n\ninterface IState {\n    animatedOpen: boolean;\n    closeTriggered: boolean;\n}\n\nexport class DownloadCard extends React.Component<IDownloadProps, IState> {\n    public constructor(props: IDownloadProps) {\n        super(props);\n        this.state = {\n            animatedOpen: false,\n            closeTriggered: false\n        };\n    }\n\n    public componentDidMount(): void {\n        this.setState({\n            animatedOpen: true\n        });\n\n        if (this.isCompleted()) {\n            this.close();\n        }\n    }\n\n    public componentDidUpdate(): void {\n        if (this.isCompleted()) {\n            this.close();\n        }\n    }\n\n    private isCompleted(props?: Readonly<IDownloadProps>): boolean {\n        props ??= this.props;\n        const completed =\n            props.progress.loaded === props.progress.total || props.progress.total === 0;\n        return completed;\n    }\n\n    private close(): void {\n        if (this.state.closeTriggered) {\n            return;\n        }\n        this.setState({\n            closeTriggered: true\n        });\n\n        setTimeout(() => {\n            this.setState({\n                animatedOpen: false\n            });\n            setTimeout(this.props.onClose, 1000);\n        }, 3000);\n    }\n\n    public render(): React.ReactNode {\n        const completed =\n            this.props.progress.loaded === this.props.progress.total ||\n            this.props.progress.total === 0;\n        return (\n            <Collapse in={this.state.animatedOpen} dimension=\"height\">\n                <div>\n                    <Alert\n                        className=\"clearfix\"\n                        variant={completed ? \"success\" : \"primary\"}\n                        transition>\n                        <FormattedMessage\n                            id={completed ? \"generic.downloaded\" : \"generic.downloading\"}\n                            values={{ file: this.props.filename }}\n                        />\n                        <hr />\n                        <ProgressBar\n                            min={0}\n                            now={Math.max(1, this.props.progress.loaded)}\n                            max={Math.max(1, this.props.progress.total)}\n                            variant={completed ? \"success\" : \"warning\"}\n                            animated={!completed}\n                        />\n                    </Alert>\n                </div>\n            </Collapse>\n        );\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n","import {\r\n    faDownload,\r\n    faFile,\r\n    faFileAlt,\r\n    faFolderMinus,\r\n    faFolderPlus,\r\n    faTimes\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { downloadZip } from \"client-zip\";\r\nimport React from \"react\";\r\nimport { Button, ButtonGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\r\n\r\nimport ConfigurationFileClient from \"../../../../ApiClient/ConfigurationFileClient\";\r\nimport {\r\n    ConfigurationFileResponse,\r\n    ConfigurationRights,\r\n    ConfigurationType\r\n} from \"../../../../ApiClient/generatedcode/generated\";\r\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\r\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\r\nimport TransferClient, { ProgressEvent } from \"../../../../ApiClient/TransferClient\";\r\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\r\nimport { hasFilesRight } from \"../../../../utils/misc\";\r\nimport { DownloadCard, IDownloadProps } from \"../../../utils/DownloadCard\";\r\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\r\nimport GenericAlert from \"../../../utils/GenericAlert\";\r\nimport { FieldType } from \"../../../utils/InputField\";\r\nimport InputForm from \"../../../utils/InputForm\";\r\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\r\nimport Loading from \"../../../utils/Loading\";\r\nimport WIPNotice from \"../../../utils/WIPNotice\";\r\n\r\n// https://stackoverflow.com/questions/24007073/open-links-made-by-createobjecturl-in-ie11/45732897#45732897\r\nconst downloadFileUsingBlob = (fileName: string, fileData: Blob) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\r\n    const unknownNav = window.navigator as any;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n    if (unknownNav && unknownNav.msSaveOrOpenBlob) {\r\n        // for IE\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n        unknownNav.msSaveOrOpenBlob(fileData, fileName);\r\n    } else {\r\n        // for Non-IE (chrome, firefox etc.)\r\n        const a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        const fileUrl = URL.createObjectURL(fileData);\r\n        a.href = fileUrl;\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        a.download = fileName;\r\n        a.click();\r\n        URL.revokeObjectURL(a.href);\r\n        a.remove();\r\n    }\r\n};\r\n\r\ninterface CreateEntitySettings {\r\n    entityName: string;\r\n    isDirectory: boolean;\r\n    replace?: boolean;\r\n}\r\n\r\nclass DirectoryTree {\r\n    public parent: DirectoryTree | null;\r\n    public children: DirectoryTree[];\r\n    public fileResponse: ConfigurationFileResponse;\r\n    public totalFiles: number | undefined;\r\n    public fullyLoaded = false;\r\n\r\n    public constructor(fileResponse: ConfigurationFileResponse, parent?: DirectoryTree) {\r\n        this.fileResponse = fileResponse;\r\n        this.parent = parent ?? null;\r\n        if (!fileResponse.isDirectory) this.fullyLoaded = true;\r\n        this.children = [];\r\n    }\r\n}\r\n\r\ninterface IProps extends WrappedComponentProps {}\r\n\r\ninterface IState {\r\n    errors: Array<InternalError<ErrorCode> | undefined>;\r\n    rootDirectory: DirectoryTree | null;\r\n    loading: boolean;\r\n    selectedFile: DirectoryTree | null;\r\n    selectedCreateNode: DirectoryTree | null;\r\n    downloads: (IDownloadProps | null)[];\r\n}\r\n\r\nclass Files extends React.Component<IProps, IState> {\r\n    public declare context: InstanceEditContext;\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errors: [],\r\n            rootDirectory: null,\r\n            loading: true,\r\n            selectedFile: null,\r\n            selectedCreateNode: null,\r\n            downloads: []\r\n        };\r\n\r\n        this.createEntity = this.createEntity.bind(this);\r\n        this.selectFile = this.selectFile.bind(this);\r\n        this.shortAsyncAction = this.shortAsyncAction.bind(this);\r\n        this.deleteFile = this.deleteFile.bind(this);\r\n        this.loadDirectory = this.loadDirectory.bind(this);\r\n        this.clearDirectory = this.clearDirectory.bind(this);\r\n    }\r\n\r\n    private addError(error: InternalError<ErrorCode>): void {\r\n        this.setState(prevState => {\r\n            const errors = Array.from(prevState.errors);\r\n            errors.push(error);\r\n            return {\r\n                errors\r\n            };\r\n        });\r\n    }\r\n\r\n    public async componentDidMount(): Promise<void> {\r\n        await this.loadRootDir();\r\n    }\r\n\r\n    private async loadRootDir() {\r\n        if (hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.List)) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n            const mockResponse = {\r\n                path: \"/\",\r\n                isDirectory: true,\r\n                fileTicket: \"\"\r\n            };\r\n            const rootDirectory = new DirectoryTree(mockResponse);\r\n            await this.loadDirectory(rootDirectory);\r\n\r\n            this.setState({\r\n                rootDirectory: rootDirectory,\r\n                loading: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    private async shortAsyncAction(action: () => Promise<void>): Promise<void> {\r\n        const actionPromise = action();\r\n\r\n        // only set state to loading if it's taking more than 750ms\r\n        let tookTooLong = false;\r\n        const tooLongPromise = new Promise(r => setTimeout(r, 750)).then(() => {\r\n            tookTooLong = true;\r\n        });\r\n\r\n        await Promise.race([actionPromise, tooLongPromise]);\r\n\r\n        if (tookTooLong) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            await actionPromise;\r\n\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        } else this.forceUpdate();\r\n    }\r\n\r\n    private async deleteDirectory(dir: DirectoryTree): Promise<void> {\r\n        const response = await ConfigurationFileClient.deleteDirectory(this.context.instance.id, {\r\n            path: dir.fileResponse.path\r\n        });\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            if (dir.parent != null) {\r\n                const parentIndex = dir.parent.children.indexOf(dir);\r\n                dir.parent.children.splice(parentIndex, 1);\r\n                this.forceUpdate();\r\n            }\r\n        } else {\r\n            this.addError(response.error);\r\n        }\r\n    }\r\n\r\n    private async loadDirectory(directory: DirectoryTree): Promise<void> {\r\n        if (hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.List)) {\r\n            this.clearDirectory(directory);\r\n\r\n            const path =\r\n                directory.fileResponse.path[0] === \"\\\\\" || directory.fileResponse.path[0] === \"/\"\r\n                    ? directory.fileResponse.path.slice(1)\r\n                    : directory.fileResponse.path;\r\n            let maxPages = 1;\r\n            for (let page = 1; page <= maxPages; ++page) {\r\n                const response = await ConfigurationFileClient.getDirectory(\r\n                    this.context.instance.id,\r\n                    path,\r\n                    {\r\n                        page\r\n                    }\r\n                );\r\n                if (response.code === StatusCode.OK) {\r\n                    maxPages = response.payload.totalPages;\r\n                    if (maxPages <= page) directory.fullyLoaded = true;\r\n                    const newChildren = response.payload.content.map(\r\n                        c => new DirectoryTree(c, directory)\r\n                    );\r\n                    for (const c of newChildren) {\r\n                        directory.children.push(c);\r\n                    }\r\n                } else {\r\n                    this.addError(response.error);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async selectFile(file: DirectoryTree): Promise<void> {\r\n        if (this.state.selectedFile === file) {\r\n            this.setState({\r\n                selectedFile: null\r\n            });\r\n            return;\r\n        }\r\n\r\n        let doctoredPath = file.fileResponse.path;\r\n        while (doctoredPath.startsWith(\"/\")) doctoredPath = doctoredPath.substring(1);\r\n\r\n        if (!file.fileResponse.isDirectory) {\r\n            const response = await ConfigurationFileClient.getConfigFile(\r\n                this.context.instance.id,\r\n                doctoredPath,\r\n                null\r\n            );\r\n\r\n            const success = response.code === StatusCode.OK;\r\n            if (success) {\r\n                file.fileResponse = response.payload;\r\n            } else {\r\n                this.addError(response.error);\r\n                file.fileResponse.lastReadHash = null;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            selectedFile: file,\r\n            selectedCreateNode: null\r\n        });\r\n    }\r\n\r\n    private async deleteFile(): Promise<void> {\r\n        const selectedFile = this.state.selectedFile!;\r\n        const response = await ConfigurationFileClient.writeConfigFile(\r\n            this.context.instance.id,\r\n            {\r\n                path: selectedFile.fileResponse.path,\r\n                lastReadHash: selectedFile.fileResponse.lastReadHash\r\n            },\r\n            new Uint8Array()\r\n        );\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            const parentDirectory = selectedFile.parent!;\r\n            const parentIndex = parentDirectory.children.indexOf(selectedFile);\r\n            parentDirectory.children.splice(parentIndex, 1);\r\n            this.setState({\r\n                selectedFile: null\r\n            });\r\n        } else this.addError(response.error);\r\n    }\r\n\r\n    private async downloadDirectory(directory: DirectoryTree): Promise<void> {\r\n        if (\r\n            !confirm(\r\n                this.props.intl.formatMessage(\r\n                    { id: \"view.instance.files.zip.confirm\" },\r\n                    { path: directory.fileResponse.path }\r\n                )\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        const enumerateDirectory = async (\r\n            dir: ConfigurationFileResponse\r\n        ): Promise<ConfigurationFileResponse[] | null> => {\r\n            let children: ConfigurationFileResponse[] = [];\r\n            let maxPages = 1;\r\n\r\n            const path = dir.path[0] === \"\\\\\" || dir.path[0] === \"/\" ? dir.path.slice(1) : dir.path;\r\n            for (let page = 1; page <= maxPages; ++page) {\r\n                const directoryResponse = await ConfigurationFileClient.getDirectory(\r\n                    this.context.instance.id,\r\n                    path,\r\n                    {\r\n                        page\r\n                    }\r\n                );\r\n                if (directoryResponse.code === StatusCode.OK) {\r\n                    maxPages = directoryResponse.payload.totalPages;\r\n                    children = children.concat(directoryResponse.payload.content);\r\n                } else {\r\n                    this.addError(directoryResponse.error);\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            return children;\r\n        };\r\n\r\n        let errorEncountered = false;\r\n        const downloadSingleFile = async (\r\n            file: ConfigurationFileResponse\r\n        ): Promise<() => Promise<File | null>> => {\r\n            const fileResponse = await ConfigurationFileClient.getConfigFile(\r\n                this.context.instance.id,\r\n                file.path,\r\n                null\r\n            );\r\n\r\n            const pathInZip = file.path.substring(directory.fileResponse.path.length);\r\n            if (fileResponse.code === StatusCode.OK) {\r\n                const phase2 = async (): Promise<File | null> => {\r\n                    const contents = await TransferClient.Download(\r\n                        fileResponse.payload.fileTicket,\r\n                        this.allocateDownload(pathInZip)\r\n                    );\r\n\r\n                    if (contents.code != StatusCode.OK) {\r\n                        this.addError(contents.error);\r\n                        return null;\r\n                    }\r\n\r\n                    const download = contents.payload;\r\n                    const file = new File([download], pathInZip);\r\n                    return file;\r\n                };\r\n\r\n                return phase2;\r\n            }\r\n\r\n            this.addError(fileResponse.error);\r\n            errorEncountered = true;\r\n            return () => Promise.resolve(null);\r\n        };\r\n\r\n        let directoriesToEnumerate: ConfigurationFileResponse[] = [directory.fileResponse];\r\n\r\n        const fileDownloads: Promise<File | null>[] = [];\r\n\r\n        while (directoriesToEnumerate.length > 0) {\r\n            const tasks: Promise<ConfigurationFileResponse[] | null>[] = [];\r\n            for (const directory of directoriesToEnumerate) {\r\n                const task = enumerateDirectory(directory);\r\n                await task;\r\n                tasks.push(task);\r\n            }\r\n\r\n            directoriesToEnumerate = [];\r\n\r\n            if (errorEncountered) {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                return;\r\n            }\r\n\r\n            for (const task of tasks) {\r\n                const dirInfo = await task;\r\n                if (dirInfo == null) {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                for (const directoryEntry of dirInfo) {\r\n                    if (directoryEntry.isDirectory) {\r\n                        directoriesToEnumerate.push(directoryEntry);\r\n                    } else {\r\n                        const innerPromiseFunc = await downloadSingleFile(directoryEntry);\r\n                        fileDownloads.push(innerPromiseFunc());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        await Promise.all(fileDownloads);\r\n        if (errorEncountered) {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n            return;\r\n        }\r\n\r\n        const downloadFiles: File[] = [];\r\n        for (const fileDownload of fileDownloads) {\r\n            downloadFiles.push((await fileDownload)!);\r\n        }\r\n\r\n        const zipBlob = await downloadZip(downloadFiles).blob();\r\n\r\n        const index = Math.max(\r\n            directory.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            directory.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n\r\n        const fileName = directory.fileResponse.path.slice(index + 1) + \".zip\";\r\n        downloadFileUsingBlob(fileName, zipBlob);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private async downloadFile(): Promise<void> {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        const selectedFile = this.state.selectedFile!;\r\n        const index = Math.max(\r\n            selectedFile.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            selectedFile.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const fileName = selectedFile.fileResponse.path.slice(index + 1);\r\n        const response = await ConfigurationFileClient.getConfigFile(\r\n            this.context.instance.id,\r\n            selectedFile.fileResponse.path,\r\n            this.allocateDownload(fileName)\r\n        );\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            downloadFileUsingBlob(fileName, response.payload.content!);\r\n        } else this.addError(response.error);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private async createEntity(\r\n        settings: CreateEntitySettings,\r\n        parent: DirectoryTree\r\n    ): Promise<void> {\r\n        let fileData: ArrayBuffer;\r\n        if (settings.isDirectory) {\r\n            fileData = new Uint8Array();\r\n        } else {\r\n            const inputPromise = new Promise<File | null>(resolve => {\r\n                const input = document.createElement(\"input\");\r\n                input.type = \"file\";\r\n                input.onchange = e => {\r\n                    const files = (e.target as HTMLInputElement)?.files;\r\n                    if (files) resolve(files[0]);\r\n                    else resolve(null);\r\n                };\r\n                input.click();\r\n            });\r\n\r\n            const localFile = await inputPromise;\r\n            if (!localFile) return;\r\n\r\n            // https://stackoverflow.com/questions/423376/how-to-get-the-file-name-from-a-full-path-using-javascript\r\n            fileData = await localFile.arrayBuffer();\r\n        }\r\n\r\n        this.setState({ loading: true });\r\n\r\n        let remoteFilePath = parent.fileResponse.path;\r\n        if (!settings.replace) remoteFilePath += \"/\" + settings.entityName;\r\n        else remoteFilePath = \"/\" + remoteFilePath;\r\n        if (remoteFilePath.startsWith(\"//\")) remoteFilePath = remoteFilePath.substring(1);\r\n        if (settings.isDirectory) remoteFilePath += \"/webpanel.dir.create.tmp\";\r\n\r\n        const response = await ConfigurationFileClient.writeConfigFile(\r\n            this.context.instance.id,\r\n            {\r\n                path: remoteFilePath,\r\n                lastReadHash: settings.replace ? parent.fileResponse.lastReadHash : null\r\n            },\r\n            fileData\r\n        );\r\n\r\n        if (response.code !== StatusCode.OK) {\r\n            this.addError(response.error);\r\n        } else if (settings.replace) {\r\n            parent.fileResponse = response.payload;\r\n        }\r\n\r\n        if (!settings.replace) {\r\n            parent.fullyLoaded = false;\r\n            await this.loadDirectory(parent);\r\n        }\r\n\r\n        let normalizedRemotePath = remoteFilePath.replace(\"\\\\\", \"/\");\r\n        if (normalizedRemotePath.startsWith(\"/\"))\r\n            normalizedRemotePath = normalizedRemotePath.substring(1);\r\n        const newFileNode =\r\n            parent.children.find(child =>\r\n                normalizedRemotePath.startsWith(child.fileResponse.path.replace(\"\\\\\", \"/\"))\r\n            ) ?? null;\r\n\r\n        if (newFileNode)\r\n            if (settings.isDirectory) {\r\n                await this.loadDirectory(newFileNode);\r\n                this.setState({\r\n                    selectedCreateNode: null,\r\n                    selectedFile: null\r\n                });\r\n            } else await this.selectFile(newFileNode);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private clearDirectory(directory: DirectoryTree): void {\r\n        // reload the directory\r\n        directory.fullyLoaded = false;\r\n        directory.children.forEach(child => {\r\n            if (child === this.state.selectedFile)\r\n                this.setState({\r\n                    selectedFile: null\r\n                });\r\n            else if (child === this.state.selectedCreateNode)\r\n                this.setState({\r\n                    selectedCreateNode: null\r\n                });\r\n            if (child.fileResponse.isDirectory) this.clearDirectory(child);\r\n        });\r\n\r\n        directory.children = [];\r\n    }\r\n\r\n    private allocateDownload(filename: string) {\r\n        const indexPromise = new Promise<number>(resolve => {\r\n            this.setState(prevState => {\r\n                const newDownloads = [...prevState.downloads];\r\n                resolve(newDownloads.push(null) - 1);\r\n                return {\r\n                    downloads: newDownloads\r\n                };\r\n            });\r\n        });\r\n        let latest = 0;\r\n        return (progress: ProgressEvent) => {\r\n            const ticket = ++latest;\r\n            void indexPromise.then(index => {\r\n                if (latest !== ticket) {\r\n                    return;\r\n                }\r\n\r\n                this.setState(prevState => {\r\n                    const newDownloads = [...prevState.downloads];\r\n                    newDownloads[index] = {\r\n                        filename,\r\n                        progress,\r\n                        onClose: () => {\r\n                            this.setState(prevState => {\r\n                                const newDownloads = [...prevState.downloads];\r\n                                newDownloads[index] = null;\r\n                                return {\r\n                                    downloads: newDownloads\r\n                                };\r\n                            });\r\n                        }\r\n                    };\r\n                    return {\r\n                        downloads: newDownloads\r\n                    };\r\n                });\r\n            });\r\n        };\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const downloadsFragment = (\r\n            <React.Fragment>\r\n                {this.state.downloads.map((download, index) => {\r\n                    if (!download) return;\r\n                    return <DownloadCard key={index} {...download} />;\r\n                })}\r\n            </React.Fragment>\r\n        );\r\n\r\n        if (this.state.loading) {\r\n            return (\r\n                <React.Fragment>\r\n                    {downloadsFragment}\r\n                    <Loading text=\"loading.instance.files\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        const instanceConfigMode = this.context.instance.configurationType;\r\n\r\n        if (instanceConfigMode === ConfigurationType.Disallowed) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <GenericAlert title=\"view.instance.files.disallowed\" />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const canListDirectories = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.List\r\n        );\r\n\r\n        const canWrite = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Write\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <DebugJsonViewer obj={this.state} />\r\n                <h2 className=\"text-center\">\r\n                    <FormattedMessage id=\"view.instance.files.file_browser\" />\r\n                </h2>\r\n                {this.state.errors.map((err, index) => {\r\n                    if (!err) return;\r\n                    return (\r\n                        <ErrorAlert\r\n                            key={index}\r\n                            error={err}\r\n                            onClose={() =>\r\n                                this.setState(prev => {\r\n                                    const newarr = Array.from(prev.errors);\r\n                                    newarr[index] = undefined;\r\n                                    return {\r\n                                        errors: newarr\r\n                                    };\r\n                                })\r\n                            }\r\n                        />\r\n                    );\r\n                })}\r\n                {downloadsFragment}\r\n                <div className=\"d-flex flex-row\">\r\n                    {canListDirectories ? (\r\n                        <div\r\n                            className=\"text-left\"\r\n                            style={{\r\n                                paddingRight: \"16px\",\r\n                                maxHeight: \"800px\",\r\n                                minWidth: \"200px\",\r\n                                overflowY: \"scroll\"\r\n                            }}>\r\n                            {this.renderDirectory(this.state.rootDirectory!)}\r\n                        </div>\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                maxWidth: \"200px\"\r\n                            }}>\r\n                            <GenericAlert title=\"view.instance.files.disallowed.directory\" />\r\n                        </div>\r\n                    )}\r\n                    <div\r\n                        className=\"flex-fill flex-column text-center align-self-center\"\r\n                        style={{ padding: \"16px\" }}>\r\n                        {!canWrite ? (\r\n                            <GenericAlert title=\"view.instance.files.disallowed.write\" />\r\n                        ) : (\r\n                            <React.Fragment />\r\n                        )}\r\n                        {this.state.selectedCreateNode ? (\r\n                            this.renderCreate()\r\n                        ) : this.state.selectedFile ? (\r\n                            this.renderSelectedFile()\r\n                        ) : canListDirectories ? (\r\n                            <h4>\r\n                                <FormattedMessage id=\"view.instance.files.select_item\" />\r\n                            </h4>\r\n                        ) : (\r\n                            this.renderBrowserlessForms()\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDirectory(dir: DirectoryTree): React.ReactNode {\r\n        const index = Math.max(\r\n            dir.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            dir.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const selected = dir === this.state.selectedFile;\r\n        if (!dir.fileResponse.isDirectory) {\r\n            const fileName = dir.fileResponse.path.slice(index + 1);\r\n            return (\r\n                <li className=\"browser-li\">\r\n                    <Button\r\n                        variant={selected ? \"secondary\" : \"primary\"}\r\n                        onClick={() => void this.shortAsyncAction(() => this.selectFile(dir))}\r\n                        className=\"nowrap\">\r\n                        <FontAwesomeIcon icon={faFileAlt} />\r\n                        &nbsp;{fileName}\r\n                    </Button>\r\n                </li>\r\n            );\r\n        }\r\n\r\n        const directoryName =\r\n            dir == this.state.rootDirectory\r\n                ? \"Configuration\"\r\n                : dir.fileResponse.path.slice(index + 1);\r\n\r\n        return (\r\n            <div className=\"mb-2\">\r\n                <ButtonGroup>\r\n                    <Button\r\n                        variant={!dir.fullyLoaded ? \"secondary\" : \"primary\"}\r\n                        onClick={() => {\r\n                            if (dir.fullyLoaded) {\r\n                                this.clearDirectory(dir);\r\n                                this.forceUpdate();\r\n                            } else {\r\n                                void this.shortAsyncAction(() => this.loadDirectory(dir));\r\n                            }\r\n                        }}>\r\n                        <FontAwesomeIcon icon={dir.fullyLoaded ? faFolderMinus : faFolderPlus} />\r\n                    </Button>\r\n                    <Button\r\n                        className=\"nowrap\"\r\n                        variant={selected ? \"secondary\" : \"primary\"}\r\n                        onClick={() => void this.shortAsyncAction(() => this.selectFile(dir))}>\r\n                        {directoryName}\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <ul className=\"browser-ul\">\r\n                    {dir.children.map(subDir => (\r\n                        <li key={subDir.fileResponse.path}>{this.renderDirectory(subDir)}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderCreate(): React.ReactNode {\r\n        const fields = {\r\n            entityName: {\r\n                type: FieldType.String as FieldType.String,\r\n                name: \"fields.instance.files.create.name\",\r\n                tooltip: \"fields.instance.files.create.name.tip\",\r\n                defaultValue: \"\"\r\n            },\r\n            isDirectory: {\r\n                type: FieldType.Boolean as FieldType.Boolean,\r\n                name: \"fields.instance.files.create.directory\",\r\n                defaultValue: false\r\n            }\r\n        };\r\n\r\n        const createNode = this.state.selectedCreateNode!;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h5>\r\n                    {createNode.fileResponse.path}\r\n                    {createNode.parent ? \"/\" : \"\"}\r\n                </h5>\r\n                <h5>\r\n                    <FormattedMessage id=\"view.instance.files.create\" />\r\n                </h5>\r\n                <hr />\r\n                <InputForm\r\n                    fields={fields}\r\n                    onSave={(fields: CreateEntitySettings) =>\r\n                        void this.createEntity(fields, createNode)\r\n                    }\r\n                    saveMessageId=\"fields.instance.files.create\"\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderSelectedFile(): React.ReactNode {\r\n        const canRead = hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.Read);\r\n        const canWrite = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Write\r\n        );\r\n\r\n        const fileDirectoryTree = this.state.selectedFile!;\r\n        const index = Math.max(\r\n            fileDirectoryTree.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            fileDirectoryTree.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const fileName = fileDirectoryTree.fileResponse.path.slice(index + 1);\r\n\r\n        const fileIsNotRefreshed =\r\n            !fileDirectoryTree.fileResponse.isDirectory &&\r\n            !fileDirectoryTree.fileResponse.lastReadHash;\r\n\r\n        const directoryName =\r\n            fileDirectoryTree == this.state.rootDirectory\r\n                ? \"Configuration\"\r\n                : fileDirectoryTree.fileResponse.path.slice(index + 1);\r\n        const selectedCreateNode = this.state.selectedCreateNode === fileDirectoryTree;\r\n\r\n        const canDeleteDirectories = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Delete\r\n        );\r\n\r\n        let headerText = fileDirectoryTree.fileResponse.path.replaceAll(\"\\\\\", \"/\");\r\n        if (!headerText.startsWith(\"/\")) headerText = \"/\" + headerText;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h5>{headerText}</h5>\r\n                <hr />\r\n                <div className=\"mb-3\">\r\n                    {!fileDirectoryTree.fileResponse.isDirectory ? (\r\n                        <React.Fragment>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-download-location-tooltip\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.download.location\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canRead}\r\n                                    onClick={() => void this.downloadFile()}>\r\n                                    <FormattedMessage id=\"view.instance.files.download\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={!canWrite || !fileIsNotRefreshed ? false : undefined}\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-not-refreshed-tooltip\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.replace.stale\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"warning\"\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canWrite || fileIsNotRefreshed}\r\n                                    onClick={() =>\r\n                                        void this.createEntity(\r\n                                            {\r\n                                                entityName: fileName,\r\n                                                isDirectory: false,\r\n                                                replace: true\r\n                                            },\r\n                                            fileDirectoryTree\r\n                                        )\r\n                                    }>\r\n                                    <FormattedMessage id=\"view.instance.files.replace\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={!canWrite || !fileIsNotRefreshed ? false : undefined}\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-not-refreshed-tooltip-delete\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.replace.stale\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canWrite || fileIsNotRefreshed}\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            confirm(\r\n                                                this.props.intl.formatMessage(\r\n                                                    { id: \"view.instance.files.delete.confirm\" },\r\n                                                    { path: fileDirectoryTree.fileResponse.path }\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                            void this.shortAsyncAction(() => this.deleteFile());\r\n                                    }}>\r\n                                    <FormattedMessage id=\"view.instance.files.delete\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                className=\"mx-2 nowrap\"\r\n                                onClick={() => void this.downloadDirectory(fileDirectoryTree)}>\r\n                                <FontAwesomeIcon icon={faDownload} />\r\n                                &nbsp;\r\n                                <FormattedMessage id=\"view.instance.files.download.directory\" />\r\n                            </Button>\r\n                            <Button\r\n                                variant={selectedCreateNode ? \"secondary\" : \"primary\"}\r\n                                className=\"mx-2 nowrap\"\r\n                                onClick={() => {\r\n                                    if (this.state.selectedCreateNode != fileDirectoryTree) {\r\n                                        this.setState({\r\n                                            selectedCreateNode: fileDirectoryTree\r\n                                        });\r\n                                    }\r\n                                }}>\r\n                                <FontAwesomeIcon icon={faFile} />\r\n                                &nbsp;\r\n                                <FormattedMessage id=\"view.instance.files.create\" />\r\n                            </Button>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={\r\n                                    canDeleteDirectories &&\r\n                                    fileDirectoryTree.fullyLoaded &&\r\n                                    fileDirectoryTree.children.length === 0\r\n                                        ? false\r\n                                        : undefined\r\n                                }\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"cant-delete-dir-tooltip\" {...props}>\r\n                                        <FormattedMessage\r\n                                            id={\r\n                                                !fileDirectoryTree.fullyLoaded\r\n                                                    ? \"view.instance.files.delete.directory.populated.unloaded\"\r\n                                                    : canDeleteDirectories\r\n                                                    ? \"view.instance.files.delete.directory.populated\"\r\n                                                    : \"view.instance.files.disallowed.directory.delete\"\r\n                                            }\r\n                                        />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    className=\"mx-2 nowrap\"\r\n                                    disabled={\r\n                                        !fileDirectoryTree.fullyLoaded ||\r\n                                        !canDeleteDirectories ||\r\n                                        fileDirectoryTree.children.length > 0 ||\r\n                                        fileDirectoryTree == this.state.rootDirectory\r\n                                    }\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            confirm(\r\n                                                this.props.intl.formatMessage(\r\n                                                    {\r\n                                                        id:\r\n                                                            \"view.instance.files.delete.directory.confirm\"\r\n                                                    },\r\n                                                    { directoryName }\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                            void this.shortAsyncAction(() =>\r\n                                                this.deleteDirectory(fileDirectoryTree)\r\n                                            );\r\n                                    }}>\r\n                                    <FontAwesomeIcon icon={faTimes} />\r\n                                    &nbsp;\r\n                                    <FormattedMessage id=\"view.instance.files.delete.directory\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </React.Fragment>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderBrowserlessForms(): React.ReactNode {\r\n        return <WIPNotice />;\r\n    }\r\n}\r\n\r\nFiles.contextType = InstanceEditContext;\r\nexport default injectIntl(Files);\r\n"],"names":["DownloadCard","React","constructor","props","super","this","state","animatedOpen","closeTriggered","componentDidMount","setState","isCompleted","close","componentDidUpdate","progress","loaded","total","setTimeout","onClose","render","completed","in","dimension","className","variant","transition","id","values","file","filename","min","now","Math","max","animated","WIPNotice","border","href","as","VERSION","MODE","window","location","toString","downloadFileUsingBlob","fileName","fileData","unknownNav","navigator","msSaveOrOpenBlob","a","document","createElement","body","appendChild","fileUrl","URL","createObjectURL","download","click","revokeObjectURL","remove","DirectoryTree","fileResponse","parent","children","totalFiles","fullyLoaded","isDirectory","Files","errors","rootDirectory","loading","selectedFile","selectedCreateNode","downloads","createEntity","bind","selectFile","shortAsyncAction","deleteFile","loadDirectory","clearDirectory","addError","error","prevState","Array","from","push","loadRootDir","hasFilesRight","context","instancePermissionSet","ConfigurationRights","path","fileTicket","action","actionPromise","tookTooLong","tooLongPromise","Promise","r","then","race","forceUpdate","dir","response","ConfigurationFileClient","instance","code","StatusCode","parentIndex","indexOf","splice","directory","slice","maxPages","page","payload","totalPages","newChildren","content","map","c","doctoredPath","startsWith","substring","lastReadHash","Uint8Array","parentDirectory","confirm","intl","formatMessage","enumerateDirectory","async","directoryResponse","concat","errorEncountered","downloadSingleFile","pathInZip","length","contents","TransferClient","allocateDownload","File","resolve","directoriesToEnumerate","fileDownloads","tasks","task","dirInfo","directoryEntry","innerPromiseFunc","all","downloadFiles","fileDownload","zipBlob","downloadZip","blob","index","lastIndexOf","settings","inputPromise","input","type","onchange","e","files","target","localFile","arrayBuffer","remoteFilePath","replace","entityName","normalizedRemotePath","newFileNode","find","child","forEach","indexPromise","newDownloads","latest","ticket","downloadsFragment","key","text","configurationType","ConfigurationType","title","canListDirectories","canWrite","obj","err","prev","newarr","undefined","style","paddingRight","maxHeight","minWidth","overflowY","renderDirectory","maxWidth","padding","renderCreate","renderSelectedFile","renderBrowserlessForms","selected","onClick","icon","faFileAlt","directoryName","faFolderMinus","faFolderPlus","subDir","fields","FieldType","name","tooltip","defaultValue","createNode","onSave","saveMessageId","canRead","fileDirectoryTree","fileIsNotRefreshed","canDeleteDirectories","headerText","replaceAll","downloadDirectory","faDownload","faFile","placement","show","overlay","disabled","deleteDirectory","faTimes","downloadFile","contextType","InstanceEditContext","injectIntl"],"sourceRoot":""}