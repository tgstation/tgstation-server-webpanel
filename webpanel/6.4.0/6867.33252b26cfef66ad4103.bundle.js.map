{"version":3,"file":"6867.33252b26cfef66ad4103.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Deployment.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/JobHistory.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/InstanceEdit.tsx"],"sourcesContent":["import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceResponse,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient, { GetInstanceErrors } from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, {\n    StatusCode\n} from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ntype IProps = RouteComponentProps;\ninterface IState {\n    moving: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: [],\n            moving: false\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        if (!!instance.autoUpdateCron && !!instance.autoUpdateInterval) {\n            alert(\"Cannot set both auto update interval and cron!\");\n            return;\n        }\n\n        const instanceId = this.context.instance.id;\n        let newPath: string | undefined;\n        if (instance.path && instance.path != this.context.instance.path) {\n            newPath = instance.path;\n            instance.path = null;\n            instance.online = false; // need to offline the instance before moving it\n            this.setState({ moving: true });\n        }\n\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: instanceId\n        });\n        if (response.code !== StatusCode.OK) {\n            this.addError(response.error);\n            this.setState({ moving: false });\n            return;\n        }\n\n        if (newPath) {\n            //move the instance\n            const response2 = await InstanceClient.editInstance({\n                id: this.context.instance.id,\n                path: newPath\n            });\n\n            if (response2.code !== StatusCode.OK) {\n                this.addError(response2.error);\n                this.setState({ moving: false });\n                await this.context.reloadInstance();\n                return;\n            }\n\n            // we can't use the jobs controller because instance move jobs are special so just wait until the move is done\n            let response3: InternalStatus<InstanceResponse, GetInstanceErrors>;\n            do {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                response3 = await InstanceClient.getInstance(instanceId);\n\n                if (response3.code !== StatusCode.OK) {\n                    this.addError(response3.error);\n                    this.setState({ moving: false });\n                    await this.context.reloadInstance();\n                    return;\n                }\n            } while (response3.payload.moveJob);\n\n            const response4 = await InstanceClient.editInstance({\n                online: true,\n                id: instanceId\n            });\n            if (response4.code !== StatusCode.OK) {\n                this.addError(response4.error);\n                this.setState({ moving: false });\n            } else {\n                JobsController.registerJob(response2.payload.moveJob!, instanceId);\n            }\n        }\n\n        await this.context.reloadInstance();\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateCron: {\n                name: \"fields.instance.cron\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.autoUpdateCron,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                {this.state.moving ? (\n                    <Loading text=\"loading.instance.move\" />\n                ) : (\n                    <InputForm fields={fields} onSave={this.editInstance} />\n                )}\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    CompileJobResponse,\n    DMApiValidationMode,\n    DreamDaemonSecurity,\n    DreamMakerRequest,\n    DreamMakerResponse,\n    DreamMakerRights\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasDreamMakerRight } from \"../../../../utils/misc\";\nimport DeploymentViewer, { DeploymentsData, ViewDataType } from \"../../../utils/DeploymentViewer\";\nimport { addError, displayErrors } from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\n\nexport function Deployment(): JSX.Element {\n    const instanceEditContext = useContext(InstanceEditContext);\n    const errorState = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [deployInfo, setDeployInfo] = useState<DreamMakerResponse | null>(null);\n    const [compileJobs, setCompileJobs] = useState<CompileJobResponse[] | null>(null);\n    const [compileJobsPage, setCompileJobsPage] = useState<number>(1);\n    const [compileJobsTotalPages, setCompileJobsTotalPages] = useState<number>(0);\n\n    // adjusts the size of the viewer pages, undefined uses default server page size\n    const [compileJobsPageSize, setCompileJobsPageSize] = useState<number | undefined>(5);\n\n    const canRead = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Read\n    );\n    const canCompile = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.Compile\n    );\n    const canReadDeployments = hasDreamMakerRight(\n        instanceEditContext.instancePermissionSet,\n        DreamMakerRights.CompileJobs\n    );\n\n    async function loadDeployInfo() {\n        if (!canRead) return setIsLoading(false);\n\n        setIsLoading(true);\n        const response = await DreamMakerClient.getDeployInfo(instanceEditContext.instance.id);\n        setIsLoading(false);\n\n        if (response.code === StatusCode.OK) {\n            setDeployInfo(response.payload);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    async function loadCompileJobs(page: number): Promise<void> {\n        if (!canReadDeployments) {\n            return;\n        }\n\n        // loading is handled in viewer component\n        setCompileJobs(null);\n        const response = await DreamMakerClient.listCompileJobs(instanceEditContext.instance.id, {\n            page,\n            pageSize: compileJobsPageSize\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (!compileJobsPageSize) setCompileJobsPageSize(response.payload.pageSize);\n\n            setCompileJobsTotalPages(response.payload.totalPages);\n            setCompileJobsPage(page);\n            setCompileJobs(response.payload.content);\n        } else {\n            addError(errorState, response.error);\n        }\n    }\n\n    useEffect(() => {\n        void loadDeployInfo();\n        void loadCompileJobs(1);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [instanceEditContext.instance.id]);\n\n    let timeout = undefined;\n    const parsedTimeMatch = /(?:(?<days>\\d+)\\.)?(?<hours>\\d+):(?<minutes>\\d+):(?<seconds>\\d+)/.exec(\n        deployInfo?.timeout ?? \"\"\n    );\n    if (parsedTimeMatch) {\n        const parsedTime = parsedTimeMatch.groups!;\n        timeout =\n            (parseInt(parsedTime.days ?? 0) * 24 + parseInt(parsedTime.hours)) * 60 +\n            parseInt(parsedTime.minutes) +\n            parseInt(parsedTime.seconds) / 60;\n    }\n\n    const fields = {\n        projectName: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.projectname\",\n            tooltip: \"fields.instance.deploy.projectname.desc\",\n            defaultValue: deployInfo?.projectName,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetDme\n            )\n        },\n        compilerAdditionalArguments: {\n            type: FieldType.String as FieldType.String,\n            name: \"fields.instance.deploy.compilerargs\",\n            tooltip: \"fields.instance.deploy.compilerargs.desc\",\n            defaultValue: deployInfo?.compilerAdditionalArguments,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetCompilerArguments\n            )\n        },\n        timeout: {\n            type: FieldType.Number as FieldType.Number,\n            name: \"fields.instance.deploy.timeout\",\n            tooltip: \"fields.instance.deploy.timeout.desc\",\n            defaultValue: timeout,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetTimeout\n            )\n        },\n        apiValidationPort: {\n            type: FieldType.Number as FieldType.Number,\n            min: 0,\n            max: 65535,\n            name: \"fields.instance.deploy.apiport\",\n            tooltip: \"fields.instance.deploy.apiport.desc\",\n            defaultValue: deployInfo?.apiValidationPort,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationPort\n            )\n        },\n        apiValidationSecurityLevel: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DreamDaemonSecurity,\n            name: \"fields.instance.deploy.seclevel\",\n            tooltip: \"fields.instance.deploy.seclevel.desc\",\n            defaultValue: deployInfo?.apiValidationSecurityLevel,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetSecurityLevel\n            )\n        },\n        dmApiValidationMode: {\n            type: FieldType.Enum as FieldType.Enum,\n            enum: DMApiValidationMode,\n            name: \"fields.instance.deploy.validateapi\",\n            tooltip: \"fields.instance.deploy.validateapi.desc\",\n            defaultValue: deployInfo?.dmApiValidationMode,\n            disabled: !hasDreamMakerRight(\n                instanceEditContext.instancePermissionSet,\n                DreamMakerRights.SetApiValidationRequirement\n            )\n        }\n    };\n\n    let deploymentViewData: DeploymentsData | null = null;\n    const paging = {\n        currentPage: compileJobsPage,\n        totalPages: compileJobsTotalPages,\n        loadPage: loadCompileJobs,\n        pageSize: compileJobsPageSize ?? 0 // will always be set before being accessed\n    };\n\n    if (!canReadDeployments) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            paging\n        };\n    } else if (compileJobs) {\n        deploymentViewData = {\n            viewDataType: ViewDataType.CompileJobs,\n            compileJobs,\n            paging\n        };\n    }\n\n    return (\n        <div className=\"text-center\">\n            <DebugJsonViewer obj={{ deployInfo }} />\n            {displayErrors(errorState)}\n            {canReadDeployments ? (\n                <DeploymentViewer viewData={deploymentViewData} />\n            ) : (\n                <GenericAlert title=\"view.instance.no_compile_jobs\" />\n            )}\n            <hr />\n            <h3>\n                <FormattedMessage id=\"view.instance.deploy.title\" />\n            </h3>\n            {!canRead ? <GenericAlert title=\"view.instance.no_metadata\" /> : null}\n            {isLoading ? (\n                <Loading text=\"loading.deployments\" />\n            ) : (\n                <>\n                    <InputForm\n                        hideDisabled={!canRead}\n                        fields={fields}\n                        onSave={async _result => {\n                            let newTimeout: undefined | string = undefined;\n                            if (_result.timeout) {\n                                const days = Math.floor(_result.timeout / (24 * 60));\n                                _result.timeout -= days * (24 * 60);\n                                const hours = Math.floor(_result.timeout / 60);\n                                _result.timeout -= hours * 60;\n                                const minutes = Math.floor(_result.timeout);\n                                _result.timeout -= minutes;\n                                const seconds = Math.floor(_result.timeout * 60);\n                                if (days) {\n                                    newTimeout = `${days}.${hours}:${minutes}:${seconds}`;\n                                } else {\n                                    newTimeout = `${hours}:${minutes}:${seconds}`;\n                                }\n                            }\n\n                            const result = {\n                                ..._result,\n                                timeout: newTimeout\n                            } as DreamMakerRequest;\n\n                            setIsLoading(true);\n                            const response = await DreamMakerClient.updateDeployInfo(\n                                instanceEditContext.instance.id,\n                                result\n                            );\n                            if (response.code === StatusCode.ERROR) {\n                                addError(errorState, response.error);\n                            } else {\n                                await loadDeployInfo();\n                            }\n                            setIsLoading(false);\n                        }}\n                    />\n                    <hr />\n                    <SimpleToolTip\n                        tooltipid=\"generic.no_perm\"\n                        show={canCompile ? false : undefined}>\n                        <Button\n                            disabled={!canCompile}\n                            onClick={() =>\n                                void (async () => {\n                                    const response = await DreamMakerClient.startCompile(\n                                        instanceEditContext.instance.id\n                                    );\n                                    if (response.code === StatusCode.ERROR) {\n                                        addError(errorState, response.error);\n                                    } else {\n                                        JobsController.registerJob(\n                                            response.payload,\n                                            instanceEditContext.instance.id\n                                        );\n                                        JobsController.fastmode = 5;\n                                    }\n                                })()\n                            }>\n                            <FormattedMessage id=\"view.instance.deploy.deploy\" />\n                        </Button>\n                    </SimpleToolTip>\n                </>\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport JobsClient, { TGSJobResponse } from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport JobCard from \"../../../utils/JobCard\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\nexport default function JobHistory(): JSX.Element {\n    const instanceEditContext = React.useContext(InstanceEditContext);\n\n    const [jobs, setJobs] = useState<TGSJobResponse[]>([]);\n    const [errors, setErrors] = useState<Array<InternalError<ErrorCode> | undefined>>([]);\n    const [loading, setLoading] = useState(true);\n    const [page, setPage] = useState(\n        RouteData.jobhistorypage.get(instanceEditContext.instance.id) ?? 1\n    );\n    const [maxPage, setMaxPage] = useState<number | undefined>(undefined);\n\n    //const [];\n\n    useEffect(() => {\n        async function loadJobs() {\n            const response = await JobsClient.listJobs(instanceEditContext.instance.id, {\n                page: page\n            });\n            if (response.code === StatusCode.OK) {\n                if (page > response.payload.totalPages && response.payload.totalPages !== 0)\n                    setPage(1);\n                setJobs(response.payload.content);\n                setMaxPage(response.payload.totalPages);\n            } else {\n                addError(response.error);\n            }\n            setLoading(false);\n        }\n\n        RouteData.jobhistorypage.set(instanceEditContext.instance.id, page);\n        setLoading(true);\n        void loadJobs();\n    }, [page, instanceEditContext.instance.id]);\n\n    useEffect(() => {}, [errors]);\n\n    function addError(error: InternalError<ErrorCode>): void {\n        setErrors(prevState => {\n            const errors = Array.from(prevState);\n            errors.push(error);\n            return errors;\n        });\n    }\n\n    async function onCancel(job: TGSJobResponse) {\n        const status = await JobsClient.deleteJob(job.instanceId, job.id);\n\n        if (status.code === StatusCode.OK) {\n            JobsController.fastmode = 5;\n        } else {\n            addError(status.error);\n        }\n    }\n\n    if (loading) {\n        return <Loading text=\"loading.instance.jobs.list\" />;\n    }\n\n    return (\n        <div>\n            <DebugJsonViewer obj={jobs} />\n            {errors.map((err, index) => {\n                if (!err) return;\n                return (\n                    <ErrorAlert\n                        key={index}\n                        error={err}\n                        onClose={() =>\n                            setErrors(prev => {\n                                const newarr = Array.from(prev);\n                                newarr[index] = undefined;\n                                return newarr;\n                            })\n                        }\n                    />\n                );\n            })}\n            {jobs\n                .sort((a, b) => b.id - a.id)\n                .filter(job => !!job.stoppedAt)\n                .map(job => (\n                    <JobCard job={job} key={job.id} onCancel={j => void onCancel(j)} />\n                ))}\n            <PageHelper\n                selectPage={newPage => setPage(newPage)}\n                totalPages={maxPage ?? 1}\n                currentPage={page}\n            />\n        </div>\n    );\n}\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { faGamepad } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentType } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Tab from \"react-bootstrap/Tab\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport {\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    EngineRights,\n    InstancePermissionSetResponse,\n    RepositoryRights\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions, { InstanceEditSidebar } from \"../../../ApiClient/util/config\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport {\n    InstanceEditContext,\n    UnsafeInstanceEditContext\n} from \"../../../contexts/InstanceEditContext\";\nimport { AppRoutes, RouteData } from \"../../../utils/routes\";\nimport AccessDenied from \"../../utils/AccessDenied\";\nimport Loading from \"../../utils/Loading\";\nimport WIPNotice from \"../../utils/WIPNotice\";\nimport ChatBots from \"./Edit/ChatBots\";\nimport Config from \"./Edit/Config\";\nimport { Deployment } from \"./Edit/Deployment\";\nimport Engine from \"./Edit/Engine\";\nimport Files from \"./Edit/Files\";\nimport InstancePermissions from \"./Edit/InstancePermissions\";\nimport JobHistory from \"./Edit/JobHistory\";\nimport Repository from \"./Edit/Repository\";\nimport Server from \"./Edit/Server\";\n\ntype IProps = RouteComponentProps<{ id: string; tab?: string }>;\ntype IState = Omit<UnsafeInstanceEditContext, \"user\" | \"serverInfo\"> & {\n    tab: string;\n    instanceid: number;\n};\n\nconst minimumEnginePerms =\n    EngineRights.ReadActive |\n    EngineRights.ListInstalled |\n    EngineRights.InstallOfficialOrChangeActiveByondVersion |\n    EngineRights.InstallCustomByondVersion |\n    EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion |\n    EngineRights.InstallCustomOpenDreamVersion;\n\nconst minimumServerPerms =\n    DreamDaemonRights.SetPort |\n    DreamDaemonRights.SetAutoStart |\n    DreamDaemonRights.SetSecurity |\n    DreamDaemonRights.ReadMetadata |\n    DreamDaemonRights.SetWebClient |\n    DreamDaemonRights.SoftRestart |\n    DreamDaemonRights.SoftShutdown |\n    DreamDaemonRights.Restart |\n    DreamDaemonRights.Shutdown |\n    DreamDaemonRights.Start |\n    DreamDaemonRights.SetStartupTimeout |\n    DreamDaemonRights.SetHealthCheckInterval |\n    DreamDaemonRights.CreateDump |\n    DreamDaemonRights.SetTopicTimeout |\n    DreamDaemonRights.SetAdditionalParameters |\n    DreamDaemonRights.SetVisibility;\n\nconst minimumRepoPerms =\n    RepositoryRights.SetOrigin |\n    RepositoryRights.SetSha |\n    RepositoryRights.MergePullRequest |\n    RepositoryRights.UpdateBranch |\n    RepositoryRights.ChangeCommitter |\n    RepositoryRights.ChangeTestMergeCommits |\n    RepositoryRights.ChangeCredentials |\n    RepositoryRights.SetReference |\n    RepositoryRights.Read |\n    RepositoryRights.ChangeAutoUpdateSettings |\n    RepositoryRights.Delete |\n    RepositoryRights.ChangeSubmoduleUpdate;\n\nconst minimumDeployPerms =\n    DreamMakerRights.Read |\n    DreamMakerRights.Compile |\n    DreamMakerRights.SetApiValidationPort |\n    DreamMakerRights.SetDme |\n    DreamMakerRights.SetApiValidationRequirement |\n    DreamMakerRights.SetTimeout |\n    DreamMakerRights.SetSecurityLevel;\n\nconst minimumChatPerms = ChatBotRights.Read | ChatBotRights.Create;\n\nconst minimumFilePerms =\n    ConfigurationRights.Read | ConfigurationRights.List | ConfigurationRights.Write;\n\nclass InstanceEdit extends React.Component<IProps, IState> {\n    public static tabs: [\n        string,\n        IconProp,\n        (\n            instancePermissionSet: InstancePermissionSetResponse,\n            generalContext: GeneralContext\n        ) => boolean,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ComponentType<any>?\n    ][] = [\n        [\"info\", \"info\", () => true, Config],\n        [\n            \"repository\",\n            \"code-branch\",\n            instancePermissionSet => !!(instancePermissionSet.repositoryRights & minimumRepoPerms),\n            Repository\n        ],\n        [\n            \"engine\",\n            faGamepad,\n            instancePermissionSet => !!(instancePermissionSet.engineRights & minimumEnginePerms),\n            Engine\n        ],\n        [\n            \"deployment\",\n            \"hammer\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamMakerRights & minimumDeployPerms),\n            Deployment\n        ],\n        [\n            \"dreamdaemon\",\n            \"server\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.dreamDaemonRights & minimumServerPerms),\n            Server\n        ],\n        [\n            \"chatbots\",\n            \"comments\",\n            instancePermissionSet => !!(instancePermissionSet.chatBotRights & minimumChatPerms),\n            ChatBots\n        ],\n        [\n            \"files\",\n            \"folder-open\",\n            instancePermissionSet =>\n                !!(instancePermissionSet.configurationRights & minimumFilePerms),\n            Files\n        ],\n        [\"users\", \"users\", () => true, InstancePermissions],\n        [\"jobs\", \"stream\", () => true, JobHistory]\n    ];\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.reloadInstance = this.reloadInstance.bind(this);\n        this.deleteContextError = this.deleteContextError.bind(this);\n\n        RouteData.selectedinstanceid = parseInt(this.props.match.params.id);\n\n        this.state = {\n            tab: props.match.params.tab ?? InstanceEdit.tabs[0][0],\n            errors: new Set(),\n            instance: null,\n            instancePermissionSet: null,\n            reloadInstance: this.reloadInstance,\n            deleteError: this.deleteContextError,\n            instanceid: parseInt(this.props.match.params.id)\n        };\n    }\n\n    public deleteContextError(error: InternalError): void {\n        this.setState(prev => {\n            const newSet = new Set(prev.errors);\n            newSet.delete(error);\n            return {\n                errors: newSet\n            };\n        });\n    }\n\n    public componentDidMount(): void {\n        void this.reloadInstance();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>) {\n        if (\n            this.props.match.params.tab &&\n            prevProps.match.params.tab != this.props.match.params.tab\n        ) {\n            this.setState({\n                tab: this.props.match.params.tab\n            });\n        }\n    }\n\n    public async reloadInstance(): Promise<void> {\n        this.setState({\n            instance: null,\n            instancePermissionSet: null\n        });\n        const response = await InstanceClient.getInstance(this.state.instanceid);\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                instance: response.payload\n            });\n\n            const response2 = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.state.instanceid,\n                true\n            );\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSet: response2.payload\n                });\n            } else {\n                this.setState(prev => {\n                    const newSet = new Set(prev.errors);\n                    newSet.add(response2.error);\n                    return {\n                        instancePermissionSet: null,\n                        errors: newSet\n                    };\n                });\n            }\n        } else {\n            this.setState(prev => {\n                const newSet = new Set(prev.errors);\n                newSet.add(response.error);\n                return {\n                    instance: null,\n                    errors: newSet\n                };\n            });\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (!this.state.instance || !this.state.instancePermissionSet) {\n            return <Loading text=\"loading.instance\" />;\n        }\n\n        const nav = () => {\n            return (\n                <Nav\n                    defaultActiveKey={this.state.tab}\n                    onSelect={eventKey => {\n                        eventKey = eventKey ?? InstanceEdit.tabs[0][0];\n                        RouteData.selectedinstanceedittab = eventKey;\n                        this.props.history.push(\n                            AppRoutes.instanceedit.link ?? AppRoutes.instanceedit.route\n                        );\n                        this.setState({ tab: eventKey ?? InstanceEdit.tabs[0][0] });\n                    }}\n                    fill\n                    variant=\"pills\"\n                    activeKey={this.state.tab}\n                    className={\n                        \"flex-nowrap text-nowrap flex-column hover-bar sticky-top \" +\n                        (configOptions.instanceeditsidebar.value === InstanceEditSidebar.COLLAPSE\n                            ? \"pin-close\"\n                            : configOptions.instanceeditsidebar.value === InstanceEditSidebar.EXPAND\n                              ? \"pin-open\"\n                              : \"\")\n                    }\n                    style={{ top: \"8em\" }}>\n                    {InstanceEdit.tabs.map(([tabKey, icon, accessCb, component]) => {\n                        if (!this.state.instancePermissionSet) {\n                            throw Error(\n                                \"this.state.instancePermissionSet is null in instanceedit nav map\"\n                            );\n                        }\n                        const wip = !component;\n                        const accessDenied = !accessCb(\n                            this.state.instancePermissionSet,\n                            this.context\n                        );\n\n                        return (\n                            <Nav.Item key={tabKey}>\n                                <Nav.Link\n                                    eventKey={tabKey}\n                                    bsPrefix=\"nav-link instanceedittab\"\n                                    className={\n                                        (wip ? \"no-access text-white\" : \"\") +\n                                        (accessDenied ? \"no-access text-white font-italic\" : \"\") +\n                                        \" text-left\"\n                                    }>\n                                    <React.Fragment>\n                                        <FontAwesomeIcon\n                                            icon={accessDenied ? \"lock\" : icon}\n                                            fixedWidth\n                                        />\n                                        <div\n                                            className={\n                                                \"tab-text d-inline-block \" +\n                                                (accessDenied ? \"font-weight-lighter\" : \"\")\n                                            }>\n                                            <span className=\"pl-1\">\n                                                <FormattedMessage\n                                                    id={`view.instanceedit.tabs.${tabKey}`}\n                                                />\n                                            </span>\n                                        </div>\n                                    </React.Fragment>\n                                </Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n            );\n        };\n\n        return (\n            <InstanceEditContext.Provider\n                value={\n                    Object.assign(\n                        { user: this.context.user, serverInfo: this.context.serverInfo },\n                        this.state\n                    ) as InstanceEditContext\n                }>\n                <Card className=\"behind-nav\">\n                    <Card.Header className=\"text-center mb-2 sticky-top\">\n                        <h3>\n                            <FormattedMessage\n                                id=\"view.instanceedit.title\"\n                                values={{\n                                    instanceid: this.props.match.params.id,\n                                    instancename: this.state.instance.name\n                                }}\n                            />\n                        </h3>\n                        <h5 className=\"text-white-50\">\n                            <FormattedMessage id={`view.instanceedit.tabs.${this.state.tab}`} />\n                        </h5>\n                    </Card.Header>\n                    <Tab.Container\n                        mountOnEnter\n                        unmountOnExit\n                        id=\"instanceedit\"\n                        activeKey={this.state.tab}>\n                        <div className=\"d-flex flex-row z-front\">\n                            <Card.Body className=\"flex-grow-0\">{nav()}</Card.Body>\n                            <Card.Body className=\"bg-body\">\n                                <Tab.Content>\n                                    {InstanceEdit.tabs.map(([tabKey, , accessCb, Comp]) => {\n                                        if (!this.state.instancePermissionSet) {\n                                            throw Error(\n                                                \"this.state.instancePermissionSet is null in render card map\"\n                                            );\n                                        }\n                                        return (\n                                            <Tab.Pane eventKey={tabKey} key={tabKey}>\n                                                {Comp ? (\n                                                    !accessCb(\n                                                        this.state.instancePermissionSet,\n                                                        this.context\n                                                    ) ? (\n                                                        <AccessDenied />\n                                                    ) : (\n                                                        <Comp />\n                                                    )\n                                                ) : (\n                                                    <WIPNotice />\n                                                )}\n                                            </Tab.Pane>\n                                        );\n                                    })}\n                                </Tab.Content>\n                            </Card.Body>\n                        </div>\n                    </Tab.Container>\n                </Card>\n            </InstanceEditContext.Provider>\n        );\n    }\n}\n\nInstanceEdit.contextType = GeneralContext;\nexport default withRouter(InstanceEdit);\n"],"names":["InstanceSettings","React","constructor","props","super","this","editInstance","bind","state","errors","moving","addError","error","setState","prevState","Array","from","push","instance","autoUpdateCron","autoUpdateInterval","alert","instanceId","context","id","newPath","path","online","response","InstanceClient","code","StatusCode","OK","response2","reloadInstance","response3","Promise","resolve","setTimeout","getInstance","payload","moveJob","response4","JobsController","registerJob","render","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","fields","name","type","FieldType","String","defaultValue","disabled","InstanceManagerRights","Rename","Relocate","chatBotLimit","Number","min","SetChatBotLimit","SetAutoUpdate","configurationType","Enum","enum","ConfigurationType","SetConfiguration","className","FormattedMessage","DebugJsonViewer","obj","map","err","index","ErrorAlert","key","onClose","prev","newarr","undefined","Loading","text","InputForm","onSave","contextType","InstanceEditContext","withRouter","Deployment","instanceEditContext","useContext","errorState","useState","isLoading","setIsLoading","deployInfo","setDeployInfo","compileJobs","setCompileJobs","compileJobsPage","setCompileJobsPage","compileJobsTotalPages","setCompileJobsTotalPages","compileJobsPageSize","setCompileJobsPageSize","canRead","hasDreamMakerRight","instancePermissionSet","DreamMakerRights","Read","canCompile","Compile","canReadDeployments","CompileJobs","async","loadDeployInfo","DreamMakerClient","getDeployInfo","loadCompileJobs","page","listCompileJobs","pageSize","totalPages","content","timeout","useEffect","parsedTimeMatch","exec","parsedTime","groups","parseInt","days","hours","minutes","seconds","projectName","tooltip","SetDme","compilerAdditionalArguments","SetCompilerArguments","SetTimeout","apiValidationPort","max","SetApiValidationPort","apiValidationSecurityLevel","DreamDaemonSecurity","SetSecurityLevel","dmApiValidationMode","DMApiValidationMode","SetApiValidationRequirement","deploymentViewData","paging","currentPage","loadPage","viewDataType","ViewDataType","displayErrors","DeploymentViewer","viewData","GenericAlert","title","hideDisabled","newTimeout","_result","Math","floor","result","updateDeployInfo","ERROR","SimpleToolTip","tooltipid","show","Button","onClick","startCompile","fastmode","JobHistory","jobs","setJobs","setErrors","loading","setLoading","setPage","RouteData","jobhistorypage","get","maxPage","setMaxPage","set","JobsClient","listJobs","loadJobs","sort","a","b","filter","job","stoppedAt","JobCard","onCancel","j","status","deleteJob","PageHelper","selectPage","newPage","minimumEnginePerms","EngineRights","ReadActive","ListInstalled","InstallOfficialOrChangeActiveByondVersion","InstallCustomByondVersion","InstallOfficialOrChangeActiveOpenDreamVersion","InstallCustomOpenDreamVersion","minimumServerPerms","DreamDaemonRights","SetPort","SetAutoStart","SetSecurity","ReadMetadata","SetWebClient","SoftRestart","SoftShutdown","Restart","Shutdown","Start","SetStartupTimeout","SetHealthCheckInterval","CreateDump","SetTopicTimeout","SetAdditionalParameters","SetVisibility","minimumRepoPerms","RepositoryRights","SetOrigin","SetSha","MergePullRequest","UpdateBranch","ChangeCommitter","ChangeTestMergeCommits","ChangeCredentials","SetReference","ChangeAutoUpdateSettings","Delete","ChangeSubmoduleUpdate","minimumDeployPerms","minimumChatPerms","ChatBotRights","Create","minimumFilePerms","ConfigurationRights","List","Write","InstanceEdit","deleteContextError","selectedinstanceid","match","params","tab","tabs","Set","deleteError","instanceid","newSet","delete","componentDidMount","componentDidUpdate","prevProps","InstancePermissionSetClient","getCurrentInstancePermissionSet","add","Provider","value","Object","assign","serverInfo","Card","Header","values","instancename","Tab","Container","mountOnEnter","unmountOnExit","activeKey","Body","nav","Nav","defaultActiveKey","onSelect","eventKey","selectedinstanceedittab","history","AppRoutes","instanceedit","link","route","fill","variant","configOptions","instanceeditsidebar","InstanceEditSidebar","COLLAPSE","EXPAND","style","top","tabKey","icon","accessCb","component","Error","wip","accessDenied","Item","Link","bsPrefix","FontAwesomeIcon","fixedWidth","Content","Comp","Pane","AccessDenied","WIPNotice","Config","repositoryRights","Repository","faGamepad","engineRights","Engine","dreamMakerRights","dreamDaemonRights","Server","chatBotRights","ChatBots","configurationRights","Files","InstancePermissions","GeneralContext"],"sourceRoot":""}