{"version":3,"file":"784.ac66013d76da5be7ebfa.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/utils/tgs_changelog.ts","webpack://tgstation-server-control-panel/./src/components/views/Admin/Update.tsx","webpack://tgstation-server-control-panel/./src/utils/delay.ts","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","export enum TgsComponent {\n    Configuration = \"Configuration\",\n    Core = \"Core\",\n    HostWatchdog = \"HostWatchdog\",\n    WebControlPanel = \"WebControlPanel\",\n    HttpApi = \"HttpApi\",\n    DreamMakerApi = \"DreamMakerApi\",\n    InteropApi = \"InteropApi\",\n    NugetCommon = \"NugetCommon\",\n    NugetApi = \"NugetApi\",\n    NugetClient = \"NugetClient\"\n}\n\ninterface Change {\n    Descriptions: string[];\n    Author: string;\n    PullRequest: number;\n}\n\ntype ComponentVersionMap = {\n    [key in TgsComponent]: string;\n};\n\nexport interface Changelist {\n    Version: string;\n    ComponentVersions?: ComponentVersionMap;\n    Changes?: Change[];\n    Unreleased?: boolean;\n}\n\ntype ComponentMap = {\n    [key in TgsComponent]: Changelist[];\n};\n\nexport default interface TGSChangelog {\n    Components: ComponentMap;\n}\n","import { faUpload } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, ReactNode } from \"react\";\nimport { Modal } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport ReactMarkdown from \"react-markdown\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { gte, lt, lte, SemVer } from \"semver\";\nimport YAML from \"yaml\";\n\nimport AdminClient, { UpdateErrors } from \"../../../ApiClient/AdminClient\";\nimport {\n    AdministrationRights,\n    ServerUpdateResponse\n} from \"../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../../ApiClient/ServerClient\";\nimport UserClient from \"../../../ApiClient/UserClient\";\nimport { GeneralContext } from \"../../../contexts/GeneralContext\";\nimport GithubClient, { TGSVersion } from \"../../../utils/GithubClient\";\nimport { hasAdminRight, resolvePermissionSet } from \"../../../utils/misc\";\nimport { AppRoutes } from \"../../../utils/routes\";\nimport TGSChangelog, { Changelist, TgsComponent } from \"../../../utils/tgs_changelog\";\nimport ErrorAlert from \"../../utils/ErrorAlert\";\nimport { DebugJsonViewer } from \"../../utils/JsonViewer\";\nimport Loading from \"../../utils/Loading\";\n\ntype IProps = RouteComponentProps<{\n    all: string;\n}>;\ninterface IState {\n    versions: TGSVersion[];\n    changelog: TGSChangelog | null;\n    gitHubOwner: string | null;\n    gitHubRepo: string | null;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    //option is the numerical representation of the version\n    selectedOption?: string;\n    //this is the actual version\n    selectedVersion?: TGSVersion;\n    //timer used to delay the user on the release notes page\n    timer?: number | null;\n    //seconds left for the release notes page\n    secondsLeft?: number | null;\n    //redirect to home page\n    updating?: boolean;\n    warnedAboutMajorUpdates?: boolean;\n}\n\nclass Update extends React.Component<IProps, IState> {\n    public declare context: GeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadNotes = this.loadNotes.bind(this);\n        this.updateServer = this.updateServer.bind(this);\n\n        this.state = {\n            changelog: null,\n            versions: [],\n            errors: [],\n            loading: true,\n            gitHubOwner: null,\n            gitHubRepo: null\n        };\n    }\n\n    public componentDidMount(): void {\n        void (async () => {\n            await this.loadVersions();\n\n            this.setState({\n                loading: false\n            });\n        })();\n    }\n\n    public componentWillUnmount(): void {\n        if (this.state.timer) {\n            window.clearInterval(this.state.timer);\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions(): Promise<void> {\n        if (\n            !hasAdminRight(\n                resolvePermissionSet(this.context.user),\n                AdministrationRights.ChangeVersion\n            )\n        ) {\n            return;\n        }\n\n        const adminInfo = await AdminClient.getAdminInfo();\n\n        switch (adminInfo.code) {\n            case StatusCode.ERROR: {\n                return this.addError(adminInfo.error);\n            }\n            case StatusCode.OK: {\n                const url = adminInfo.payload.trackedRepositoryUrl;\n                const matcher = /https?:\\/\\/(github\\.com)\\/(.*?)\\/(.*)/;\n                const results = matcher.exec(url);\n\n                if (!results) {\n                    return this.addError(\n                        new InternalError(ErrorCode.APP_FAIL, {\n                            jsError: Error(`Unknown repository url format: ${url}`)\n                        })\n                    );\n                }\n\n                if (results[1] !== \"github.com\") {\n                    this.setState({\n                        versions: [\n                            {\n                                body: \"Updates unavailable to non github repos\",\n                                version: \"Updates unavailable to non github repos\",\n                                current: true,\n                                old: true\n                            }\n                        ]\n                    });\n                    return;\n                }\n\n                this.setState({\n                    gitHubOwner: results[2],\n                    gitHubRepo: results[3]\n                });\n\n                const loadChangelogPromise = this.loadChangelog(results[2], results[3]);\n\n                const versionInfo = await GithubClient.getVersions({\n                    owner: results[2],\n                    repo: results[3],\n                    current: this.context.serverInfo.version,\n                    all: !!this.props.match.params.all\n                });\n                console.log(\"Version info: \", versionInfo);\n                switch (versionInfo.code) {\n                    case StatusCode.ERROR: {\n                        return this.addError(versionInfo.error);\n                    }\n                    case StatusCode.OK: {\n                        const changelog = await loadChangelogPromise;\n                        this.setState({\n                            changelog,\n                            versions: versionInfo.payload\n                        });\n                    }\n                }\n            }\n        }\n    }\n\n    private async loadChangelog(owner: string, repo: string): Promise<TGSChangelog | null> {\n        const changelogYmlB64 = await GithubClient.getFile(\n            owner,\n            repo,\n            \"changelog.yml\",\n            \"gh-pages\"\n        );\n        switch (changelogYmlB64.code) {\n            case StatusCode.ERROR: {\n                this.addError(changelogYmlB64.error);\n                break;\n            }\n            case StatusCode.OK: {\n                try {\n                    const changelogYml = window.atob(changelogYmlB64.payload);\n                    return YAML.parse(changelogYml) as TGSChangelog;\n                } catch {\n                    this.addError(new InternalError(ErrorCode.BAD_YML, { void: true }));\n                }\n\n                break;\n            }\n        }\n\n        return null;\n    }\n\n    private loadNotes(): void {\n        for (const version of this.state.versions) {\n            if (version.version !== this.state.selectedOption) continue;\n\n            const timer = window.setInterval(() => {\n                this.setState(prevState => {\n                    if (prevState.secondsLeft === undefined || prevState.secondsLeft === null)\n                        return prevState;\n                    //clear the timer if we are ticking the last tick\n                    if (prevState.secondsLeft === 1) {\n                        window.clearInterval(prevState.timer!);\n                        return {\n                            timer: null,\n                            secondsLeft: null\n                        } as IState;\n                    }\n\n                    return {\n                        secondsLeft: prevState.secondsLeft - 1\n                    } as IState;\n                });\n            }, 1000);\n\n            this.setState({\n                selectedVersion: version,\n                timer: timer,\n                secondsLeft: 10\n            });\n            return;\n        }\n    }\n\n    private async uploadVersion(): Promise<void> {\n        const inputPromise = new Promise<File | null>(resolve => {\n            const input = document.createElement(\"input\");\n            input.type = \"file\";\n            input.onchange = e => {\n                const files = (e.target as HTMLInputElement)?.files;\n                if (files) resolve(files[0]);\n                else resolve(null);\n            };\n            input.click();\n        });\n\n        const localFile = await inputPromise;\n        if (!localFile) return;\n\n        if (!localFile.name.toLowerCase().endsWith(\".zip\")) {\n            alert(\"Invalid zipfile!\");\n            return;\n        }\n\n        // https://stackoverflow.com/questions/423376/how-to-get-the-file-name-from-a-full-path-using-javascript\n        const fileData = await localFile.arrayBuffer();\n\n        const targetVersionStr = prompt(\"Enter the TGS version semver:\");\n        if (!targetVersionStr) return;\n\n        const targetVersionSemver = new SemVer(targetVersionStr);\n\n        // reformat it for them in case they fucked up a little\n        const targetVersion = `${targetVersionSemver.major}.${targetVersionSemver.minor}.${targetVersionSemver.patch}`;\n\n        if (targetVersion != targetVersionStr) {\n            alert(\"Invalid semver!\");\n            return;\n        }\n\n        if (\n            !confirm(\n                `JUST WHAT DO YOU THINK YOU'RE DOING!? This is your only and final warning: Uploading a TGS Version .zip that is improperly formatted or that does not match the version you just entered (${targetVersion}) can brick your installation! Think carefully before pressing OK to continue.`\n            )\n        ) {\n            return;\n        }\n\n        await this.serverUpdated(AdminClient.uploadVersion(targetVersion, fileData));\n    }\n\n    private async updateServer(): Promise<void> {\n        if (!this.state.selectedOption) {\n            console.error(\"Attempted to update server to a no version\");\n            this.setState({\n                selectedVersion: undefined\n            });\n            return;\n        }\n\n        await this.serverUpdated(AdminClient.updateServer(this.state.selectedOption));\n    }\n\n    private async serverUpdated(\n        request: Promise<InternalStatus<ServerUpdateResponse, UpdateErrors>>\n    ): Promise<void> {\n        const response = await request;\n\n        switch (response.code) {\n            case StatusCode.ERROR: {\n                this.addError(response.error);\n                return;\n            }\n            case StatusCode.OK: {\n                break;\n            }\n        }\n\n        ServerClient.autoLogin = false;\n        // i need that timer to be async\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        window.setInterval(async () => {\n            const response = await UserClient.getCurrentUser(true);\n            switch (response.code) {\n                //we wait until we get an error which means either it rebooted and our creds are bullshit, or we rebooted and the api is different\n                //in both cases, we should reboot\n                case StatusCode.ERROR: {\n                    window.location.reload();\n                }\n            }\n        }, 2000);\n        this.setState({\n            updating: true\n        });\n    }\n\n    private buildVersionDiffFromChangelog(targetVersion: string): string | null {\n        const releaseNotes = this.state.changelog;\n        if (!releaseNotes) {\n            return null;\n        }\n\n        const currentVersion = this.context.serverInfo.version;\n\n        const targetVersionSemver = new SemVer(targetVersion);\n        const currentVersionSemver = new SemVer(currentVersion);\n\n        let markdown = \"\";\n\n        const targetComponentVersions = releaseNotes.Components[TgsComponent.Core].find(\n            changelist => changelist.Version == targetVersion\n        )!.ComponentVersions!;\n\n        markdown += `Please refer to the [README](https://github.com/tgstation/tgstation-server#setup) for setup instructions. Full changelog can be found [here](https://raw.githubusercontent.com/tgstation/tgstation-server/gh-pages/changelog.yml).\\n\\n#### Component Versions\\nCore: ${targetVersion}\\nConfiguration: ${targetComponentVersions.Configuration}\\nHTTP API: ${targetComponentVersions.HttpApi}\\nDreamMaker API: ${targetComponentVersions.DreamMakerApi} (Interop: ${targetComponentVersions.InteropApi})\\n[Web Control Panel](https://github.com/tgstation/tgstation-server-webpanel): ${targetComponentVersions.WebControlPanel}\\nHost Watchdog: ${targetComponentVersions.HostWatchdog}\\n\\n`;\n\n        let lowerVersion: string;\n        let higherVersion: string;\n        if (lt(targetVersionSemver, currentVersionSemver)) {\n            markdown +=\n                \"## _The version you are switching to is below the current version._\\n## _The following changes will be **un**-applied!_\";\n            lowerVersion = targetVersion;\n            higherVersion = currentVersion;\n        } else {\n            lowerVersion = currentVersion;\n            higherVersion = targetVersion;\n        }\n\n        const lowerVersionSemver = new SemVer(lowerVersion);\n        const higherVersionSemver = new SemVer(higherVersion);\n\n        // implemented similarly to https://github.com/tgstation/tgstation-server/blob/63815c950f18fe999c1dade7fa2773752de9f149/tools/Tgstation.Server.ReleaseNotes/Program.cs#L1392\n        const coreChangelists = releaseNotes.Components[TgsComponent.Core]\n            .filter(changelist => {\n                const changelistVersionSemver = new SemVer(changelist.Version);\n                return (\n                    gte(changelistVersionSemver, lowerVersionSemver) &&\n                    lte(changelistVersionSemver, higherVersionSemver)\n                );\n            })\n            .sort((changelistA, changelistB) =>\n                new SemVer(changelistA.Version).compare(changelistB.Version)\n            )\n            .reverse();\n\n        const currentReleaseChangelists: Map<TgsComponent, Changelist>[] = [];\n\n        for (let i = 0; i < coreChangelists.length - 1; ++i) {\n            const currentDic = new Map<TgsComponent, Changelist>();\n            currentReleaseChangelists.push(currentDic);\n            const nowRelease = coreChangelists[i];\n            const previousRelease = coreChangelists[i + 1];\n\n            currentDic.set(TgsComponent.Core, nowRelease);\n            Object.keys(nowRelease.ComponentVersions!).forEach(componentStr => {\n                const component = componentStr as TgsComponent;\n                if (\n                    component == TgsComponent.Core ||\n                    component == TgsComponent.NugetClient ||\n                    component == TgsComponent.NugetApi ||\n                    component == TgsComponent.NugetCommon\n                )\n                    return;\n\n                const componentVersionStr = nowRelease.ComponentVersions![component];\n                if (!componentVersionStr) return;\n\n                const componentVersion = new SemVer(componentVersionStr);\n\n                const previousComponentVersionStr = previousRelease.ComponentVersions![component];\n                if (!previousComponentVersionStr) return;\n\n                const takeNotesFrom = new SemVer(previousComponentVersionStr);\n                const changesEnumerator = releaseNotes.Components[component]\n                    .filter(changelist => {\n                        const changelistVersion = new SemVer(changelist.Version);\n                        return (\n                            changelistVersion > takeNotesFrom &&\n                            changelistVersion <= componentVersion\n                        );\n                    })\n                    .flatMap(x => x.Changes!)\n                    .sort((changeA, changeB) => changeA.PullRequest - changeB.PullRequest);\n                const changelist: Changelist = {\n                    Version: componentVersionStr,\n                    Changes: changesEnumerator\n                };\n\n                if (changesEnumerator.length > 0) currentDic.set(component, changelist);\n            });\n        }\n\n        currentReleaseChangelists.forEach(releaseDictionary => {\n            markdown += \"\\n\\n\";\n            const coreCl = releaseDictionary.get(TgsComponent.Core)!;\n            const coreVersion = new SemVer(coreCl.Version);\n\n            if (coreVersion.patch > 0) {\n                markdown += `## Patch ${coreVersion.patch}`;\n            } else if (coreVersion.minor > 0) {\n                markdown += `# Update ${coreVersion.minor}.0`;\n            } else {\n                markdown += `# **Major Update ${coreVersion.major}.0.0**`;\n            }\n\n            for (const componentE in TgsComponent) {\n                const component = componentE as TgsComponent;\n                const changelist = releaseDictionary.get(component);\n                if (\n                    !changelist ||\n                    (changelist.Changes?.length == 0 && component != TgsComponent.Configuration)\n                ) {\n                    continue;\n                }\n\n                markdown += \"\\n\\n#### \";\n                if (component == TgsComponent.Configuration) {\n                    markdown += \"**\";\n                }\n\n                markdown += this.componentDisplayName(component);\n                if (component == TgsComponent.Configuration) {\n                    markdown += `\\n- **The new configuration version is \\`${changelist.Version}\\` Please update your \\`General:ConfigVersion\\` setting appropriately.**`;\n                }\n\n                changelist.Changes?.forEach(change =>\n                    change.Descriptions.forEach(line => {\n                        markdown += `\\n- ${line} ([#${change.PullRequest}](https://github.com/${this\n                            .state.gitHubOwner!}/${this.state.gitHubRepo!}/pull/${\n                            change.PullRequest\n                        })) [@${change.Author}](https://github.com/${change.Author})`;\n                    })\n                );\n            }\n        });\n\n        return markdown;\n    }\n\n    private componentDisplayName(componentS: string): string {\n        const component = componentS as TgsComponent;\n        switch (component) {\n            case TgsComponent.HttpApi:\n                return \"HTTP API\";\n            case TgsComponent.InteropApi:\n                return \"Interop API\";\n            case TgsComponent.Configuration:\n                return \"**Configuration**\";\n            case TgsComponent.DreamMakerApi:\n                return \"DreamMaker API\";\n            case TgsComponent.HostWatchdog:\n                return \"Host Watchdog (Requires reinstall to apply)\";\n            case TgsComponent.Core:\n                return \"Core\";\n            case TgsComponent.WebControlPanel:\n                return \"Web Control Panel\";\n            default:\n                throw new Error(\"Unknown component: \" + component);\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.updating) {\n            return <Loading text=\"loading.updating\" />;\n        }\n        if (this.state.loading) {\n            return <Loading text=\"loading.version\" />;\n        }\n        const handleChange = (changeEvent: ChangeEvent<HTMLInputElement>) => {\n            this.setState({\n                selectedOption: changeEvent.target.value\n            });\n        };\n\n        const permissionSet = resolvePermissionSet(this.context.user);\n        const canChangeVersion = hasAdminRight(permissionSet, AdministrationRights.ChangeVersion);\n        const canUploadVersion = hasAdminRight(permissionSet, AdministrationRights.UploadVersion);\n\n        const wrapVersionDiffAttempt = () => {\n            if (this.state.selectedVersion)\n                try {\n                    return (\n                        this.buildVersionDiffFromChangelog(this.state.selectedVersion.version) ??\n                        this.state.selectedVersion.body\n                    );\n                } catch {\n                    return (\n                        \"# WARNING: COULD NOT PARSE RELEASE NOTES FROM GITHUB. SHOWING ONLY THE LATEST VERSION'S RELEASE NOTES!\\n\\n\" +\n                        this.state.selectedVersion.body\n                    );\n                }\n\n            return null;\n        };\n\n        const selectedVersionMarkdown = wrapVersionDiffAttempt()\n            ?.replaceAll(\"\\r\", \"\")\n            ?.replaceAll(\"\\n\", \"\\n\\n\");\n\n        const currentVersionSemver = new SemVer(this.context.serverInfo.version);\n        const selectedVersionIsDifferentMajor =\n            this.state.selectedVersion &&\n            new SemVer(this.state.selectedVersion.version).major != currentVersionSemver.major;\n\n        const closeWarningModal = () =>\n            this.setState({\n                warnedAboutMajorUpdates: true\n            });\n\n        const timing = typeof this.state.secondsLeft === \"number\";\n        return (\n            <React.Fragment>\n                <DebugJsonViewer obj={this.state.versions} />\n                <div className=\"text-center\">\n                    {this.state.errors.map((err, index) => {\n                        if (!err) return;\n                        return (\n                            <ErrorAlert\n                                key={index}\n                                error={err}\n                                onClose={() =>\n                                    this.setState(prev => {\n                                        const newarr = Array.from(prev.errors);\n                                        newarr[index] = undefined;\n                                        return {\n                                            errors: newarr\n                                        };\n                                    })\n                                }\n                            />\n                        );\n                    })}\n                </div>\n                {this.state.selectedVersion ? (\n                    <React.Fragment>\n                        <Modal\n                            centered\n                            show={\n                                selectedVersionIsDifferentMajor &&\n                                !this.state.warnedAboutMajorUpdates\n                            }\n                            onHide={closeWarningModal}\n                            size=\"lg\">\n                            <Modal.Header closeButton>\n                                <Modal.Title>\n                                    <FormattedMessage id=\"view.admin.update.major_warn.title\" />\n                                </Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body className=\"text-danger pb-0\">\n                                <FormattedMessage\n                                    id=\"view.admin.update.major_warn.body\"\n                                    values={{\n                                        currentMajor: currentVersionSemver.major,\n                                        targetMajor: new SemVer(this.state.selectedVersion.version)\n                                            .major\n                                    }}\n                                />\n                            </Modal.Body>\n                            <Modal.Footer>\n                                <Button variant=\"secondary\" onClick={closeWarningModal}>\n                                    <FormattedMessage id=\"generic.close\" />\n                                </Button>\n                            </Modal.Footer>\n                        </Modal>\n                        <div className=\"text-center\">\n                            <h3>\n                                <FormattedMessage id=\"view.admin.update.releasenotes\" />\n                            </h3>\n                            <hr />\n                        </div>\n                        <ReactMarkdown>{selectedVersionMarkdown!}</ReactMarkdown>\n                        <div className=\"text-center\">\n                            <hr />\n                            <Button\n                                className=\"mr-3\"\n                                onClick={() => this.setState({ selectedVersion: undefined })}>\n                                <FormattedMessage id=\"generic.goback\" />\n                            </Button>\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id=\"timing-tooltip\">\n                                        <FormattedMessage id=\"view.admin.update.wait\" />\n                                    </Tooltip>\n                                }\n                                placement=\"right\"\n                                show={timing}>\n                                <Button onClick={() => void this.updateServer()} disabled={timing}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                    {timing ? ` [${this.state.secondsLeft as number}]` : \"\"}\n                                </Button>\n                            </OverlayTrigger>\n                        </div>\n                    </React.Fragment>\n                ) : (\n                    <div className=\"text-center\">\n                        <h3 className=\"mb-4\">\n                            <FormattedMessage id=\"view.admin.update.selectversion\" />\n                        </h3>\n                        {canChangeVersion ? (\n                            <Col xs={8} md={6} className=\"mx-auto\">\n                                {this.state.versions.map((version, index) => {\n                                    return (\n                                        <InputGroup className=\"mb-3\" key={version.version}>\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    id={version.version}\n                                                    name=\"version\"\n                                                    disabled={version.current}\n                                                    value={version.version}\n                                                    checked={\n                                                        this.state.selectedOption ===\n                                                        version.version\n                                                    }\n                                                    onChange={handleChange}\n                                                />\n                                            </InputGroup.Prepend>\n                                            <FormControl\n                                                as={\"label\"}\n                                                htmlFor={version.version}\n                                                disabled>\n                                                {version.version}\n                                                {version.current ? (\n                                                    <FormattedMessage id=\"view.admin.update.current\" />\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                                {index == 0 ? (\n                                                    <FormattedMessage id=\"view.admin.update.latest\" />\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </FormControl>\n                                        </InputGroup>\n                                    );\n                                })}\n                                <Button\n                                    variant=\"link\"\n                                    onClick={() => {\n                                        this.props.history.push(\n                                            (AppRoutes.admin_update.link ??\n                                                AppRoutes.admin_update.route) + \"all/\",\n                                            {\n                                                reload: true\n                                            }\n                                        );\n                                    }}\n                                    disabled={!!this.props.match.params.all}>\n                                    <FormattedMessage id=\"view.admin.update.showall\" />\n                                </Button>\n                                <br />\n                                <Button\n                                    onClick={this.loadNotes}\n                                    disabled={!this.state.selectedOption}>\n                                    <FormattedMessage id=\"generic.continue\" />\n                                </Button>\n                            </Col>\n                        ) : (\n                            <h4>\n                                <FormattedMessage id=\"view.admin.update.selectversion.deny\" />\n                            </h4>\n                        )}\n                        <br />\n                        <OverlayTrigger\n                            overlay={\n                                <Tooltip id=\"create-instance-tooltip\">\n                                    <FormattedMessage id=\"view.admin.update.upload.deny\" />\n                                </Tooltip>\n                            }\n                            show={canUploadVersion ? false : undefined}>\n                            {({ ref, ...triggerHandler }) => (\n                                <Button\n                                    ref={ref}\n                                    className=\"mx-1\"\n                                    variant=\"success\"\n                                    onClick={() => void this.uploadVersion()}\n                                    disabled={!canUploadVersion}\n                                    {...triggerHandler}>\n                                    <div>\n                                        <FontAwesomeIcon className=\"mr-2\" icon={faUpload} />\n                                        <FormattedMessage id=\"view.admin.update.upload\" />\n                                    </div>\n                                </Button>\n                            )}\n                        </OverlayTrigger>\n                    </div>\n                )}\n            </React.Fragment>\n        );\n    }\n}\nUpdate.contextType = GeneralContext;\nexport default withRouter(Update);\n","const delay = (milliseconds: number): Promise<void> => {\n    return new Promise<void>(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n};\n\nexport default delay;\n","/* eslint-disable import/no-unresolved */\nimport { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { EndpointDefaults } from \"@octokit/types\";\n/* eslint-enable import/no-unresolved */\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\nimport delay from \"./delay\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n    mergeable: boolean | null;\n}\n\nexport type GithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ntype IEvents = object;\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (retryAfter: number, options: Required<EndpointDefaults>) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onSecondaryRateLimit: (_: number, options: Required<EndpointDefaults>) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getLatestDefaultCommit(\n        owner: string,\n        repo: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const repoData = await this.apiClient.repos.get({\n                owner,\n                repo\n            });\n\n            const branch = await this.apiClient.repos.getBranch({\n                owner,\n                repo,\n                branch: repoData.data.default_branch\n            });\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: branch.data.commit.sha\n            });\n        } catch (e) {\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n\n                        const majorVersion = parseInt(match[1][0]);\n                        if (majorVersion < 4) return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : pr.state,\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            ),\n            mergeable: pr.mergeable\n        };\n    }\n\n    private async getPR({\n        owner,\n        repo,\n        wantedPR\n    }: {\n        owner: string;\n        repo: string;\n        wantedPR: number;\n    }) {\n        const pr = await this.apiClient.pulls.get({\n            owner,\n            repo,\n            pull_number: wantedPR\n        });\n\n        return this.transformPR(pr.data);\n    }\n\n    private async getPRUntilMergeable({\n        owner,\n        repo,\n        wantedPR\n    }: {\n        owner: string;\n        repo: string;\n        wantedPR: number;\n    }) {\n        //Retry three times to get the mergeable status\n        for (let i = 0; i < 2; i++) {\n            const pr = await this.getPR({ owner, repo, wantedPR });\n\n            if (pr.mergeable !== null) {\n                return pr;\n            }\n\n            await delay(5000);\n        }\n\n        return this.getPR({ owner, repo, wantedPR });\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            const visiblePRs = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(pr => pr.number);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!visiblePRs.includes(wantedPR)) {\n                    visiblePRs.push(wantedPR);\n                }\n            }\n\n            const prPromises = visiblePRs.map(wantedPR =>\n                this.getPRUntilMergeable({ owner, repo, wantedPR })\n            );\n\n            //Fetch them in parallel to not waste extra time with polling\n            payload = await Promise.all(prPromises);\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["JsonViewer","props","React","ReactJson","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","showjson","value","className","TgsComponent","Update","constructor","super","this","loadNotes","bind","updateServer","state","changelog","versions","errors","loading","gitHubOwner","gitHubRepo","componentDidMount","loadVersions","setState","componentWillUnmount","timer","window","clearInterval","addError","error","prevState","Array","from","push","hasAdminRight","resolvePermissionSet","context","user","AdministrationRights","ChangeVersion","adminInfo","AdminClient","getAdminInfo","code","StatusCode","ERROR","OK","url","payload","trackedRepositoryUrl","results","exec","InternalError","ErrorCode","APP_FAIL","jsError","Error","body","version","current","old","loadChangelogPromise","loadChangelog","versionInfo","GithubClient","getVersions","owner","repo","serverInfo","all","match","params","console","log","changelogYmlB64","getFile","changelogYml","atob","YAML","BAD_YML","void","selectedOption","setInterval","undefined","secondsLeft","selectedVersion","uploadVersion","inputPromise","Promise","resolve","input","document","createElement","type","onchange","e","files","target","click","localFile","toLowerCase","endsWith","alert","fileData","arrayBuffer","targetVersionStr","prompt","targetVersionSemver","SemVer","targetVersion","major","minor","patch","confirm","serverUpdated","request","response","ServerClient","autoLogin","async","UserClient","getCurrentUser","location","reload","updating","buildVersionDiffFromChangelog","releaseNotes","currentVersion","currentVersionSemver","markdown","targetComponentVersions","Components","Core","find","changelist","Version","ComponentVersions","lowerVersion","higherVersion","Configuration","HttpApi","DreamMakerApi","InteropApi","WebControlPanel","HostWatchdog","lt","lowerVersionSemver","higherVersionSemver","coreChangelists","filter","changelistVersionSemver","gte","lte","sort","changelistA","changelistB","compare","reverse","currentReleaseChangelists","i","length","currentDic","Map","nowRelease","previousRelease","set","Object","keys","forEach","componentStr","component","NugetClient","NugetApi","NugetCommon","componentVersionStr","componentVersion","previousComponentVersionStr","takeNotesFrom","changesEnumerator","changelistVersion","flatMap","x","Changes","changeA","changeB","PullRequest","releaseDictionary","coreCl","get","coreVersion","componentE","componentDisplayName","change","Descriptions","line","Author","componentS","render","Loading","text","handleChange","changeEvent","permissionSet","canChangeVersion","canUploadVersion","UploadVersion","selectedVersionMarkdown","wrapVersionDiffAttempt","replaceAll","selectedVersionIsDifferentMajor","closeWarningModal","warnedAboutMajorUpdates","timing","map","err","index","ErrorAlert","key","onClose","prev","newarr","Modal","centered","show","onHide","size","Header","closeButton","Title","FormattedMessage","id","Body","values","currentMajor","targetMajor","Footer","Button","variant","onClick","ReactMarkdown","OverlayTrigger","overlay","Tooltip","placement","disabled","Col","xs","md","InputGroup","Prepend","Radio","checked","onChange","FormControl","as","htmlFor","history","AppRoutes","admin_update","link","route","ref","triggerHandler","_extends","FontAwesomeIcon","icon","faUpload","contextType","GeneralContext","withRouter","milliseconds","setTimeout","hook","parameters","endpoint","merge","githubtoken","headers","authorization","auth","tokenType","token","authStrategy","assign","TypedEmitter","apiClient","octo","Octokit","plugin","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","warn","method","retryCount","onSecondaryRateLimit","_","getLatestDefaultCommit","repoData","repos","branch","getBranch","data","default_branch","InternalStatus","commit","sha","GITHUB_FAIL","oldversions","paginate","listReleases","done","reduce","result","release","parseInt","transformPR","pr","number","title","author","login","merged_at","html_url","head","tail","base","testmergelabel","labels","some","label","includes","mergeable","getPR","wantedPR","pulls","pull_number","getPRUntilMergeable","delay","getPRs","wantedPRs","visiblePRs","list","prPromises","getPRCommits","wantedCommit","extraCommit","listCommits","per_page","message","split","_extraCommit","getCommit","path","getContent","mediaType","format","isArray","raw","content","getDirectoryContents","element","isDirectory"],"sourceRoot":""}