{"version":3,"file":"4717.ce6fb442100355e16643.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/utils/PageHelper.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Engine.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./src/utils/delay.ts","webpack://tgstation-server-control-panel/./src/utils/GithubClient.ts"],"sourcesContent":["import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ComponentPropsWithoutRef } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Pagination from \"react-bootstrap/Pagination\";\nimport Popover from \"react-bootstrap/Popover\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    selectPage: (page: number) => void;\n    totalPages: number;\n    currentPage: number;\n} & Partial<ComponentPropsWithoutRef<\"div\">>;\n\ninterface IState {\n    showGoto: boolean;\n    gotoValue: number;\n}\n\nexport default class PageHelper extends React.PureComponent<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            showGoto: false,\n            gotoValue: props.currentPage\n        };\n    }\n\n    public render(): React.ReactNode {\n        const items: React.ReactNode[] = [];\n\n        const maxRight = Math.max(this.props.totalPages - this.props.currentPage - 1, 0);\n        const maxLeft = Math.max(this.props.currentPage - 2, 0);\n\n        const min = Math.max(\n            this.props.currentPage -\n                Math.max(\n                    5 - Number(this.props.currentPage !== this.props.totalPages) - maxRight,\n                    2\n                ),\n            2\n        );\n        const max = Math.min(\n            this.props.currentPage +\n                Math.max(5 - Number(this.props.currentPage !== 1) - maxLeft, 2),\n            this.props.totalPages - 1\n        );\n\n        //Start at the second page and stop at the second to last page\n        for (let i = min; i <= max; i++) {\n            items.push(\n                <Pagination.Item\n                    key={i}\n                    active={i === this.props.currentPage}\n                    onClick={() => this.props.selectPage(i)}>\n                    {i}\n                </Pagination.Item>\n            );\n        }\n\n        const ellipsis = this.props.totalPages > 7 ? <Pagination.Ellipsis disabled /> : null;\n\n        const findPopover = (\n            <Popover id=\"popover-gotopage\">\n                <Popover.Title>\n                    <FormattedMessage id=\"generic.goto.title\" />\n                </Popover.Title>\n                <Popover.Content>\n                    <form\n                        className=\"d-flex\"\n                        onSubmit={e => {\n                            e.preventDefault();\n                            this.props.selectPage(this.state.gotoValue);\n                            this.setState({\n                                showGoto: false\n                            });\n                        }}>\n                        <Form.Control\n                            className=\"mr-2\"\n                            type=\"number\"\n                            min={1}\n                            max={this.props.totalPages}\n                            value={this.state.gotoValue}\n                            onChange={e => this.setState({ gotoValue: parseInt(e.target.value) })}\n                            custom\n                        />\n                        <Button type=\"submit\">\n                            <FormattedMessage id=\"generic.goto\" />\n                        </Button>\n                    </form>\n                </Popover.Content>\n            </Popover>\n        );\n\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { selectPage: _1, totalPages: _2, currentPage: _3, ...props } = this.props;\n\n        return (\n            <div className=\"text-center\" style={{ position: \"sticky\", bottom: \"1.5em\" }} {...props}>\n                <Pagination className=\"justify-content-center\">\n                    <Pagination.Prev\n                        disabled={this.props.currentPage <= 1}\n                        onClick={() =>\n                            this.props.selectPage(Math.max(this.props.currentPage - 1, 1))\n                        }\n                    />\n                    <Pagination.Item\n                        active={this.props.currentPage <= 1}\n                        onClick={() => this.props.selectPage(1)}>\n                        1\n                    </Pagination.Item>\n                    {ellipsis}\n                    {items}\n                    {ellipsis}\n                    {this.props.totalPages >= 2 ? (\n                        <Pagination.Item\n                            active={this.props.currentPage >= this.props.totalPages}\n                            onClick={() => this.props.selectPage(this.props.totalPages)}>\n                            {this.props.totalPages}\n                        </Pagination.Item>\n                    ) : null}\n                    {this.props.totalPages > 7 ? (\n                        <OverlayTrigger\n                            show={this.state.showGoto}\n                            placement=\"top\"\n                            overlay={findPopover}>\n                            <Pagination.Item\n                                onClick={() =>\n                                    this.setState(prev => {\n                                        return {\n                                            showGoto: !prev.showGoto\n                                        };\n                                    })\n                                }>\n                                <FontAwesomeIcon icon=\"search\" />\n                            </Pagination.Item>\n                        </OverlayTrigger>\n                    ) : null}\n                    <Pagination.Next\n                        disabled={this.props.currentPage >= this.props.totalPages}\n                        onClick={() =>\n                            this.props.selectPage(\n                                Math.min(this.props.currentPage + 1, this.props.totalPages)\n                            )\n                        }\n                    />\n                </Pagination>\n            </div>\n        );\n    }\n}\n","import { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport EngineClient from \"../../../../ApiClient/EngineClient\";\nimport {\n    EngineResponse,\n    EngineRights,\n    EngineType,\n    EngineVersion\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient from \"../../../../utils/GithubClient\";\nimport { hasEngineRight } from \"../../../../utils/misc\";\nimport { RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport PageHelper from \"../../../utils/PageHelper\";\n\ntype IProps = object;\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    versions: EngineResponse[];\n    activeVersion?: EngineVersion;\n    latestByondVersion: EngineVersion;\n    latestODVersion: EngineVersion;\n    selectedByondVersion?: EngineVersion;\n    selectedODVersion?: EngineVersion;\n    loading: boolean;\n    customFile?: File | null;\n    page: number;\n    maxPage?: number;\n}\n\nclass Engine extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        const initByond = {\n            version: \"514.1589\",\n            engine: EngineType.Byond\n        };\n        const initOD = {\n            engine: EngineType.OpenDream,\n            sourceSHA: \"fab769776dada6b9bcad546094d78c604049e0e9\"\n        };\n        this.state = {\n            versions: [],\n            errors: [],\n            latestByondVersion: initByond,\n            latestODVersion: initOD,\n            loading: true,\n            page: RouteData.byondlistpage ?? 1\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadVersions() {\n        if (hasEngineRight(this.context.instancePermissionSet, EngineRights.ListInstalled)) {\n            const response = await EngineClient.listAllVersions(this.context.instance.id, {\n                page: this.state.page\n            });\n            if (response.code === StatusCode.OK) {\n                if (\n                    this.state.page > response.payload.totalPages &&\n                    response.payload.totalPages !== 0\n                ) {\n                    this.setState({\n                        page: 1\n                    });\n                    return;\n                }\n\n                this.setState({\n                    versions: response.payload.content,\n                    maxPage: response.payload.totalPages\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        if (hasEngineRight(this.context.instancePermissionSet, EngineRights.ReadActive)) {\n            const response2 = await EngineClient.getActiveVersion(this.context.instance.id);\n            if (response2.code === StatusCode.OK) {\n                this.setState({\n                    activeVersion: response2.payload.engineVersion\n                });\n            } else {\n                this.addError(response2.error);\n            }\n        }\n    }\n\n    private async switchVersion(version: EngineVersion, useCustom: boolean): Promise<void> {\n        this.setState({\n            loading: true\n        });\n        const response = await EngineClient.switchActive(\n            this.context.instance.id,\n            version,\n            useCustom && this.state.customFile\n                ? await this.state.customFile.arrayBuffer()\n                : undefined\n        );\n        if (response.code === StatusCode.ERROR) {\n            this.addError(response.error);\n        } else {\n            if (useCustom) {\n                this.setState({\n                    customFile: null\n                });\n            }\n            if (response.payload.installJob) {\n                JobsController.registerJob(response.payload.installJob, this.context.instance.id);\n                JobsController.registerCallback(\n                    response.payload.installJob.id,\n                    () => void this.loadVersions()\n                );\n            } else {\n                await this.loadVersions();\n            }\n        }\n        this.setState({\n            loading: false\n        });\n    }\n\n    public componentDidUpdate(prevProps: Readonly<IProps>, prevState: Readonly<IState>): void {\n        if (prevState.page !== this.state.page) {\n            RouteData.byondlistpage = this.state.page;\n            void this.loadVersions();\n        }\n    }\n\n    public componentDidMount(): void {\n        const odGetPromise = GithubClient.getLatestDefaultCommit(\"OpenDreamProject\", \"OpenDream\");\n        fetch(\"https://secure.byond.com/download/version.txt\")\n            .then(res => res.text())\n            .then(data => data.split(\"\\n\"))\n            .then(versions => versions[0])\n            .then(version => {\n                const engineVersion: EngineVersion = {\n                    engine: EngineType.Byond,\n                    version\n                };\n                this.setState({\n                    latestByondVersion: engineVersion,\n                    selectedByondVersion: engineVersion,\n                    loading: false\n                });\n            })\n            .catch(e => {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, { jsError: Error(e as string) })\n                );\n                this.setState({\n                    loading: false\n                });\n            });\n\n        void (async () => {\n            await this.loadVersions();\n\n            const odLatestCommit = await odGetPromise;\n            if (odLatestCommit.code === StatusCode.ERROR) {\n                this.addError(odLatestCommit.error);\n                return;\n            }\n\n            const newVer = {\n                engine: EngineType.OpenDream,\n                sourceSHA: odLatestCommit.payload\n            };\n\n            this.setState(prev => {\n                return {\n                    latestODVersion: newVer,\n                    selectedODVersion:\n                        this.makeUniqueStringForVersion(prev.latestODVersion) ==\n                        this.makeUniqueStringForVersion(\n                            prev.selectedODVersion ?? prev.latestODVersion\n                        )\n                            ? newVer\n                            : prev.selectedODVersion\n                };\n            });\n        })();\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.byond\" />;\n        }\n\n        const canSeeVersions = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.ListInstalled\n        );\n        const canSeeCurrent = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.ReadActive\n        );\n        const canInstallAndSwitchByond = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveByondVersion\n        );\n        const canInstallAndSwitchOD = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion\n        );\n        const canDelete = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.DeleteInstall\n        );\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.engine\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {canSeeVersions ? (\n                    <>\n                        {!canSeeCurrent ? (\n                            <GenericAlert title=\"view.instance.engine.current_denied\" />\n                        ) : null}\n                        <div>\n                            {this.state.versions.map(item => {\n                                // noinspection JSBitwiseOperatorUsage\n                                return (\n                                    <InputGroup\n                                        className=\"w-md-25 mb-1 mx-auto d-flex\"\n                                        key={this.makeUniqueStringForVersion(item.engineVersion)}>\n                                        {canInstallAndSwitchByond || canSeeCurrent ? (\n                                            <InputGroup.Prepend>\n                                                <InputGroup.Radio\n                                                    name=\"byond\"\n                                                    id={this.makeUniqueStringForVersion(\n                                                        item.engineVersion\n                                                    )}\n                                                    value={Engine.friendlyVersion(\n                                                        item.engineVersion\n                                                    )}\n                                                    disabled={\n                                                        item.engineVersion.engine ===\n                                                        EngineType.Byond\n                                                            ? !canInstallAndSwitchByond\n                                                            : item.engineVersion.engine ===\n                                                                EngineType.OpenDream\n                                                              ? !canInstallAndSwitchOD\n                                                              : false\n                                                    }\n                                                    checked={\n                                                        this.makeUniqueStringForVersion(\n                                                            item.engineVersion\n                                                        ) ===\n                                                        this.makeUniqueStringForVersion(\n                                                            this.state.activeVersion\n                                                        )\n                                                    }\n                                                    onChange={async () => {\n                                                        await this.switchVersion(\n                                                            item.engineVersion,\n                                                            false\n                                                        );\n                                                    }}\n                                                />\n                                            </InputGroup.Prepend>\n                                        ) : null}\n                                        <label\n                                            className=\"flex-grow-1 m-0\"\n                                            htmlFor={this.makeUniqueStringForVersion(\n                                                item.engineVersion\n                                            )}>\n                                            <OverlayTrigger\n                                                overlay={this.tooltip(\n                                                    \"view.instance.engine.custom\"\n                                                )}\n                                                show={\n                                                    item.engineVersion.customIteration\n                                                        ? undefined\n                                                        : false\n                                                }>\n                                                {({ ref, ...triggerHandler }) => (\n                                                    <InputGroup.Text\n                                                        className=\"w-100\"\n                                                        {...triggerHandler}>\n                                                        {Engine.friendlyVersion(item.engineVersion)}\n                                                        {item.engineVersion.customIteration ? (\n                                                            <div\n                                                                className={\"ml-auto\"}\n                                                                ref={\n                                                                    ref as React.Ref<HTMLDivElement>\n                                                                }>\n                                                                <FontAwesomeIcon\n                                                                    fixedWidth\n                                                                    icon=\"info\"\n                                                                />\n                                                            </div>\n                                                        ) : null}\n                                                    </InputGroup.Text>\n                                                )}\n                                            </OverlayTrigger>\n                                        </label>\n                                        {this.makeUniqueStringForVersion(item.engineVersion) !==\n                                        this.makeUniqueStringForVersion(\n                                            this.state.activeVersion\n                                        ) ? (\n                                            <InputGroup.Append>\n                                                <OverlayTrigger\n                                                    overlay={this.tooltip(\"generic.no_perm\")}\n                                                    show={!canDelete ? undefined : false}>\n                                                    <Button\n                                                        variant=\"danger\"\n                                                        disabled={!canDelete}\n                                                        onClick={() =>\n                                                            void (async () => {\n                                                                this.setState({\n                                                                    loading: true\n                                                                });\n                                                                const response =\n                                                                    await EngineClient.deleteVersion(\n                                                                        this.context.instance.id,\n                                                                        item.engineVersion\n                                                                    );\n                                                                if (\n                                                                    response.code ===\n                                                                    StatusCode.ERROR\n                                                                ) {\n                                                                    this.addError(response.error);\n                                                                } else {\n                                                                    JobsController.registerJob(\n                                                                        response.payload,\n                                                                        this.context.instance.id\n                                                                    );\n                                                                    JobsController.registerCallback(\n                                                                        response.payload.id,\n                                                                        () =>\n                                                                            void this.loadVersions()\n                                                                    );\n                                                                }\n                                                                this.setState({\n                                                                    loading: false\n                                                                });\n                                                            })()\n                                                        }>\n                                                        <FontAwesomeIcon icon={faTrash} />\n                                                    </Button>\n                                                </OverlayTrigger>\n                                            </InputGroup.Append>\n                                        ) : null}\n                                    </InputGroup>\n                                );\n                            })}\n                        </div>\n                        <PageHelper\n                            className=\"mt-4\"\n                            selectPage={newPage => this.setState({ page: newPage })}\n                            totalPages={this.state.maxPage ?? 1}\n                            currentPage={this.state.page}\n                        />\n                    </>\n                ) : canSeeCurrent ? (\n                    <>\n                        <GenericAlert title=\"view.instance.engine.list_denied\" />\n                        <FormattedMessage\n                            id=\"view.instance.engine.current_version\"\n                            values={{ version: this.state.activeVersion }}\n                        />\n                    </>\n                ) : (\n                    <GenericAlert title=\"view.instance.engine.current_and_list_denied\" />\n                )}\n                <hr />\n                {this.renderByondInstall()}\n                <hr />\n                {this.renderODInstall()}\n            </div>\n        );\n    }\n\n    private tooltip(innerid?: string): JSX.Element {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    }\n\n    private renderByondInstall(): React.ReactNode {\n        const canInstallCustomByond = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallCustomByondVersion\n        );\n        const canInstallAndSwitchByond = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveByondVersion\n        );\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.engine.add_byond\" />\n                </h4>\n                <InputGroup className=\"w-md-50 w-lg-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestByondVersion.version!.split(\".\")[0]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = (\n                                    prev.selectedByondVersion ?? prev.latestByondVersion\n                                ).version!.split(\".\");\n                                arr[0] = e.target.value;\n                                return {\n                                    selectedByondVersion: {\n                                        engine: EngineType.Byond,\n                                        version: arr.join(\".\")\n                                    }\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Text className=\"rounded-0\">.</InputGroup.Text>\n                    <FormControl\n                        type=\"number\"\n                        defaultValue={this.state.latestByondVersion.version!.split(\".\")[1]}\n                        onChange={e => {\n                            this.setState(prev => {\n                                const arr = (\n                                    prev.selectedByondVersion ?? prev.latestByondVersion\n                                ).version!.split(\".\");\n                                arr[1] = e.target.value;\n                                return {\n                                    selectedByondVersion: {\n                                        engine: EngineType.Byond,\n                                        version: arr.join(\".\")\n                                    }\n                                };\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            overlay={this.tooltip(\"generic.no_perm\")}\n                            show={!canInstallAndSwitchByond ? undefined : false}>\n                            <Button\n                                variant=\"success\"\n                                disabled={!canInstallAndSwitchByond}\n                                onClick={() =>\n                                    void (async () => {\n                                        await this.switchVersion(\n                                            this.state.selectedByondVersion ??\n                                                this.state.latestByondVersion,\n                                            true\n                                        );\n                                    })()\n                                }>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <OverlayTrigger\n                        overlay={this.tooltip(\"generic.no_perm\")}\n                        show={!canInstallCustomByond ? undefined : false}>\n                        <Form.File\n                            custom\n                            id=\"test\"\n                            disabled={!canInstallCustomByond}\n                            className=\"w-md-50 w-lg-25 text-left\"\n                            label={\n                                this.state.customFile ? (\n                                    this.state.customFile.name\n                                ) : (\n                                    <FormattedMessage id=\"view.instance.engine.upload\" />\n                                )\n                            }\n                            accept=\".zip\"\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    customFile: e.target.files ? e.target.files[0] : null\n                                });\n                            }}\n                        />\n                    </OverlayTrigger>\n                </Form>\n            </React.Fragment>\n        );\n    }\n    private renderODInstall(): React.ReactNode {\n        const canInstallCustomOD = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallCustomOpenDreamVersion\n        );\n        const canInstallAndSwitchOD = hasEngineRight(\n            this.context.instancePermissionSet,\n            EngineRights.InstallOfficialOrChangeActiveOpenDreamVersion\n        );\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.engine.add_od\" />\n                </h4>\n                <InputGroup className=\"w-md-50 w-lg-25 mb-3 mx-auto\">\n                    <FormControl\n                        type=\"string\"\n                        defaultValue={this.state.latestODVersion.sourceSHA!}\n                        value={\n                            (this.state.selectedODVersion ?? this.state.latestODVersion).sourceSHA!\n                        }\n                        onChange={e => {\n                            this.setState({\n                                selectedODVersion: {\n                                    engine: EngineType.OpenDream,\n                                    sourceSHA: e.target.value\n                                }\n                            });\n                        }}\n                    />\n                    <InputGroup.Append>\n                        <OverlayTrigger\n                            overlay={this.tooltip(\"generic.no_perm\")}\n                            show={!canInstallAndSwitchOD ? undefined : false}>\n                            <Button\n                                variant=\"success\"\n                                disabled={!canInstallAndSwitchOD}\n                                onClick={() =>\n                                    void (async () => {\n                                        await this.switchVersion(\n                                            this.state.selectedODVersion ??\n                                                this.state.latestODVersion,\n                                            true\n                                        );\n                                    })()\n                                }>\n                                <FontAwesomeIcon icon={faPlus} />\n                            </Button>\n                        </OverlayTrigger>\n                    </InputGroup.Append>\n                </InputGroup>\n                <Form>\n                    <OverlayTrigger\n                        overlay={this.tooltip(\"generic.no_perm\")}\n                        show={!canInstallCustomOD ? undefined : false}>\n                        <Form.File\n                            custom\n                            id=\"test\"\n                            disabled={!canInstallCustomOD}\n                            className=\"w-md-50 w-lg-25 text-left\"\n                            label={\n                                this.state.customFile ? (\n                                    this.state.customFile.name\n                                ) : (\n                                    <FormattedMessage id=\"view.instance.engine.upload\" />\n                                )\n                            }\n                            accept=\".zip\"\n                            onChange={(e: ChangeEvent<HTMLInputElement>) => {\n                                this.setState({\n                                    customFile: e.target.files ? e.target.files[0] : null\n                                });\n                            }}\n                        />\n                    </OverlayTrigger>\n                </Form>\n            </React.Fragment>\n        );\n    }\n\n    private makeUniqueStringForVersion(engineVersion?: EngineVersion): string {\n        if (!engineVersion) {\n            return \"null-version\";\n        }\n\n        return `${engineVersion.engine}-${engineVersion.version ?? \"null\"}-${\n            engineVersion.sourceSHA ?? \"null\"\n        }-${engineVersion.customIteration ?? \"null\"}`;\n    }\n\n    public static friendlyVersion(engineVersion: EngineVersion): string {\n        let baseVersion: string;\n        switch (engineVersion.engine) {\n            case EngineType.Byond:\n                baseVersion = engineVersion.version!;\n                if (baseVersion.endsWith(\".0\")) {\n                    baseVersion = baseVersion.substring(0, baseVersion.length - 2);\n                }\n                break;\n            case EngineType.OpenDream:\n                baseVersion = `OD-${engineVersion.sourceSHA!.substring(0, 7)}`;\n                break;\n            default:\n                // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                throw new Error(`Unknown engine type: ${engineVersion.engine}`);\n        }\n\n        if (engineVersion.customIteration) {\n            return `${baseVersion} (${engineVersion.customIteration})`;\n        }\n\n        return baseVersion;\n    }\n}\nEngine.contextType = InstanceEditContext;\nexport default Engine;\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    undefined as unknown as InstanceEditContext\n);\n","const delay = (milliseconds: number): Promise<void> => {\n    return new Promise<void>(resolve => {\n        setTimeout(resolve, milliseconds);\n    });\n};\n\nexport default delay;\n","/* eslint-disable import/no-unresolved */\nimport { retry } from \"@octokit/plugin-retry\";\nimport { throttling } from \"@octokit/plugin-throttling\";\nimport { RequestError } from \"@octokit/request-error\";\nimport { Octokit, RestEndpointMethodTypes } from \"@octokit/rest\";\nimport { EndpointDefaults } from \"@octokit/types\";\n/* eslint-enable import/no-unresolved */\nimport { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport configOptions from \"../ApiClient/util/config\";\nimport { VERSION } from \"../definitions/constants\";\nimport delay from \"./delay\";\n\nexport interface TGSVersion {\n    version: string;\n    body: string;\n    current: boolean;\n    old: boolean;\n}\n\nexport interface Commit {\n    name: string;\n    sha: string;\n    url: string;\n}\n\nexport interface PullRequest {\n    number: number;\n    title: string;\n    author: string;\n    state: \"open\" | \"closed\" | \"merged\";\n    link: string;\n    head: string;\n    tail: string;\n    testmergelabel: boolean;\n    mergeable: boolean | null;\n}\n\nexport type GithubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n\nexport interface DirectoryItem {\n    path: string;\n    isDirectory: boolean;\n}\n\ntype IEvents = object;\n\n/* eslint-disable */\n\nasync function hook(request: any, route: any, parameters?: any): Promise<any> {\n    const endpoint = request.endpoint.merge(route as string, parameters);\n\n    if (configOptions.githubtoken.value) {\n        endpoint.headers.authorization = `token ${configOptions.githubtoken.value}`;\n    }\n\n    return request(endpoint);\n}\n\nasync function auth(): Promise<any> {\n    if (configOptions.githubtoken.value) {\n        return {\n            type: \"token\",\n            tokenType: \"pat\",\n            token: configOptions.githubtoken.value\n        };\n    } else {\n        return {\n            type: \"unauthenticated\"\n        };\n    }\n}\n\nconst authStrategy = () => {\n    return Object.assign(auth.bind(null), {\n        hook: hook.bind(null)\n    });\n};\n\n/* eslint-enable */\n\nconst e = new (class GithubClient extends TypedEmitter<IEvents> {\n    private readonly apiClient: Octokit;\n\n    public constructor() {\n        super();\n\n        const octo = Octokit.plugin(retry, throttling);\n\n        this.apiClient = new octo({\n            authStrategy,\n            userAgent: \"tgstation-server-control-panel/\" + VERSION,\n            baseUrl: \"https://api.github.com\",\n            throttle: {\n                onRateLimit: (retryAfter: number, options: Required<EndpointDefaults>) => {\n                    console.warn(\n                        `Request quota exhausted for request ${options.method} ${options.url}`\n                    );\n\n                    if (options.request.retryCount === 0) {\n                        // only retries once\n                        console.log(`Retrying after ${retryAfter} seconds!`);\n                        return true;\n                    }\n                    return false;\n                },\n                onSecondaryRateLimit: (_: number, options: Required<EndpointDefaults>) => {\n                    // does not retry, only logs a warning\n                    console.warn(`Abuse detected for request ${options.method} ${options.url}`);\n                }\n            }\n        });\n    }\n\n    public async getLatestDefaultCommit(\n        owner: string,\n        repo: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const repoData = await this.apiClient.repos.get({\n                owner,\n                repo\n            });\n\n            const branch = await this.apiClient.repos.getBranch({\n                owner,\n                repo,\n                branch: repoData.data.default_branch\n            });\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: branch.data.commit.sha\n            });\n        } catch (e) {\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getVersions({\n        owner,\n        repo,\n        current,\n        all\n    }: {\n        owner: string;\n        repo: string;\n        current: string;\n        all?: boolean;\n    }): Promise<InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>> {\n        let payload: TGSVersion[];\n        let oldversions = 0;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.repos.listReleases,\n                { owner, repo },\n                (response, done) => {\n                    return response.data.reduce((result, release) => {\n                        const match = /tgstation-server-v([\\d.]+)/.exec(release.name ?? \"\");\n                        if (!match) return result;\n\n                        const majorVersion = parseInt(match[1][0]);\n                        if (majorVersion < 4) return result;\n\n                        const version = match[1];\n                        let old = false;\n\n                        //show 3 outdated versions(2 if you count the current one)\n                        if (version <= current) {\n                            if (oldversions >= 3 && !all) {\n                                (done as () => void)();\n                                return result;\n                            }\n                            oldversions++;\n                            old = true;\n                        }\n\n                        result.push({\n                            version,\n                            body: release.body ?? \"\",\n                            current: version === current,\n                            old\n                        });\n                        return result;\n                    }, [] as TGSVersion[]);\n                }\n            );\n        } catch (e) {\n            return new InternalStatus<TGSVersion[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    private transformPR(pr: GithubPullRequest): PullRequest {\n        return {\n            number: pr.number,\n            title: pr.title,\n            author: pr.user?.login ?? \"ghost\",\n            state: pr.merged_at ? \"merged\" : pr.state,\n            link: pr.html_url,\n            head: pr.head.sha,\n            tail: pr.base.sha,\n            testmergelabel: pr.labels.some(\n                label =>\n                    label.name?.toLowerCase().includes(\"testmerge\") ||\n                    label.name?.toLowerCase().includes(\"test merge\")\n            ),\n            mergeable: pr.mergeable\n        };\n    }\n\n    private async getPR({\n        owner,\n        repo,\n        wantedPR\n    }: {\n        owner: string;\n        repo: string;\n        wantedPR: number;\n    }) {\n        const pr = await this.apiClient.pulls.get({\n            owner,\n            repo,\n            pull_number: wantedPR\n        });\n\n        return this.transformPR(pr.data);\n    }\n\n    private async getPRUntilMergeable({\n        owner,\n        repo,\n        wantedPR\n    }: {\n        owner: string;\n        repo: string;\n        wantedPR: number;\n    }) {\n        //Retry three times to get the mergeable status\n        for (let i = 0; i < 2; i++) {\n            const pr = await this.getPR({ owner, repo, wantedPR });\n\n            if (pr.mergeable !== null) {\n                return pr;\n            }\n\n            await delay(5000);\n        }\n\n        return this.getPR({ owner, repo, wantedPR });\n    }\n\n    public async getPRs({\n        owner,\n        repo,\n        wantedPRs\n    }: {\n        owner: string;\n        repo: string;\n        wantedPRs?: number[];\n    }): Promise<InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>> {\n        let payload: PullRequest[] = [];\n        try {\n            const visiblePRs = (\n                await this.apiClient.paginate(this.apiClient.pulls.list, {\n                    owner,\n                    repo,\n                    state: \"open\"\n                })\n            ).map(pr => pr.number);\n\n            for (const wantedPR of wantedPRs ?? []) {\n                if (!visiblePRs.includes(wantedPR)) {\n                    visiblePRs.push(wantedPR);\n                }\n            }\n\n            const prPromises = visiblePRs.map(wantedPR =>\n                this.getPRUntilMergeable({ owner, repo, wantedPR })\n            );\n\n            //Fetch them in parallel to not waste extra time with polling\n            payload = await Promise.all(prPromises);\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<PullRequest[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload\n        });\n    }\n\n    public async getPRCommits({\n        owner,\n        repo,\n        pr,\n        wantedCommit\n    }: {\n        owner: string;\n        repo: string;\n        pr: PullRequest;\n        wantedCommit?: string;\n    }): Promise<InternalStatus<[commits: Commit[], extraCommit?: Commit], ErrorCode.GITHUB_FAIL>> {\n        let payload: Commit[] = [];\n        let extraCommit: Commit | undefined = undefined;\n        try {\n            payload = await this.apiClient.paginate(\n                this.apiClient.pulls.listCommits,\n                {\n                    owner,\n                    repo,\n                    pull_number: pr.number,\n                    per_page: 100\n                },\n                ({ data }) =>\n                    data.map(commit => ({\n                        name: commit.commit.message.split(\"\\n\")[0],\n                        sha: commit.sha,\n                        url: commit.html_url\n                    }))\n            );\n\n            //Newest at the top\n            payload.reverse();\n\n            if (wantedCommit && !payload.find(commit => commit.sha === wantedCommit)) {\n                const _extraCommit = (\n                    await this.apiClient.repos.getCommit({\n                        owner,\n                        repo,\n                        ref: wantedCommit\n                    })\n                ).data;\n                extraCommit = {\n                    name: _extraCommit.commit.message.split(\"\\n\")[0],\n                    sha: _extraCommit.sha,\n                    url: _extraCommit.html_url\n                };\n            }\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<\n                [commits: Commit[], extraCommit?: Commit],\n                ErrorCode.GITHUB_FAIL\n            >({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n        return new InternalStatus({\n            code: StatusCode.OK,\n            payload: [payload, extraCommit]\n        });\n    }\n\n    public async getFile(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<string, ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                mediaType: {\n                    format: \"base64\"\n                },\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore directory responses\n            if (Array.isArray(data)) {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was a directory!`)\n                    })\n                });\n            }\n\n            if (data.type !== \"file\") {\n                return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} has type ${data.type}!`)\n                    })\n                });\n            }\n\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n            const raw = (data as any).content as string;\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: raw\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<string, ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n\n    public async getDirectoryContents(\n        owner: string,\n        repo: string,\n        path: string,\n        ref?: string\n    ): Promise<InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>> {\n        try {\n            const { data } = await this.apiClient.repos.getContent({\n                owner,\n                repo,\n                path,\n                ref\n            });\n\n            // ignore non-directory responses\n            if (!Array.isArray(data)) {\n                return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                        jsError: new Error(`${path} was not a directory!`)\n                    })\n                });\n            }\n\n            const result: DirectoryItem[] = [];\n            data.forEach(element =>\n                result.push({\n                    path: element.path,\n                    isDirectory: element.type == \"dir\"\n                })\n            );\n\n            return new InternalStatus({\n                code: StatusCode.OK,\n                payload: result\n            });\n        } catch (e) {\n            console.error(e);\n            return new InternalStatus<DirectoryItem[], ErrorCode.GITHUB_FAIL>({\n                code: StatusCode.ERROR,\n                error: new InternalError(ErrorCode.GITHUB_FAIL, {\n                    jsError: e as RequestError\n                })\n            });\n        }\n    }\n})();\nexport default e;\n"],"names":["JsonViewer","props","React","ReactJson","src","obj","name","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","showjson","value","className","PageHelper","constructor","super","this","state","showGoto","gotoValue","currentPage","render","items","maxRight","Math","max","totalPages","maxLeft","min","Number","i","push","Pagination","Item","key","active","onClick","selectPage","ellipsis","Ellipsis","disabled","findPopover","Popover","id","Title","FormattedMessage","Content","onSubmit","e","preventDefault","setState","Form","Control","type","onChange","parseInt","target","custom","Button","_1","_2","_3","_extends","style","position","bottom","Prev","OverlayTrigger","show","placement","overlay","prev","FontAwesomeIcon","icon","Next","Engine","initByond","version","engine","EngineType","Byond","initOD","OpenDream","sourceSHA","versions","errors","latestByondVersion","latestODVersion","loading","page","RouteData","byondlistpage","addError","error","prevState","Array","from","loadVersions","hasEngineRight","context","instancePermissionSet","EngineRights","ListInstalled","response","EngineClient","listAllVersions","instance","code","StatusCode","OK","payload","content","maxPage","ReadActive","response2","getActiveVersion","activeVersion","engineVersion","switchVersion","useCustom","switchActive","customFile","arrayBuffer","undefined","ERROR","installJob","JobsController","registerJob","registerCallback","componentDidUpdate","prevProps","componentDidMount","odGetPromise","GithubClient","getLatestDefaultCommit","fetch","then","res","text","data","split","selectedByondVersion","catch","InternalError","ErrorCode","APP_FAIL","jsError","Error","odLatestCommit","newVer","selectedODVersion","makeUniqueStringForVersion","Loading","canSeeVersions","canSeeCurrent","canInstallAndSwitchByond","InstallOfficialOrChangeActiveByondVersion","canInstallAndSwitchOD","InstallOfficialOrChangeActiveOpenDreamVersion","canDelete","DeleteInstall","map","err","index","ErrorAlert","onClose","newarr","GenericAlert","title","item","InputGroup","Prepend","Radio","friendlyVersion","checked","async","htmlFor","tooltip","customIteration","ref","triggerHandler","Text","fixedWidth","Append","variant","deleteVersion","faTrash","newPage","values","renderByondInstall","renderODInstall","innerid","Tooltip","canInstallCustomByond","InstallCustomByondVersion","FormControl","defaultValue","arr","join","faPlus","File","label","accept","files","canInstallCustomOD","InstallCustomOpenDreamVersion","baseVersion","endsWith","substring","length","contextType","InstanceEditContext","milliseconds","Promise","resolve","setTimeout","hook","request","route","parameters","endpoint","merge","githubtoken","headers","authorization","auth","tokenType","token","authStrategy","Object","assign","bind","TypedEmitter","apiClient","octo","Octokit","plugin","retry","throttling","userAgent","VERSION","baseUrl","throttle","onRateLimit","retryAfter","options","console","warn","method","url","retryCount","log","onSecondaryRateLimit","_","owner","repo","repoData","repos","get","branch","getBranch","default_branch","InternalStatus","commit","sha","GITHUB_FAIL","getVersions","current","all","oldversions","paginate","listReleases","done","reduce","result","release","match","exec","old","body","transformPR","pr","number","author","user","login","merged_at","link","html_url","head","tail","base","testmergelabel","labels","some","toLowerCase","includes","mergeable","getPR","wantedPR","pulls","pull_number","getPRUntilMergeable","delay","getPRs","wantedPRs","visiblePRs","list","prPromises","getPRCommits","wantedCommit","extraCommit","listCommits","per_page","message","reverse","find","_extraCommit","getCommit","getFile","path","getContent","mediaType","format","isArray","raw","getDirectoryContents","forEach","element","isDirectory"],"sourceRoot":""}