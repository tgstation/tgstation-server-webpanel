{"version":3,"file":"637.67f97d250d5cc7c88b41.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ConfigurationFileClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\r\nimport {\r\n    ConfigurationFileRequest,\r\n    ConfigurationFileResponse,\r\n    ErrorMessageResponse,\r\n    PaginatedConfigurationFileResponse\r\n} from \"./generatedcode/generated\";\r\nimport { DownloadedConfigFile } from \"./models/DownloadedConfigFile\";\r\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\r\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\r\nimport ServerClient from \"./ServerClient\";\r\nimport TransferClient, { DownloadErrors, ProgressEvent, UploadErrors } from \"./TransferClient\";\r\nimport configOptions from \"./util/config\";\r\n\r\nexport type ConfigErrors =\r\n    | GenericErrors\r\n    | ErrorCode.CONFIG_FILE_IO_ERROR\r\n    | ErrorCode.CONFIG_FILE_NOT_FOUND;\r\n\r\nexport type ConfigDirectoryErrors = GenericErrors | ErrorCode.CONFIG_FILE_DIRECTORY_NOT_FOUND;\r\n\r\nexport default new (class ConfigurationFileClient extends ApiClient {\r\n    public async addDirectory(\r\n        instance: number,\r\n        path: ConfigurationFileRequest\r\n    ): Promise<InternalStatus<ConfigurationFileResponse | null, GenericErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerCreateDirectory(\r\n                path,\r\n                {\r\n                    headers: {\r\n                        Instance: instance.toString()\r\n                    }\r\n                }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200:\r\n            case 201: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: null\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async writeConfigFile(\r\n        instance: number,\r\n        fileRequest: ConfigurationFileRequest,\r\n        file: ArrayBuffer\r\n    ): Promise<InternalStatus<ConfigurationFileResponse, GenericErrors | UploadErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerUpdate(\r\n                fileRequest,\r\n                {\r\n                    headers: { Instance: instance.toString() }\r\n                }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n        switch (response.status) {\r\n            case 200:\r\n            case 202: {\r\n                const payload = response.data as ConfigurationFileResponse;\r\n                const upload = await TransferClient.Upload(payload.fileTicket, file);\r\n                if (upload.code === StatusCode.OK) {\r\n                    return new InternalStatus({\r\n                        code: StatusCode.OK,\r\n                        payload\r\n                    });\r\n                }\r\n                return new InternalStatus({ code: StatusCode.ERROR, error: upload.error });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getConfigFile(\r\n        instance: number,\r\n        filePath: string,\r\n        getContentProgressHandler: ((progressEvent: ProgressEvent) => void) | null\r\n    ): Promise<InternalStatus<DownloadedConfigFile, ConfigErrors | DownloadErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerFile(filePath, {\r\n                headers: { Instance: instance.toString() }\r\n            });\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200: {\r\n                if (getContentProgressHandler) {\r\n                    const payload = response.data as ConfigurationFileResponse;\r\n                    const contents = await TransferClient.Download(\r\n                        payload.fileTicket,\r\n                        getContentProgressHandler\r\n                    );\r\n\r\n                    if (contents.code === StatusCode.OK) {\r\n                        const temp: DownloadedConfigFile = Object.assign(\r\n                            { content: contents.payload },\r\n                            payload\r\n                        );\r\n                        return new InternalStatus({\r\n                            code: StatusCode.OK,\r\n                            payload: temp\r\n                        });\r\n                    }\r\n                    return new InternalStatus({ code: StatusCode.ERROR, error: contents.error });\r\n                }\r\n\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: response.data as ConfigurationFileResponse\r\n                });\r\n            }\r\n            case 410: {\r\n                const errorMessage = response.data as ErrorMessageResponse;\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.CONFIG_FILE_NOT_FOUND,\r\n                        { errorMessage },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getDirectory(\r\n        instance: number,\r\n        directoryPath: string,\r\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\r\n    ): Promise<InternalStatus<PaginatedConfigurationFileResponse, ConfigDirectoryErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerDirectory(\r\n                {\r\n                    directoryPath,\r\n                    pageSize: pageSize,\r\n                    page: page\r\n                },\r\n                { headers: { Instance: instance.toString() } }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<ConfigDirectoryErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: response.data as PaginatedConfigurationFileResponse\r\n                });\r\n            }\r\n\r\n            case 410: {\r\n                const errorMessage = response.data as ErrorMessageResponse;\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.CONFIG_FILE_DIRECTORY_NOT_FOUND,\r\n                        { errorMessage },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getRootDirectory(\r\n        instance: number,\r\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\r\n    ): Promise<InternalStatus<PaginatedConfigurationFileResponse, ConfigDirectoryErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerList(\r\n                {\r\n                    pageSize: pageSize,\r\n                    page: page\r\n                },\r\n                { headers: { Instance: instance.toString() } }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<ConfigDirectoryErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: response.data as PaginatedConfigurationFileResponse\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async deleteDirectory(\r\n        instance: number,\r\n        directory: ConfigurationFileRequest\r\n    ): Promise<InternalStatus<ConfigurationFileResponse | null, GenericErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerDeleteDirectory(\r\n                directory,\r\n                { headers: { Instance: instance.toString() } }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 204: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: null\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n"],"names":["ApiClient","instance","path","response","ServerClient","headers","Instance","toString","stat","InternalStatus","code","StatusCode","error","status","payload","InternalError","ErrorCode","axiosResponse","fileRequest","file","data","upload","TransferClient","fileTicket","filePath","getContentProgressHandler","contents","temp","Object","assign","content","errorMessage","directoryPath","page","pageSize","configOptions","directory"],"sourceRoot":""}