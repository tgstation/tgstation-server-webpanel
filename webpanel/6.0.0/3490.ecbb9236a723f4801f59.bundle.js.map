{"version":3,"file":"3490.ecbb9236a723f4801f59.bundle.js","mappings":"sNAsCA,QAAoB,cAA0BA,EAAAA,EAE1C,mBAAWC,GACP,OAAOC,KAAKC,gBAChB,CAGOC,WAAAA,GACHC,QAAQ,KAPJF,sBAAgB,OAIhBG,kBAAmB,EAIvBC,EAAAA,EAAaC,GAAG,cAAc,KAC1BN,KAAKC,sBAAmBM,CAAS,GAEzC,CAEA,kBAAaC,GAET,SADMH,EAAAA,EAAaI,YACfT,KAAKC,iBACL,OAAOD,KAAKC,iBAGhB,GAAID,KAAKI,iBACL,aAAa,IAAIM,SAAQC,IACrB,MAAMC,EACFC,IAEAF,EAAQE,GACRb,KAAKc,eAAe,gBAAiBF,EAAS,EAElDZ,KAAKM,GAAG,gBAAiBM,EAAS,IAM1C,IAAIG,EAFJf,KAAKI,kBAAmB,EAGxB,IACIW,QAAiBV,EAAAA,EAAaW,UAAWC,IAAIC,8BACjD,CAAE,MAAOC,GACL,MAAMC,EAAM,IAAIC,EAAAA,EAAwD,CACpEC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,IAIX,OAFAnB,KAAK0B,KAAK,gBAAiBN,GAC3BpB,KAAKI,kBAAmB,EACjBgB,CACX,CAEA,OAAQL,EAASY,QACb,KAAK,IAAK,CACN,MAAMC,EAAQ,IAAIP,EAAAA,EAAqD,CACnEC,KAAMC,EAAAA,EAAWM,GACjBC,QAASf,EAASgB,OAMtB,OAHA/B,KAAKC,iBAAmB2B,EACxB5B,KAAK0B,KAAK,gBAAiBE,GAC3B5B,KAAKI,kBAAmB,EACjBwB,CACX,CACA,KAAK,IAAK,CACN,MAAMI,EAAejB,EAASgB,KACxBH,EAAQ,IAAIP,EAAAA,EAGhB,CACEC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUC,kBACV,CAAEH,gBACFjB,KAKR,OAFAf,KAAK0B,KAAK,gBAAiBE,GAC3B5B,KAAKI,kBAAmB,EACjBwB,CACX,CACA,KAAK,IAAK,CACN,MAAMI,EAAejB,EAASgB,KACxBH,EAAQ,IAAIP,EAAAA,EAGhB,CACEC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUE,mBACV,CAAEJ,gBACFjB,KAKR,OAFAf,KAAK0B,KAAK,gBAAiBE,GAC3B5B,KAAKI,kBAAmB,EACjBwB,CACX,CACA,QAAS,CACL,MAAMR,EAAM,IAAIC,EAAAA,EAGd,CACEC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKR,OAFAf,KAAK0B,KAAK,gBAAiBN,GAC3BpB,KAAKI,kBAAmB,EACjBgB,CACX,EAER,CAEA,mBAAamB,GAGT,IAAIxB,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAIuB,gCACjD,CAAE,MAAOrB,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,GAEf,CAEA,OAAQJ,EAASY,QACb,KAAK,IACD,OAAO,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,QAAS,OAGjB,KAAK,IAAK,CACN,MAAME,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUO,uBACV,CAAET,gBACFjB,IAGZ,CACA,QACI,OAAO,IAAIM,EAAAA,EAAmD,CAC1DC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,kBAAa2B,CACTC,GAIA,IAAI5B,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAI2B,+BAA+B,CACxED,cAER,CAAE,MAAOxB,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,GAEf,CAEA,OAAQJ,EAASY,QACb,KAAK,IACD,OAAO,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,QAASf,EAASgB,OAG1B,KAAK,IAAK,CACN,MAAMC,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUW,wBACV,CAAEb,gBACFjB,IAGZ,CACA,KAAK,IAAK,CACN,MAAMiB,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUO,uBACV,CAAET,gBACFjB,IAGZ,CACA,KAAK,IAAK,CACN,MAAMiB,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAkE,CACzEC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUC,kBACV,CAAEH,gBACFjB,IAGZ,CACA,KAAK,IAAK,CACN,MAAMiB,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAmE,CAC1EC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUE,mBACV,CAAEJ,gBACFjB,IAGZ,CACA,QACI,OAAO,IAAIM,EAAAA,EAAmE,CAC1EC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,mBAAa+B,CACTH,EACAI,GAIA,IAAIhC,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAI2B,+BAA+B,CACxED,aACAK,WAAW,GAEnB,CAAE,MAAO7B,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,GAEf,CAEA,OAAQJ,EAASY,QACb,KAAK,IAAK,CACN,MAAMG,EAAUf,EAASgB,KACnBkB,QAAeC,EAAAA,EAAeC,OAAOrB,EAAQsB,WAAYL,GAC/D,OAAIE,EAAO3B,OAASC,EAAAA,EAAWM,GACpB,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,YAID,IAAIT,EAAAA,EAAmD,CAC1DC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOwB,EAAOxB,OAEtB,CACA,KAAK,IAAK,CACN,MAAMO,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUW,wBACV,CAAEb,gBACFjB,IAGZ,CACA,KAAK,IAAK,CACN,MAAMiB,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUO,uBACV,CAAET,gBACFjB,IAGZ,CACA,KAAK,IAAK,CACN,MAAMiB,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAkE,CACzEC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUC,kBACV,CAAEH,gBACFjB,IAGZ,CACA,KAAK,IAAK,CACN,MAAMiB,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAmE,CAC1EC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUE,mBACV,CAAEJ,gBACFjB,IAGZ,CACA,QACI,OAAO,IAAIM,EAAAA,EAAmE,CAC1EC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,aAAasC,EAAQ,KACjBC,EAAO,EAAC,SACRC,EAAWC,EAAAA,GAAcC,aAAaC,QAItC,IAAI3C,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAI0C,iCAAiC,CAC1EJ,SAAUA,EACVD,KAAMA,GAEd,CAAE,MAAOnC,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,GAEf,CAEA,OAAQJ,EAASY,QACb,KAAK,IACD,OAAO,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,QAASf,EAASgB,OAG1B,KAAK,IAAK,CACN,MAAMC,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAU0B,oBACV,CAAE5B,gBACFjB,IAGZ,CACA,QACI,OAAO,IAAIM,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,YAAa8C,CACTC,EACAC,GAIA,IAAIhD,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAI+C,+BAA+BF,EAChF,CAAE,MAAO3C,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,GAEf,CACA,OAAQJ,EAASY,QACb,KAAK,IAAK,CACN,MAAMsC,EAAkBlD,EAASgB,KAC3BmC,QAAiBhB,EAAAA,EAAeiB,SAClCF,EAAgBb,WAChBW,GAEJ,GAAIG,EAAS5C,OAASC,EAAAA,EAAWM,GAAI,CAEjC,MAAMuC,EAAsBC,OAAOC,OAC/B,CACIC,cAAeL,EAASpC,QAAQ0C,QAEpCP,GAEJ,OAAO,IAAI5C,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,QAASsC,GAEjB,CACI,OAAO,IAAI/C,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOyC,EAASzC,OAG5B,CACA,KAAK,IAAK,CACN,MAAMO,EAAejB,EAASgB,KAC9B,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAU0B,oBACV,CAAE5B,gBACFjB,IAGZ,CACA,QACI,OAAO,IAAIM,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,E,mEChdJ,QAAoB,cAA6BjB,EAAAA,EAC7C,cAAaqE,CACTM,EACAV,GAIA,IAAIhD,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAIyD,2BACzC,CACID,OAAQA,GAEZ,CACIE,QAAS,CACLC,OAAQ,8CAEZC,OAAQ,OACRC,mBAAoBf,GAGhC,CAAE,MAAO5C,GACL,OAAO,IAAIE,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAON,GAEf,CAEA,OAAQJ,EAASY,QACb,KAAK,IACD,OAAO,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,QAASf,EAASgB,OAG1B,KAAK,IACD,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GAAcC,EAAAA,GAAU6C,uBAAwB,CACvD/C,aAAcjB,EAASgB,SAInC,QACI,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,YAAaoC,CACTsB,EACA1B,GAIA,IAAIhC,QAFEV,EAAAA,EAAaI,YAGnB,IACIM,QAAiBV,EAAAA,EAAaW,UAAWC,IAAI+D,yBACzC,CACIP,OAAQA,GAEZ1B,EACA,CACI4B,QAAS,CACL,eAAgB,8BAIhC,CAAE,MAAOM,GACL,OAAO,IAAI5D,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOwD,GAEf,CAEA,OAAQlE,EAASY,QACb,KAAK,IACD,OAAO,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWM,GACjBC,QAAS,OAGjB,KAAK,IACD,OAAO,IAAIT,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GAAcC,EAAAA,GAAUgD,cAAe,CAC9CC,MAAM,MAIlB,KAAK,IACD,OAAO,IAAI9D,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GAAcC,EAAAA,GAAU6C,uBAAwB,CACvD/C,aAAcjB,EAASgB,SAInC,QACI,OAAO,IAAIV,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIQ,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,E","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/AdminClient.ts","webpack://tgstation-server-control-panel/./src/ApiClient/TransferClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport type {\n    AdministrationResponse,\n    ErrorMessageResponse,\n    LogFileResponse,\n    PaginatedLogFileResponse,\n    ServerUpdateResponse\n} from \"./generatedcode/generated\";\nimport { DownloadedLog } from \"./models/DownloadedLog\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { DownloadErrors, ProgressEvent, UploadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\ninterface IEvents {\n    loadAdminInfo: (user: InternalStatus<AdministrationResponse, AdminInfoErrors>) => void;\n}\n\nexport type AdminInfoErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR;\n\nexport type RestartErrors = GenericErrors | ErrorCode.ADMIN_WATCHDOG_UNAVAIL;\n\nexport type UpdateErrors =\n    | GenericErrors\n    | ErrorCode.ADMIN_WATCHDOG_UNAVAIL\n    | ErrorCode.ADMIN_VERSION_NOT_FOUND\n    | ErrorCode.ADMIN_GITHUB_RATE\n    | ErrorCode.ADMIN_GITHUB_ERROR\n    | UploadErrors;\n\nexport type LogsErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport type LogErrors = GenericErrors | ErrorCode.ADMIN_LOGS_IO_ERROR;\n\nexport default new (class AdminClient extends ApiClient<IEvents> {\n    private _cachedAdminInfo?: InternalStatus<AdministrationResponse, ErrorCode.OK>;\n    public get cachedAdminInfo() {\n        return this._cachedAdminInfo;\n    }\n    private loadingAdminInfo = false;\n\n    public constructor() {\n        super();\n        ServerClient.on(\"purgeCache\", () => {\n            this._cachedAdminInfo = undefined;\n        });\n    }\n\n    public async getAdminInfo(): Promise<InternalStatus<AdministrationResponse, AdminInfoErrors>> {\n        await ServerClient.wait4Init();\n        if (this._cachedAdminInfo) {\n            return this._cachedAdminInfo;\n        }\n\n        if (this.loadingAdminInfo) {\n            return await new Promise(resolve => {\n                const resolver = (\n                    user: InternalStatus<AdministrationResponse, AdminInfoErrors>\n                ) => {\n                    resolve(user);\n                    this.removeListener(\"loadAdminInfo\", resolver);\n                };\n                this.on(\"loadAdminInfo\", resolver);\n            });\n        }\n\n        this.loadingAdminInfo = true;\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.administrationControllerRead();\n        } catch (stat) {\n            const res = new InternalStatus<AdministrationResponse, AdminInfoErrors>({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<AdminInfoErrors>\n            });\n            this.emit(\"loadAdminInfo\", res);\n            this.loadingAdminInfo = false;\n            return res;\n        }\n\n        switch (response.status) {\n            case 200: {\n                const thing = new InternalStatus<AdministrationResponse, ErrorCode.OK>({\n                    code: StatusCode.OK,\n                    payload: response.data as AdministrationResponse\n                });\n\n                this._cachedAdminInfo = thing;\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_RATE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                const thing = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.ADMIN_GITHUB_ERROR\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", thing);\n                this.loadingAdminInfo = false;\n                return thing;\n            }\n            default: {\n                const res = new InternalStatus<\n                    AdministrationResponse,\n                    ErrorCode.UNHANDLED_RESPONSE\n                >({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n                this.emit(\"loadAdminInfo\", res);\n                this.loadingAdminInfo = false;\n                return res;\n            }\n        }\n    }\n\n    public async restartServer(): Promise<InternalStatus<null, RestartErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.administrationControllerDelete();\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<RestartErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<null, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateServer(\n        newVersion: string\n    ): Promise<InternalStatus<ServerUpdateResponse, UpdateErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.administrationControllerUpdate({\n                newVersion\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<UpdateErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ServerUpdateResponse\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_VERSION_NOT_FOUND,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<ServerUpdateResponse, ErrorCode.ADMIN_GITHUB_RATE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<ServerUpdateResponse, ErrorCode.ADMIN_GITHUB_ERROR>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<ServerUpdateResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async uploadVersion(\n        newVersion: string,\n        file: ArrayBuffer\n    ): Promise<InternalStatus<ServerUpdateResponse, UpdateErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.administrationControllerUpdate({\n                newVersion,\n                uploadZip: true\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<UpdateErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                const payload = response.data as ServerUpdateResponse;\n                const upload = await TransferClient.Upload(payload.fileTicket, file);\n                if (upload.code === StatusCode.OK) {\n                    return new InternalStatus({\n                        code: StatusCode.OK,\n                        payload\n                    });\n                }\n\n                return new InternalStatus<ServerUpdateResponse, UpdateErrors>({\n                    code: StatusCode.ERROR,\n                    error: upload.error\n                });\n            }\n            case 410: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_VERSION_NOT_FOUND,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 422: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_WATCHDOG_UNAVAIL,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 424: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<ServerUpdateResponse, ErrorCode.ADMIN_GITHUB_RATE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_RATE,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            case 429: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus<ServerUpdateResponse, ErrorCode.ADMIN_GITHUB_ERROR>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_GITHUB_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus<ServerUpdateResponse, ErrorCode.UNHANDLED_RESPONSE>({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLogs({\n        page = 1,\n        pageSize = configOptions.itemsperpage.value as number\n    }): Promise<InternalStatus<PaginatedLogFileResponse, LogsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.administrationControllerListLogs({\n                pageSize: pageSize,\n                page: page\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<LogsErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedLogFileResponse\n                });\n            }\n            case 409: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getLog(\n        logName: string,\n        progressHandler: (progressEvent: ProgressEvent) => void\n    ): Promise<InternalStatus<DownloadedLog, LogErrors | DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.administrationControllerGetLog(logName);\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n        switch (response.status) {\n            case 200: {\n                const logFileResponse = response.data as LogFileResponse;\n                const contents = await TransferClient.Download(\n                    logFileResponse.fileTicket,\n                    progressHandler\n                );\n                if (contents.code === StatusCode.OK) {\n                    //Object.assign() is a funky function but all it does is copy everything from the second object to the first object\n                    const temp: DownloadedLog = Object.assign(\n                        {\n                            content: await contents.payload.text()\n                        },\n                        logFileResponse\n                    );\n                    return new InternalStatus({\n                        code: StatusCode.OK,\n                        payload: temp\n                    });\n                } else {\n                    return new InternalStatus({\n                        code: StatusCode.ERROR,\n                        error: contents.error\n                    });\n                }\n            }\n            case 409: {\n                const errorMessage = response.data as ErrorMessageResponse;\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ADMIN_LOGS_IO_ERROR,\n                        { errorMessage },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n","import { AxiosProgressEvent } from \"axios\";\n\nimport { ApiClient } from \"./_base\";\nimport type { ErrorMessageResponse } from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type DownloadErrors = GenericErrors | ErrorCode.TRANSFER_NOT_AVAILABLE;\nexport type UploadErrors =\n    | GenericErrors\n    | ErrorCode.TRANSFER_NOT_AVAILABLE\n    | ErrorCode.UPLOAD_FAILED;\n\nexport type ProgressEvent = AxiosProgressEvent;\n\nexport default new (class TransferClient extends ApiClient {\n    public async Download(\n        ticket: string,\n        progressHandler: (progressEvent: ProgressEvent) => void\n    ): Promise<InternalStatus<Blob, DownloadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.transferControllerDownload(\n                {\n                    ticket: ticket\n                },\n                {\n                    headers: {\n                        Accept: \"application/json, application/octet-stream\"\n                    },\n                    format: \"blob\",\n                    onDownloadProgress: progressHandler\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as Blob\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.TRANSFER_NOT_AVAILABLE, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async Upload(\n        ticket: string,\n        file: ArrayBuffer\n    ): Promise<InternalStatus<null, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.transferControllerUpload(\n                {\n                    ticket: ticket\n                },\n                file as unknown as File,\n                {\n                    headers: {\n                        \"Content-Type\": \"application/octect-stream\"\n                    }\n                }\n            );\n        } catch (e) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: e as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 409: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.UPLOAD_FAILED, {\n                        void: true\n                    })\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.TRANSFER_NOT_AVAILABLE, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","cachedAdminInfo","this","_cachedAdminInfo","constructor","super","loadingAdminInfo","ServerClient","on","undefined","getAdminInfo","wait4Init","Promise","resolve","resolver","user","removeListener","response","apiClient","api","administrationControllerRead","stat","res","InternalStatus","code","StatusCode","ERROR","error","emit","status","thing","OK","payload","data","errorMessage","InternalError","ErrorCode","ADMIN_GITHUB_RATE","ADMIN_GITHUB_ERROR","UNHANDLED_RESPONSE","axiosResponse","restartServer","administrationControllerDelete","ADMIN_WATCHDOG_UNAVAIL","updateServer","newVersion","administrationControllerUpdate","ADMIN_VERSION_NOT_FOUND","uploadVersion","file","uploadZip","upload","TransferClient","Upload","fileTicket","getLogs","page","pageSize","configOptions","itemsperpage","value","administrationControllerListLogs","ADMIN_LOGS_IO_ERROR","getLog","logName","progressHandler","administrationControllerGetLog","logFileResponse","contents","Download","temp","Object","assign","content","text","ticket","transferControllerDownload","headers","Accept","format","onDownloadProgress","TRANSFER_NOT_AVAILABLE","transferControllerUpload","e","UPLOAD_FAILED","void"],"sourceRoot":""}