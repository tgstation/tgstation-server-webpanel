{"version":3,"file":"4614.377f7c6aa6c217254517.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ChatBotClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ChatBotCreateRequest,\n    ChatBotResponse,\n    ChatBotUpdateRequest,\n    ErrorMessageResponse,\n    PaginatedChatBotResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport configOptions from \"./util/config\";\n\ntype listChatBotsErrors = GenericErrors;\ntype createChatBotErrors = GenericErrors;\ntype getChatBotErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\ntype updateChatBotErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\ntype deleteChatBotErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\n\nexport default new (class ChatBotClient extends ApiClient {\n    public async listChatBots(\n        instance: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedChatBotResponse, listChatBotsErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.chatControllerList(\n                { page, pageSize },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedChatBotResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async createChatBot(\n        instance: number,\n        chatBot: ChatBotCreateRequest\n    ): Promise<InternalStatus<ChatBotResponse, createChatBotErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.chatControllerCreate(chatBot, {\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ChatBotResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async updateChatBot(\n        instance: number,\n        chatBot: ChatBotUpdateRequest\n    ): Promise<InternalStatus<ChatBotResponse | null, updateChatBotErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.chatControllerUpdate(chatBot, {\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ChatBotResponse\n                });\n            }\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getChatBot(\n        instance: number,\n        chatBotId: number\n    ): Promise<InternalStatus<ChatBotResponse, getChatBotErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.chatControllerGetId(chatBotId, {\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as ChatBotResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteChatBot(\n        instance: number,\n        chatBotId: number\n    ): Promise<InternalStatus<null, deleteChatBotErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.chatControllerDelete(chatBotId, {\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 204: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: null\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","listChatBots","instance","page","pageSize","configOptions","itemsperpage","value","response","ServerClient","wait4Init","apiClient","api","chatControllerList","headers","Instance","toString","stat","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","UNHANDLED_RESPONSE","axiosResponse","createChatBot","chatBot","chatControllerCreate","updateChatBot","chatControllerUpdate","NO_DB_ENTITY","errorMessage","getChatBot","chatBotId","chatControllerGetId","deleteChatBot","chatControllerDelete"],"sourceRoot":""}