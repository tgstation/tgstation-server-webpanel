"use strict";(self.webpackChunktgstation_server_control_panel=self.webpackChunktgstation_server_control_panel||[]).push([[9521],{76352:function(e,t,n){var s=n(30653),r=n(96846),o=n(53803),a=n(75631),i=n(27961);t.Z=new class extends s.S{async listInstances({page:e=1,pageSize:t=i.ZP.itemsperpage.value}={}){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.instanceControllerList({pageSize:t,page:e})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}return 200===n.status?new o.Z({code:o.G.OK,payload:n.data}):new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}async grantPermissions(e){let t;await a.Z.wait4Init();try{t=await a.Z.apiClient.api.instanceControllerGrantPermissions(e.id),this.emit("instanceChange",e.id)}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(t.status){case 204:return new o.Z({code:o.G.OK,payload:{id:e.id}});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:t.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:t},t)})}}async editInstance(e){let t;await a.Z.wait4Init();try{t=await a.Z.apiClient.api.instanceControllerUpdate(e),this.emit("instanceChange",e.id)}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(t.status){case 200:case 202:return new o.Z({code:o.G.OK,payload:t.data});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:t.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:t},t)})}}async detachInstance(e){let t;await a.Z.wait4Init();try{t=await a.Z.apiClient.api.instanceControllerDelete(e),this.emit("instanceChange",e)}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(t.status){case 204:return new o.Z({code:o.G.OK,payload:null});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:t.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:t},t)})}}async createInstance(e){let t;await a.Z.wait4Init();try{t=await a.Z.apiClient.api.instanceControllerCreate(e)}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(t.status){case 200:case 201:{const e=t.data;return this.emit("instanceChange",e.id),new o.Z({code:o.G.OK,payload:e})}case 409:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.HTTP_DATA_INEGRITY,{errorMessage:t.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:t},t)})}}async getInstance(e){let t;await a.Z.wait4Init();try{t=await a.Z.apiClient.api.instanceControllerGetId(e)}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(t.status){case 200:return new o.Z({code:o.G.OK,payload:t.data});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:t.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:t},t)})}}}},75870:function(e,t,n){var s=n(30653),r=n(96846),o=n(53803),a=n(75631),i=n(27961);t.Z=new class extends s.S{constructor(){super(),this._cachedInstancePermissionSet=new Map,this.loadingInstancePermissionSetInfo=new Map,a.Z.on("purgeCache",(()=>{this._cachedInstancePermissionSet.clear()}))}async listInstancePermissionSets(e,{page:t=1,pageSize:n=i.ZP.itemsperpage.value}){let s;await a.Z.wait4Init();try{s=await a.Z.apiClient.api.instancePermissionSetControllerList({page:t,pageSize:n},{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}if(200===s.status){return new o.Z({code:o.G.OK,payload:s.data})}return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:s},s)})}async getCurrentInstancePermissionSet(e,t){if(await a.Z.wait4Init(),!t&&this._cachedInstancePermissionSet.has(e))return this._cachedInstancePermissionSet.get(e);if(this.loadingInstancePermissionSetInfo.get(e))return await new Promise((e=>{const t=n=>{e(n),this.removeListener("loadInstancePermissionSet",t)};this.on("loadInstancePermissionSet",t)}));let n;this.loadingInstancePermissionSetInfo.set(e,!0);try{n=await a.Z.apiClient.api.instancePermissionSetControllerRead({headers:{Instance:e.toString()}})}catch(t){const n=new o.Z({code:o.G.ERROR,error:t});return this.emit("loadInstancePermissionSet",n),this.loadingInstancePermissionSetInfo.set(e,!1),n}if(200===n.status){const t=new o.Z({code:o.G.OK,payload:n.data});return this._cachedInstancePermissionSet.set(e,t),this.emit("loadInstancePermissionSet",t),this.loadingInstancePermissionSetInfo.set(e,!1),t}{const t=new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)});return this.emit("loadInstancePermissionSet",t),this.loadingInstancePermissionSetInfo.set(e,!1),t}}async getByPermissionSetId(e,t){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.instancePermissionSetControllerGetId(t,{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(n.status){case 200:return new o.Z({code:o.G.OK,payload:n.data});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:n.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}}async createInstancePermissionSet(e,t){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.instancePermissionSetControllerCreate(t,{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(n.status){case 201:return new o.Z({code:o.G.OK,payload:n.data});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:n.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}}async updateInstancePermissionSet(e,t){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.instancePermissionSetControllerUpdate(t,{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(n.status){case 200:return new o.Z({code:o.G.OK,payload:n.data});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:n.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}}async deleteInstancePermissionSet(e,t){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.instancePermissionSetControllerDelete(t,{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(n.status){case 204:return new o.Z({code:o.G.OK,payload:{permissionSetId:t}});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.NO_DB_ENTITY,{errorMessage:n.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}}}},23204:function(e,t,n){var s=n(30653),r=n(96846),o=n(53803),a=n(75631),i=n(27961);t.Z=new class extends s.S{async listActiveJobs(e,{page:t=1,pageSize:n=i.ZP.itemsperpage.value}){let s;await a.Z.wait4Init();try{s=await a.Z.apiClient.api.jobControllerRead({page:t,pageSize:n},{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}if(200===s.status){const t=s.data.content.map((t=>({...t,instanceid:e})));return new o.Z({code:o.G.OK,payload:{...s.data,content:t}})}return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:s},s)})}async getJob(e,t){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.jobControllerGetId(t,{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(n.status){case 200:{const t={...n.data,instanceid:e};return new o.Z({code:o.G.OK,payload:t})}case 404:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.JOB_JOB_NOT_FOUND,{errorMessage:n.data})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}}async deleteJob(e,t){let n;await a.Z.wait4Init();try{n=await a.Z.apiClient.api.jobControllerDelete(t,{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}switch(n.status){case 202:{const t={...n.data,instanceid:e};return new o.Z({code:o.G.OK,payload:t})}case 404:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.JOB_JOB_NOT_FOUND,{errorMessage:n.data})});case 410:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.JOB_JOB_COMPLETE,{void:!0})});default:return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:n},n)})}}async listJobs(e,{page:t=1,pageSize:n=i.ZP.itemsperpage.value}){let s;await a.Z.wait4Init();try{s=await a.Z.apiClient.api.jobControllerList({pageSize:n,page:t},{headers:{Instance:e.toString()}})}catch(e){return new o.Z({code:o.G.ERROR,error:e})}if(200===s.status){const t=s.data.content.map((t=>({...t,instanceid:e})));return new o.Z({code:o.G.OK,payload:{...s.data,content:t}})}return new o.Z({code:o.G.ERROR,error:new r.ZP(r.jK.UNHANDLED_RESPONSE,{axiosResponse:s},s)})}}},39521:function(e,t,n){n.r(t);var s=n(74830),r=n(28555),o=n(10239),a=n(98525),i=n(81249),c=n(12527),l=n(16964),d=n(48509),h=n(76352),u=n(75870),p=n(23204),w=n(96846),R=n(53803),g=n(75631),Z=n(16942),I=n(27961),b=n(50452);t.default=new class extends c.TypedEmitter{set fastmode(e){(async()=>{await this.jobsHubSupported()||(console.log(`JobsController going in fastmode for ${e} cycles`),this.fastmodecount=e,await this.restartLoop())})()}async reset(e){console.log("JobsController resetting"),e&&(this.jobs=new Map,this.jobsByInstance=new Map);try{await this.reloadAccessibleInstances()}catch(e){return void this.errors.push(new w.ZP(w.jK.APP_FAIL,{jsError:Error(e)}))}await this.restartLoop()}constructor(){super(),this.fastmodecount=0,this.currentLoop=new Date(0),this.accessibleInstances=new Map,this.enableJobProgressWorkaround=void 0,this.errors=[],this.nextRetry=void 0,this.jobs=new Map,this.jobsByInstance=new Map,this.jobCallback=new Map,this.lastSeenJob=-1,this.connection=void 0,this.connection=null,this.nextRetry=null,this.loop=this.loop.bind(this),this.reset=this.reset.bind(this),this.cleanConnection=this.cleanConnection.bind(this),this.restartLoop=this.restartLoop.bind(this)}async stopAndRemoveConnection(){if(console.log("JobsController: stopAndRemoveConnection"),this.connection){console.log(`Stopping and removing active hub connection. State is: ${this.connection.state}`);const e=this.connection;this.connection=null,await e.stop()}}async cleanConnection(){await this.jobsHubSupported()&&(console.log("JobsController: cleanConnection"),await this.stopAndRemoveConnection(),this.errors=[],this.nextRetry=null,this.jobs=new Map,this.jobsByInstance=new Map,this.emit("jobsLoaded"))}init(){window.clients.JobsController=this,g.Z.on("purgeCache",(()=>{this.reset(!0)})),g.Z.on("logout",(()=>{this.cleanConnection()})),h.Z.on("instanceChange",(()=>{this.reset(!1)})),b.Z.addHook((async()=>{console.log("JobsController resetting due to login"),await this.reset(!0)})),g.Z.on("loadServerInfo",(e=>{e.code===R.G.OK&&(this.enableJobProgressWorkaround=(0,i.satisfies)(e.payload.version,"<4.11.0"))}))}async reloadAccessibleInstances(e=!1){const t=[],n=await h.Z.listInstances({pageSize:100});if(n.code===R.G.ERROR)return void this.errors.push(n.error);t.push(...n.payload.content);for(let e=2;e<=n.payload.totalPages;e++){const n=await h.Z.listInstances({page:e,pageSize:100});if(n.code===R.G.ERROR)return void this.errors.push(n.error);t.push(...n.payload.content)}const s=new Map,r=t.filter((e=>e.online&&e.accessible)).map((e=>u.Z.getCurrentInstancePermissionSet(e.id).then((t=>{t.code!==R.G.ERROR?s.set(e.id,e):t.error.code!==w.jK.HTTP_ACCESS_DENIED&&this.errors.push(t.error)}))));await Promise.all(r),this.accessibleInstances=s,e&&window.setTimeout((()=>{this.reloadAccessibleInstances(!0)}),I.ZP.instanceprobetimer.value)}async jobsHubSupported(){if(I.ZP.restjobs2.value)return!1;if(this.connection)return!0;const e=await g.Z.getServerInfo();return e.code===R.G.OK?(0,i.gte)(e.payload.apiVersion,"9.13.0"):(console.warn("Failed to retrieve server info to determin jobs hub support!"),!1)}async restartLoop(){if(console.log("JobsController: restartLoop"),!await this.jobsHubSupported()){const e=new Date(Date.now());return this.currentLoop=e,void window.setTimeout((()=>{this.loop(e).catch((e=>this.errors.push(new w.ZP(w.jK.APP_FAIL,{jsError:Error(e)}))))}),0)}await this.stopAndRemoveConnection(),this.nextRetry=null;let e=I.ZP.apipath.value;e.endsWith("/")||(e+="/");const t=this.connection=(new s.s).withUrl(`${e}api/hubs/jobs`,{accessTokenFactory:async()=>(await g.Z.wait4Token()).bearer,transport:r.n.ServerSentEvents,headers:g.Z.defaultHeaders}).withAutomaticReconnect({nextRetryDelayInMilliseconds:e=>{if(0==e.previousRetryCount)return 0;const t=1e3*Math.min(2**e.previousRetryCount,30),n=new Date;return n.setMilliseconds(n.getMilliseconds()+t),this.nextRetry=n,this.emit("jobsLoaded"),t}}).configureLogging(o.i.Trace).build();t.on("ReceiveJobUpdate",(async e=>{console.log(`Received update for job ${e.id}`),this.registerJob(e,e.instanceId),this.emit("jobsLoaded");const t=await this.canCancel(e,this.errors);this.jobs.has(e.id)&&(this.jobs.get(e.id).canCancel=t,this.emit("jobsLoaded"))}));let n=!0,i=null;t.onreconnected((()=>{this.nextRetry=null,n=!0,this.emit("jobsLoaded"),console.log("Jobs hub connection re-established, running refresh...");const e=async()=>{clearTimeout(i),i=null,t.state===a.A.Connected&&(n=!1,this.errors=[],this.emit("jobsLoaded"),await this.reloadAccessibleInstances(!1),await this.loop(this.currentLoop=new Date))};i&&clearTimeout(i),i=setTimeout((()=>{e()}),3e3)})),t.onreconnecting((()=>{if(n){i&&(clearTimeout(i),i=null);(async()=>{(await g.Z.login()).code!=R.G.OK?g.Z.logout():n=!1})()}else this.errors=[],this.errors.push(new w.ZP(w.jK.BAD_HUB_CONNECTION,{void:!0})),this.emit("jobsLoaded")})),t.start().catch((e=>{this.connection==t&&(this.errors=[],e instanceof Error?this.errors.push(new w.ZP(w.jK.BAD_HUB_CONNECTION,{jsError:e})):this.errors.push(new w.ZP(w.jK.BAD_HUB_CONNECTION,{void:!0})),this.emit("jobsLoaded"),this.connection=null)}))}_registerJob(e,t){const n=e;if(this.jobs.has(n.id)&&this.jobs.get(n.id).stoppedAt)return void console.warn(`Receieved job update for ${n.id} after it completed! Incoming job was${n.stoppedAt?"":" not"} completed.`);t&&(n.instanceId=t);const s=this.jobsByInstance.get(n.instanceId)??new Map;this.jobsByInstance.set(n.instanceId,s),s.set(n.id,n),this.jobs.set(n.id,n)}registerJob(e,t){this._registerJob(e,t);(async()=>{await this.jobsHubSupported()||(console.log("Server does not support jobs hub, restarting loop due to job registration."),await this.restartLoop())})()}async loop(e){if(e!==this.currentLoop)return;this.errors=[];let t=0;const n=[];let s=this.lastSeenJob;for(const r of this.accessibleInstances.keys()){const o=async n=>{for(const e of n)this._registerJob(e),s=Math.max(s,e.id);const o=n.map((e=>e.id)),a=Array.from(this.jobs.values()).filter((e=>!e.stoppedAt)).filter((e=>e.instanceId===r)).map((e=>e.id)).filter((e=>!o.includes(e))),i=this.jobsByInstance.get(r)??new Map;this.jobsByInstance.set(r,i);const c=[];a.forEach((e=>{c.push(p.Z.getJob(r,e).then((e=>{e.code!==R.G.ERROR?(i.set(e.payload.id,e.payload),this.jobs.set(e.payload.id,e.payload)):this.errors.push(e.error)})))})),await Promise.all(c),e===this.currentLoop&&(t+=n.length)},a=e=>{e.code===w.jK.HTTP_DATA_INEGRITY&&e.originalErrorMessage?.errorCode===d.jK.InstanceOffline?(console.log(`[JobsController] Clearing instance ${r} as it is now offline`),this.accessibleInstances.delete(r),this.reloadAccessibleInstances().catch((e=>{this.errors.push(new w.ZP(w.jK.APP_FAIL,{jsError:Error(e)}))}))):this.errors.push(e)},i=-1===this.lastSeenJob?p.Z.listActiveJobs:p.Z.listJobs;n.push(i(r,{page:1,pageSize:10}).then((async t=>{if(e===this.currentLoop)if(t.code===R.G.OK){let n=t.payload.content;e:for(let e=2;e<=t.payload.totalPages;e++){for(const e of n)if(e.id<=this.lastSeenJob)break e;const s=await i(r,{page:e,pageSize:10});if(s.code===R.G.ERROR)return void a(s.error);t.payload.content.push(...s.payload.content),n=t.payload.content}if(e!==this.currentLoop)return;await o(t.payload.content.filter((e=>e.id>this.lastSeenJob||this.jobs.has(e.id))))}else a(t.error)})).catch((e=>{console.error(e)})))}await Promise.all(n),this.lastSeenJob=s,n.length=0;for(const t of this.jobs.values())this.enableJobProgressWorkaround&&void 0===t.progress&&!t.stoppedAt&&this.accessibleInstances.has(t.instanceId)&&n.push(p.Z.getJob(t.instanceId,t.id).then((n=>{e===this.currentLoop&&(n.code===R.G.OK?t.progress=n.payload.progress:n.error.code===w.jK.HTTP_DATA_INEGRITY&&n.error.originalErrorMessage?.errorCode===d.jK.InstanceOffline?(console.log(`[JobsController] Clearing instance ${t.instanceId} as it is now offline`),this.accessibleInstances.delete(t.instanceId),this.reloadAccessibleInstances().catch((e=>{this.errors.push(new w.ZP(w.jK.APP_FAIL,{jsError:Error(e)}))}))):this.errors.push(n.error))}))),n.push(this.canCancel(t,this.errors).then((n=>{e===this.currentLoop&&(t.canCancel=n)})));if(await Promise.all(n),e===this.currentLoop){this.emit("jobsLoaded");for(const e of this.jobs.values()){if(!e.stoppedAt)continue;const t=this.jobCallback.get(e.id);if(t){for(const n of t)n(e);this.jobCallback.delete(e.id)}}this.fastmodecount&&e===this.currentLoop?(window.setTimeout((()=>{this.loop(e).catch((e=>this.errors.push(new w.ZP(w.jK.APP_FAIL,{jsError:Error(e)}))))}),800),this.fastmodecount--,console.log(`JobsController will remain in fastmode for ${this.fastmodecount} cycles`)):window.setTimeout((()=>{this.loop(e).catch((e=>this.errors.push(new w.ZP(w.jK.APP_FAIL,{jsError:Error(e)}))))}),1e3*(t?I.ZP.jobpollactive.value:I.ZP.jobpollinactive.value))}}async canCancel(e,t){if(void 0!==e.canCancel)return e.canCancel;if(void 0===e.cancelRightsType)return!0;switch(e.cancelRightsType){case d.KT.Administration:{const n=await Z.Z.getCurrentUser();if(n.code===R.G.OK){const t=e.cancelRight;return!!((0,l.Zg)(n.payload).administrationRights&t)}return t.push(n.error),!1}case d.KT.InstanceManager:{const n=await Z.Z.getCurrentUser();if(n.code===R.G.OK){const t=e.cancelRight;return!!((0,l.Zg)(n.payload).instanceManagerRights&t)}return t.push(n.error),!1}case d.KT.Engine:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.engineRights&t)}return t.push(n.error),!1}case d.KT.ChatBots:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.chatBotRights&t)}return t.push(n.error),!1}case d.KT.Configuration:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.configurationRights&t)}return t.push(n.error),!1}case d.KT.DreamDaemon:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.dreamDaemonRights&t)}return t.push(n.error),!1}case d.KT.DreamMaker:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.dreamMakerRights&t)}return t.push(n.error),!1}case d.KT.InstancePermissionSet:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.instancePermissionSetRights&t)}return t.push(n.error),!1}case d.KT.Repository:{const n=await u.Z.getCurrentInstancePermissionSet(e.instanceId);if(n.code===R.G.OK){const t=e.cancelRight;return!!(n.payload.repositoryRights&t)}return t.push(n.error),!1}}}async cancelJob(e,t){const n=this.jobs.get(e);if(!n)return!1;const s=await p.Z.deleteJob(n.instanceId,e);return s.code===R.G.OK||(t(s.error),!1)}clearJob(e,t=!1){const n=this.jobs.get(e);return!!n&&(this.jobsByInstance.get(n.instanceId)?.delete(e),this.jobs.delete(e),t||this.emit("jobsLoaded"),!0)}registerCallback(e,t){const n=this.jobCallback.get(e)??new Set;n.add(t),this.jobCallback.set(e,n)}}}}]);
//# sourceMappingURL=9521.af5da2309d25f8f0908b.bundle.js.map