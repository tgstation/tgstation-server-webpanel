{"version":3,"file":"2685.6382f78c17c0f4e77e3a.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          noLocalize?: boolean;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(function StringControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            ref={ref}\n        />\n    );\n});\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(function PasswordControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(e.target.value)}\n            disabled={props.disabled}\n            type=\"password\"\n            ref={ref}\n        />\n    );\n});\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(function BooleanControl(\n    props,\n    ref\n): JSX.Element {\n    const rndId = Math.random().toString();\n    return (\n        <label\n            htmlFor={rndId}\n            className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n            <Form.Check\n                id={rndId}\n                checked={props.value as boolean}\n                onChange={e => props.onChange(e.target.checked)}\n                type=\"switch\"\n                className=\"m-auto\"\n                disabled={props.disabled}\n                ref={ref}\n            />\n        </label>\n    );\n});\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(function NumberControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as number}\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                props.onChange(\n                    isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                )\n            }\n            disabled={props.disabled}\n            min={props.min}\n            max={props.max}\n            type=\"number\"\n            ref={ref}\n        />\n    );\n});\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n    noLocalize?: boolean;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(function EnumControl(\n    props,\n    ref\n): JSX.Element {\n    return (\n        <Form.Control\n            value={props.value as string}\n            onChange={e => props.onChange(parseInt(e.target.value))}\n            disabled={props.disabled}\n            as=\"select\"\n            custom\n            ref={ref}>\n            {Object.entries(props.enum)\n                //filters out reverse mapping\n                .filter(([key]) => isNaN(parseInt(key)))\n                .map(([key, value]) => {\n                    return props.noLocalize ? (\n                        <option key={value} value={value}>\n                            {key}\n                        </option>\n                    ) : (\n                        <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                            {message => (\n                                <option key={value} value={value}>\n                                    {message}\n                                </option>\n                            )}\n                        </FormattedMessage>\n                    );\n                })}\n        </Form.Control>\n    );\n});\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed = currentValue != (props.defaultValue ?? defaultValues[props.type]);\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-50 w-xl-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled ? <FormattedMessage id=\"generic.readonly\" /> : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon={faInfo} />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    noLocalize={props.noLocalize}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n\n            <InputGroup.Append>\n                <Button\n                    style={{ visibility: !changed || props.disabled ? \"hidden\" : undefined }}\n                    variant=\"danger\"\n                    onClick={() =>\n                        setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                    }>\n                    <FontAwesomeIcon icon=\"undo\" />\n                </Button>\n            </InputGroup.Append>\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n        ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n          ExtractValues<Fields[Id][\"enum\"]>\n        : Fields[Id][\"type\"] extends FieldType.Boolean\n        ? boolean\n        : Fields[Id][\"type\"] extends FieldType.String\n        ? string\n        : Fields[Id][\"type\"] extends FieldType.Password\n        ? string\n        : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n    saveMessageId?: string;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = false;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id={props.saveMessageId ?? \"generic.save\"} />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceResponse,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient, { GetInstanceErrors } from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, {\n    StatusCode\n} from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {}\ninterface IState {\n    moving: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: [],\n            moving: false\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        if (!!instance.autoUpdateCron && !!instance.autoUpdateInterval) {\n            alert(\"Cannot set both auto update interval and cron!\");\n            return;\n        }\n\n        const instanceId = this.context.instance.id;\n        let newPath: string | undefined;\n        if (instance.path && instance.path != this.context.instance.path) {\n            newPath = instance.path;\n            instance.path = null;\n            instance.online = false; // need to offline the instance before moving it\n            this.setState({ moving: true });\n        }\n\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: instanceId\n        });\n        if (response.code !== StatusCode.OK) {\n            this.addError(response.error);\n            this.setState({ moving: false });\n            return;\n        }\n\n        if (newPath) {\n            //move the instance\n            const response2 = await InstanceClient.editInstance({\n                id: this.context.instance.id,\n                path: newPath\n            });\n\n            if (response2.code !== StatusCode.OK) {\n                this.addError(response2.error);\n                this.setState({ moving: false });\n                await this.context.reloadInstance();\n                return;\n            }\n\n            // we can't use the jobs controller because instance move jobs are special so just wait until the move is done\n            let response3: InternalStatus<InstanceResponse, GetInstanceErrors>;\n            do {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                response3 = await InstanceClient.getInstance(instanceId);\n\n                if (response3.code !== StatusCode.OK) {\n                    this.addError(response3.error);\n                    this.setState({ moving: false });\n                    await this.context.reloadInstance();\n                    return;\n                }\n            } while (response3.payload.moveJob);\n\n            const response4 = await InstanceClient.editInstance({\n                online: true,\n                id: instanceId\n            });\n            if (response4.code !== StatusCode.OK) {\n                this.addError(response4.error);\n                this.setState({ moving: false });\n            } else {\n                JobsController.registerJob(response2.payload.moveJob!, instanceId);\n            }\n        }\n\n        await this.context.reloadInstance();\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateCron: {\n                name: \"fields.instance.cron\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.autoUpdateCron,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                {this.state.moving ? (\n                    <Loading text=\"loading.instance.move\" />\n                ) : (\n                    <InputForm fields={fields} onSave={this.editInstance} />\n                )}\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    (undefined as unknown) as InstanceEditContext\n);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["FieldType","StringControl","React","props","ref","value","onChange","e","target","disabled","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","as","custom","Object","entries","enum","filter","key","map","noLocalize","name","message","defaultValues","Enum","Number","Boolean","String","Password","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","undefined","changed","overlay","innerid","tooltip","show","triggerHandler","style","visibility","icon","faInfo","newValue","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","outputObject","alwaysInclude","includeAll","onSave","saveMessageId","JsonViewer","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","InstanceSettings","constructor","super","this","editInstance","bind","state","errors","moving","addError","error","setState","Array","from","push","instance","autoUpdateCron","autoUpdateInterval","alert","instanceId","context","newPath","path","online","response","InstanceClient","code","StatusCode","response2","reloadInstance","response3","Promise","resolve","setTimeout","payload","moveJob","response4","JobsController","render","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","InstanceManagerRights","chatBotLimit","configurationType","ConfigurationType","err","index","onClose","prev","newarr","text","contextType","InstanceEditContext","withRouter","_excluded","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","InputGroup","_ref","bsPrefix","size","hasValidation","_ref$as","displayName","Text","Radio","Checkbox","Append","Prepend"],"sourceRoot":""}