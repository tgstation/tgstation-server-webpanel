{"version":3,"file":"3763.db66f3ae50d872533081.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/ChatBots.tsx"],"sourcesContent":["import { faDiscord } from \"@fortawesome/free-brands-svg-icons\";\nimport {\n    faArrowLeft,\n    faArrowRight,\n    faCheck,\n    faClipboard,\n    faComment,\n    faHashtag,\n    faPlus,\n    faTrash\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\n\nimport ChatBotClient from \"../../../../ApiClient/ChatBotClient\";\nimport {\n    ChatBotResponse,\n    ChatBotRights,\n    ChatChannel,\n    ChatProvider\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InternalError, {\n    allAddons,\n    ErrorCode\n} from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasChatBotRight } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm, { InputFormField } from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\nenum DiscordDMOutputDisplayType {\n    Always = 0,\n    OnError = 1,\n    Never = 2\n}\n\nenum IrcPasswordType {\n    Server = 0,\n    SASL = 1,\n    NickServ = 2\n}\n\ninterface ChatBotConnectionBuilder {\n    provider: ChatProvider;\n    name: string;\n    enabled: boolean;\n    channelLimit: number;\n    reconnectionInterval: number;\n}\n\ninterface ChatBotUpdate extends ChatBotConnectionBuilder {\n    connectionString: string;\n}\n\ninterface DiscordConnectionBuilder extends ChatBotConnectionBuilder {\n    botToken: string;\n    deploymentBranding: boolean;\n    dmOutputDisplay: DiscordDMOutputDisplayType;\n}\n\ninterface IrcConnectionBuilder extends ChatBotConnectionBuilder {\n    name: string;\n    address: string;\n    port: number;\n    nickname: string;\n    useSsl: boolean;\n    passwordType: IrcPasswordType;\n    password?: string;\n}\n\ninterface ChatBot extends ChatBotResponse {\n    loadedWithConnectionString?: boolean;\n}\n\ntype IProps = WrappedComponentProps;\n\ninterface IState {\n    loading: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    chatBots: ChatBot[];\n    selectedAddNode: boolean;\n    selectedChatBot: ChatBot | null;\n    selectedChannel: ChatChannel | null;\n    addBotProvider: ChatProvider;\n    flashExport: boolean;\n}\n\nclass ChatBots extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            errors: [],\n            chatBots: [],\n            selectedAddNode: false,\n            selectedChatBot: null,\n            selectedChannel: null,\n            addBotProvider: ChatProvider.Discord,\n            flashExport: false\n        };\n\n        this.renderChatBotBrowser = this.renderChatBotBrowser.bind(this);\n    }\n\n    public async componentDidMount(): Promise<void> {\n        if (hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read))\n            await this.refresh();\n        else\n            this.setState({\n                loading: false\n            });\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async refresh(): Promise<void> {\n        if (hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read)) {\n            this.setState({\n                loading: true\n            });\n\n            let maxPages = 1;\n            let chatBots: ChatBot[] = [];\n            for (let page = 1; page <= maxPages; ++page) {\n                const response = await ChatBotClient.listChatBots(this.context.instance.id, {\n                    page\n                });\n\n                if (response.code === StatusCode.OK) {\n                    maxPages = response.payload.totalPages;\n\n                    chatBots = chatBots.concat(response.payload.content);\n                } else {\n                    this.addError(response.error);\n                    break;\n                }\n            }\n\n            // List endpoint does not pull connection string\n            chatBots.forEach(chatBot => (chatBot.loadedWithConnectionString = false));\n\n            this.setState({\n                chatBots,\n                loading: false\n            });\n        }\n    }\n\n    private async addChatBot(connectionBuilder: ChatBotConnectionBuilder): Promise<void> {\n        let connectionString: string;\n        let discordBuilder: DiscordConnectionBuilder;\n        let ircBuilder: IrcConnectionBuilder;\n\n        if (!connectionBuilder.name) {\n            alert(\n                this.props.intl.formatMessage({\n                    id: \"view.instance.chat.create.missing.name\"\n                })\n            );\n            return;\n        }\n\n        switch (connectionBuilder.provider) {\n            case ChatProvider.Discord:\n                discordBuilder = connectionBuilder as DiscordConnectionBuilder;\n                if (!discordBuilder.botToken) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.token\"\n                        })\n                    );\n                    return;\n                }\n\n                connectionString = `${discordBuilder.botToken};${\n                    discordBuilder.dmOutputDisplay\n                };0;${discordBuilder.deploymentBranding ? \"1\" : \"0\"}`;\n                break;\n            case ChatProvider.Irc:\n                ircBuilder = connectionBuilder as IrcConnectionBuilder;\n                if (!ircBuilder.address) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.address\"\n                        })\n                    );\n                    return;\n                }\n                if (!ircBuilder.nickname) {\n                    alert(\n                        this.props.intl.formatMessage({\n                            id: \"view.instance.chat.create.missing.nick\"\n                        })\n                    );\n                    return;\n                }\n\n                connectionString = `${ircBuilder.address};${ircBuilder.port};${\n                    ircBuilder.nickname\n                };${ircBuilder.useSsl ? \"1\" : \"0\"}`;\n                if (ircBuilder.password)\n                    connectionString += `;${ircBuilder.passwordType};${ircBuilder.password}`;\n                break;\n            default:\n                throw new Error(\"Bad provider!\");\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.createChatBot(this.context.instance.id, {\n            provider: connectionBuilder.provider,\n            name: connectionBuilder.name,\n            enabled: connectionBuilder.enabled,\n            connectionString,\n            channelLimit: connectionBuilder.channelLimit,\n            reconnectionInterval: connectionBuilder.reconnectionInterval\n        });\n\n        if (response.code === StatusCode.OK) {\n            const newChatBot: ChatBot = response.payload;\n            newChatBot.loadedWithConnectionString = true;\n            const newChatBots = [...this.state.chatBots];\n            newChatBots.push(newChatBot);\n            this.setState({\n                chatBots: newChatBots,\n                selectedChatBot: newChatBot,\n                selectedAddNode: false\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async reloadChatBot(chatBot: ChatBot): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.getChatBot(this.context.instance.id, chatBot.id);\n        if (response.code === StatusCode.OK) {\n            chatBot = response.payload;\n            chatBot.loadedWithConnectionString = true;\n\n            const chatBots = [...this.state.chatBots];\n            const index = chatBots.indexOf(chatBot);\n            chatBots[index] = chatBot;\n\n            this.setState({\n                chatBots,\n                selectedChatBot: chatBot\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async editChatBot(chatBotUpdate: ChatBotUpdate): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        let chatBot = this.state.selectedChatBot!;\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            ...chatBotUpdate,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async addChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        if (!chatChannel.channelData) {\n            alert(\n                this.props.intl.formatMessage({ id: \"view.instance.chat.create.missing.channel\" })\n            );\n            return;\n        }\n\n        if (chatBot.provider === ChatProvider.Discord) {\n            const reg = new RegExp(\"^[0-9]+$\");\n            if (!reg.test(chatChannel.channelData)) {\n                alert(\n                    this.props.intl.formatMessage({\n                        id: \"view.instance.chat.create.invalid.discord\"\n                    })\n                );\n                return;\n            }\n        }\n\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        newChannels.push(chatChannel);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot,\n                    selectedChannel: chatBot.channels[chatBot.channels.length - 1]\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async editChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        const channelToEdit = newChannels[newChannels.indexOf(this.state.selectedChannel!)];\n\n        Object.assign(channelToEdit, chatChannel);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteChatChannel(chatBot: ChatBot, chatChannel: ChatChannel): Promise<void> {\n        if (\n            !confirm(\n                this.props.intl.formatMessage(\n                    { id: \"view.instance.chat.delete.channel.confirm\" },\n                    {\n                        channelName: chatChannel.tag ?? chatChannel.channelData\n                    }\n                )\n            )\n        )\n            return;\n\n        this.setState({\n            loading: true\n        });\n\n        const newChannels = [...(chatBot.channels ?? [])];\n        const index = newChannels.indexOf(chatChannel);\n        newChannels.splice(index, 1);\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels: newChannels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot,\n\n                    selectedChannel: null\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private async deleteChatBot(chatBot: ChatBot): Promise<void> {\n        if (\n            !confirm(\n                this.props.intl.formatMessage(\n                    { id: \"view.instance.chat.delete.confirm\" },\n                    { botName: chatBot.name }\n                )\n            )\n        )\n            return;\n\n        this.setState({\n            loading: true\n        });\n\n        const response = await ChatBotClient.deleteChatBot(this.context.instance.id, chatBot.id);\n\n        if (response.code === StatusCode.OK) {\n            const newChatBots = [...this.state.chatBots];\n            const index = newChatBots.indexOf(chatBot);\n            newChatBots.splice(index, 1);\n\n            this.setState({\n                chatBots: newChatBots,\n                selectedChatBot: null\n            });\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.chat\" />;\n        }\n\n        const canRead = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Read);\n        const canCreate = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Create);\n\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                <h1>\n                    <FormattedMessage id=\"view.instance.chat\" />\n                </h1>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <div className=\"d-flex flex-row\">\n                    <div\n                        className=\"text-left\"\n                        style={{\n                            paddingRight: \"16px\",\n                            maxHeight: \"800px\",\n                            minWidth: \"300px\",\n                            overflowY: \"scroll\"\n                        }}>\n                        <ul className=\"browser-ul\">\n                            {canRead ? (\n                                this.state.chatBots.map(this.renderChatBotBrowser)\n                            ) : (\n                                <React.Fragment />\n                            )}\n                            {canCreate ? (\n                                <li className=\"browser-li\">\n                                    <OverlayTrigger\n                                        placement=\"top\"\n                                        show={\n                                            this.state.chatBots.length <\n                                            this.context.instance.chatBotLimit\n                                                ? false\n                                                : undefined\n                                        }\n                                        overlay={props => (\n                                            <Tooltip id=\"too-many-chat-bots\" {...props}>\n                                                <FormattedMessage\n                                                    id=\"view.instance.chat.limit\"\n                                                    values={{\n                                                        max: this.context.instance.chatBotLimit\n                                                    }}\n                                                />\n                                            </Tooltip>\n                                        )}>\n                                        <Button\n                                            className=\"nowrap\"\n                                            disabled={\n                                                this.state.chatBots.length >=\n                                                this.context.instance.chatBotLimit\n                                            }\n                                            onClick={() =>\n                                                this.setState({\n                                                    selectedChatBot: null,\n                                                    selectedChannel: null,\n                                                    selectedAddNode: !!(\n                                                        !this.state.selectedAddNode ||\n                                                        this.state.selectedChatBot\n                                                    )\n                                                })\n                                            }>\n                                            <FontAwesomeIcon icon={faPlus} />\n                                            &nbsp;\n                                            <FormattedMessage id=\"view.instance.chat.create\" />\n                                        </Button>\n                                    </OverlayTrigger>\n                                </li>\n                            ) : (\n                                <React.Fragment />\n                            )}\n                        </ul>\n                    </div>\n                    <div\n                        className=\"flex-fill flex-column text-center align-self-center\"\n                        style={{ padding: \"16px\" }}>\n                        {this.state.selectedChannel ? (\n                            this.renderAddEditChannel(false)\n                        ) : this.state.selectedChatBot && !this.state.selectedAddNode ? (\n                            this.renderAddEditChatBot(false)\n                        ) : this.state.selectedAddNode ? (\n                            this.state.selectedChatBot ? (\n                                this.renderAddEditChannel(true)\n                            ) : (\n                                this.renderAddEditChatBot(true)\n                            )\n                        ) : (\n                            <h4>\n                                <FormattedMessage id=\"view.instance.chat.select_item\" />\n                            </h4>\n                        )}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderChatBotBrowser(chatBot: ChatBotResponse): React.ReactNode {\n        const selected = this.state.selectedChatBot === chatBot;\n        const canWriteChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n        return (\n            <li key={chatBot.id} className=\"browser-li\">\n                <Button\n                    variant={selected ? \"secondary\" : \"primary\"}\n                    onClick={() =>\n                        this.setState(prevState => {\n                            return {\n                                selectedChatBot:\n                                    selected &&\n                                    !this.state.selectedChannel &&\n                                    !this.state.selectedAddNode\n                                        ? null\n                                        : chatBot,\n                                selectedChannel: null,\n                                selectedAddNode: false,\n                                addBotProvider: selected\n                                    ? prevState.addBotProvider\n                                    : chatBot.provider\n                            };\n                        })\n                    }\n                    className=\"nowrap\">\n                    <FontAwesomeIcon\n                        icon={chatBot.provider === ChatProvider.Discord ? faDiscord : faComment}\n                    />\n                    &nbsp;{chatBot.name}\n                </Button>\n                {canWriteChannels && selected ? (\n                    <ul className=\"browser-ul\">\n                        {chatBot.channels.map(channel => {\n                            const channelSelected = this.state.selectedChannel === channel;\n                            return (\n                                <li key={channel.channelData} className=\"browser-li\">\n                                    <Button\n                                        variant={channelSelected ? \"secondary\" : \"primary\"}\n                                        onClick={() =>\n                                            this.setState({\n                                                selectedChannel: channelSelected ? null : channel\n                                            })\n                                        }\n                                        className=\"nowrap\">\n                                        <FontAwesomeIcon icon={faHashtag} />\n                                        &nbsp;\n                                        {channel.tag ? `(${channel.tag})` : channel.channelData}\n                                    </Button>\n                                </li>\n                            );\n                        })}\n                        <li className=\"browser-li\">\n                            <OverlayTrigger\n                                placement=\"top\"\n                                show={\n                                    chatBot.channels.length < chatBot.channelLimit\n                                        ? false\n                                        : undefined\n                                }\n                                overlay={props => (\n                                    <Tooltip id=\"too-many-chat-channels\" {...props}>\n                                        <FormattedMessage\n                                            id=\"view.instance.chat.limit.channels\"\n                                            values={{ max: chatBot.channelLimit }}\n                                        />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    className=\"nowrap\"\n                                    disabled={chatBot.channels.length >= chatBot.channelLimit}\n                                    onClick={() =>\n                                        this.setState({\n                                            selectedChannel: null,\n                                            selectedAddNode: !!(\n                                                !this.state.selectedAddNode ||\n                                                this.state.selectedChannel\n                                            )\n                                        })\n                                    }>\n                                    <FontAwesomeIcon icon={faPlus} />\n                                    &nbsp;\n                                    <FormattedMessage id=\"view.instance.chat.create.channel\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </li>\n                    </ul>\n                ) : (\n                    <React.Fragment />\n                )}\n            </li>\n        );\n    }\n\n    private async exportChannelsToClipboard(): Promise<void> {\n        const channels = this.state.selectedChatBot!.channels;\n        const channelsJson = JSON.stringify(channels);\n        await navigator.clipboard.writeText(channelsJson);\n        this.setState({\n            flashExport: true\n        });\n\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        this.setState({\n            flashExport: false\n        });\n    }\n\n    private async importChannelsFromClipboard(): Promise<void> {\n        this.setState({\n            loading: true\n        });\n\n        let channelsJson;\n        if (navigator.clipboard.readText) {\n            channelsJson = await navigator.clipboard.readText();\n        } else {\n            channelsJson = prompt(\n                \"Your browser doesn't allow clipboard reading. Please paste your entry here.\"\n            ); // CBA to localize rn\n            if (!channelsJson) {\n                this.setState({\n                    loading: false\n                });\n                return;\n            }\n        }\n\n        let channels;\n        try {\n            channels = JSON.parse(channelsJson) as ChatChannel[];\n        } catch (jsError) {\n            const addon: allAddons =\n                jsError instanceof Error\n                    ? {\n                          jsError\n                      }\n                    : { void: true };\n            this.addError(new InternalError(ErrorCode.BAD_CHANNELS_JSON, addon));\n\n            this.setState({\n                loading: false\n            });\n            return;\n        }\n\n        let chatBot = this.state.selectedChatBot!;\n\n        const response = await ChatBotClient.updateChatBot(this.context.instance.id, {\n            channels,\n            id: chatBot.id\n        });\n\n        if (response.code === StatusCode.OK) {\n            if (response.payload) {\n                const chatBots = [...this.state.chatBots];\n                const index = chatBots.indexOf(chatBot);\n\n                chatBot = response.payload;\n                chatBot.loadedWithConnectionString = true;\n\n                chatBots[index] = chatBot;\n\n                this.setState({\n                    chatBots,\n                    selectedChatBot: chatBot\n                });\n            }\n        } else {\n            this.addError(response.error);\n        }\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    private renderAddEditChatBot(add: boolean): React.ReactNode {\n        const providerFieldCommon = {\n            type: FieldType.Enum as FieldType.Enum,\n            name: \"fields.instance.chat.provider\",\n            defaultValue: this.state.addBotProvider,\n            enum: ChatProvider,\n            noLocalize: true\n        };\n\n        const providerField = {\n            ...providerFieldCommon,\n            onChange: (newValue: ChatProvider) => {\n                this.setState({ addBotProvider: newValue });\n            }\n        };\n\n        const fieldsCommon = {\n            provider: { ...providerFieldCommon },\n            name: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.name\",\n                tooltip: \"fields.instance.chat.name.tip\"\n            },\n            enabled: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.enabled\",\n                tooltip: \"fields.instance.chat.enabled.tip\",\n                defaultValue: true\n            },\n            channelLimit: {\n                type: FieldType.Number as FieldType.Number,\n                name: \"fields.instance.chat.limit\",\n                tooltip: \"fields.instance.chat.limit.tip\",\n                min: 0,\n                max: 65535,\n                defaultValue: 10\n            },\n            reconnectionInterval: {\n                type: FieldType.Number as FieldType.Number,\n                name: \"fields.instance.chat.reconnect\",\n                tooltip: \"fields.instance.chat.reconnect.tip\",\n                min: 0,\n                defaultValue: 5\n            }\n        };\n\n        if (add) {\n            const fieldsDiscord = {\n                ...fieldsCommon,\n                botToken: {\n                    type: FieldType.Password as FieldType.Password,\n                    name: \"fields.instance.chat.create.discord.token\",\n                    tooltip: \"fields.instance.chat.create.discord.token.tip\"\n                },\n                dmOutputDisplayType: {\n                    type: FieldType.Enum as FieldType.Enum,\n                    name: \"fields.instance.chat.create.discord.output\",\n                    tooltip: \"fields.instance.chat.create.discord.output.tip\",\n                    defaultValue: DiscordDMOutputDisplayType.Always,\n                    enum: DiscordDMOutputDisplayType,\n                    noLocalize: true\n                },\n                deploymentBranding: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.discord.branding\",\n                    tooltip: \"fields.instance.chat.create.discord.branding.tip\",\n                    defaultValue: true\n                }\n            };\n\n            const fieldsIrc = {\n                ...fieldsCommon,\n                address: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.irc.address\",\n                    tooltip: \"fields.instance.chat.create.irc.address.tip\"\n                },\n                port: {\n                    type: FieldType.Number as FieldType.Number,\n                    name: \"fields.instance.chat.create.irc.port\",\n                    min: 1,\n                    max: 65535,\n                    defaultValue: 6697 // RFC7194\n                },\n                nickname: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.create.irc.nick\"\n                },\n                password: {\n                    type: FieldType.Password as FieldType.Password,\n                    name: \"fields.instance.chat.create.irc.pass\",\n                    tooltip: \"fields.instance.chat.create.irc.pass.tip\"\n                },\n                passwordType: {\n                    type: FieldType.Enum as FieldType.Enum,\n                    name: \"fields.instance.chat.create.irc.passtype\",\n                    defaultValue: IrcPasswordType.SASL,\n                    enum: IrcPasswordType,\n                    noLocalize: true\n                },\n                useSsl: {\n                    type: FieldType.Boolean as FieldType.Boolean,\n                    name: \"fields.instance.chat.create.irc.ssl\",\n                    tooltip: \"fields.instance.chat.create.irc.ssl.tip\"\n                }\n            };\n\n            (fieldsCommon.provider as InputFormField).disabled = true;\n\n            return (\n                <React.Fragment>\n                    <h5>\n                        <FormattedMessage id=\"view.instance.chat.create\" />\n                    </h5>\n                    <hr />\n                    <InputField {...providerField} />\n                    <hr />\n                    <InputForm\n                        key={`bot-create-form-${this.state.addBotProvider}`}\n                        hideDisabled\n                        includeAll\n                        saveMessageId=\"fields.instance.chat.create.save\"\n                        fields={\n                            this.state.addBotProvider === ChatProvider.Discord\n                                ? fieldsDiscord\n                                : fieldsIrc\n                        }\n                        onSave={(connectionBuilder: ChatBotConnectionBuilder) =>\n                            void this.addChatBot(connectionBuilder)\n                        }\n                    />\n                </React.Fragment>\n            );\n        }\n\n        const chatBot = this.state.selectedChatBot!;\n        const canReadConnectionString = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.ReadConnectionString\n        );\n        const canEditConnectionString = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteConnectionString\n        );\n\n        const fieldsEdit = {\n            ...fieldsCommon,\n            connectionString: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.edit.connection\",\n                tooltip: \"fields.instance.chat.edit.connection.tip\",\n                defaultValue: canReadConnectionString\n                    ? chatBot.loadedWithConnectionString\n                        ? chatBot.connectionString\n                        : this.props.intl.formatMessage({\n                              id: \"fields.instance.chat.edit.connection.unloaded\"\n                          })\n                    : this.props.intl.formatMessage({\n                          id: \"fields.instance.chat.edit.connection.deny\"\n                      }),\n                disabled: !canEditConnectionString\n            }\n        };\n\n        (fieldsEdit.name as InputFormField).defaultValue = chatBot.name;\n        (fieldsEdit.enabled as InputFormField).defaultValue = chatBot.enabled;\n        (fieldsEdit.channelLimit as InputFormField).defaultValue = chatBot.channelLimit;\n        (fieldsEdit.reconnectionInterval as InputFormField).defaultValue =\n            chatBot.reconnectionInterval;\n\n        (fieldsEdit.name as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteName\n        );\n        (fieldsEdit.enabled as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteEnabled\n        );\n        (fieldsEdit.channelLimit as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannelLimit\n        );\n        (fieldsEdit.reconnectionInterval as InputFormField).disabled = !hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteReconnectionInterval\n        );\n\n        const canDelete = hasChatBotRight(this.context.instancePermissionSet, ChatBotRights.Delete);\n\n        const canEditChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n\n        return (\n            <React.Fragment>\n                <h5>\n                    <FontAwesomeIcon\n                        icon={chatBot.provider === ChatProvider.Discord ? faDiscord : faComment}\n                    />\n                    &nbsp;{chatBot.name}\n                </h5>\n                <hr />\n                {!chatBot.loadedWithConnectionString ? (\n                    <React.Fragment>\n                        <OverlayTrigger\n                            placement=\"top\"\n                            show={canReadConnectionString ? false : undefined}\n                            overlay={props => (\n                                <Tooltip id=\"chat-bot-read-conn-perm\" {...props}>\n                                    <FormattedMessage id=\"view.instance.chat.reload.deny\" />\n                                </Tooltip>\n                            )}>\n                            <Button\n                                className=\"nowrap\"\n                                disabled={!canReadConnectionString}\n                                onClick={() => void this.reloadChatBot(chatBot)}>\n                                <FormattedMessage id=\"view.instance.chat.reload\" />\n                            </Button>\n                        </OverlayTrigger>\n                        <br />\n                        <br />\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n                <InputForm\n                    fields={fieldsEdit}\n                    onSave={(chatBotUpdate: ChatBotUpdate) => void this.editChatBot(chatBotUpdate)}\n                />\n                <hr />\n                <div className=\"text-center mb-3\">\n                    <OverlayTrigger\n                        placement=\"top\"\n                        show={canDelete ? false : undefined}\n                        overlay={props => (\n                            <Tooltip id=\"chat-bot-delete-perm\" {...props}>\n                                <FormattedMessage id=\"view.instance.chat.delete.deny\" />\n                            </Tooltip>\n                        )}>\n                        <Button\n                            className=\"nowrap mx-2\"\n                            disabled={!canDelete}\n                            variant=\"danger\"\n                            onClick={() => void this.deleteChatBot(chatBot)}>\n                            <FontAwesomeIcon icon={faTrash} />\n                            &nbsp;\n                            <FormattedMessage id=\"view.instance.chat.delete\" />\n                        </Button>\n                    </OverlayTrigger>\n                    {navigator.clipboard ? (\n                        <React.Fragment>\n                            <Button\n                                className=\"nowrap mx-2\"\n                                variant={this.state.flashExport ? \"success\" : \"secondary\"}\n                                onClick={() => void this.exportChannelsToClipboard()}>\n                                {this.state.flashExport ? (\n                                    <FontAwesomeIcon icon={faCheck} />\n                                ) : (\n                                    <React.Fragment>\n                                        <FontAwesomeIcon icon={faClipboard} />\n                                        <FontAwesomeIcon icon={faArrowLeft} />\n                                    </React.Fragment>\n                                )}\n                                &nbsp;\n                                <FormattedMessage id=\"view.instance.chat.channels.export\" />\n                            </Button>\n                            <OverlayTrigger\n                                placement=\"top\"\n                                show={canEditChannels ? false : undefined}\n                                overlay={props => (\n                                    <Tooltip id=\"chat-bot-edit-channels-perm\" {...props}>\n                                        <FormattedMessage id=\"view.instance.chat.channels.deny\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    className=\"nowrap mx-2\"\n                                    disabled={!canEditChannels}\n                                    variant=\"primary\"\n                                    onClick={() => void this.importChannelsFromClipboard()}>\n                                    <FontAwesomeIcon icon={faClipboard} />\n                                    <FontAwesomeIcon icon={faArrowRight} />\n                                    &nbsp;\n                                    <FormattedMessage id=\"view.instance.chat.channels.import\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </React.Fragment>\n                    ) : null}\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private renderAddEditChannel(add: boolean): React.ReactNode {\n        const chatBot = this.state.selectedChatBot!;\n\n        const fieldsCommon = {\n            tag: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.chat.channel.tag\",\n                tooltip: \"fields.instance.chat.channel.tag.tip\"\n            },\n            isAdminChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.admin\",\n                tooltip: \"fields.instance.chat.channel.admin.tip\"\n            },\n            isWatchdogChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.watchdog\",\n                tooltip: \"fields.instance.chat.channel.watchdog.tip\"\n            },\n            isUpdatesChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.updates\",\n                tooltip: \"fields.instance.chat.channel.updates.tip\"\n            },\n            isSystemChannel: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.chat.channel.system\",\n                tooltip: \"fields.instance.chat.channel.system.tip\"\n            }\n        };\n\n        const canEditChannels = hasChatBotRight(\n            this.context.instancePermissionSet,\n            ChatBotRights.WriteChannels\n        );\n\n        if (add) {\n            const fieldsDiscord = {\n                // we remap this to discord later because of uint64 memes\n                channelData: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.channel.discord\",\n                    tooltip: \"fields.instance.chat.channel.discord.tip\"\n                },\n                ...fieldsCommon\n            };\n            const fieldsIrc = {\n                channelData: {\n                    type: FieldType.String as FieldType.String,\n                    name: \"fields.instance.chat.channel.irc\",\n                    tooltip: \"fields.instance.chat.channel.irc.tip\",\n                    defaultValue: \"#\"\n                },\n                ...fieldsCommon\n            };\n\n            return (\n                <React.Fragment>\n                    <h5>\n                        <FormattedMessage id=\"view.instance.chat.create.channel\" />\n                    </h5>\n                    <hr />\n                    <InputForm\n                        key={`bot-channel-create-form-${chatBot.provider}`}\n                        includeAll\n                        saveMessageId=\"fields.instance.chat.create.channel\"\n                        fields={\n                            chatBot.provider === ChatProvider.Discord ? fieldsDiscord : fieldsIrc\n                        }\n                        onSave={(chatChannel: ChatChannel) =>\n                            void this.addChatChannel(chatBot, chatChannel)\n                        }\n                    />\n                </React.Fragment>\n            );\n        }\n\n        const channel = this.state.selectedChannel!;\n\n        (fieldsCommon.isAdminChannel as InputFormField).defaultValue = channel.isAdminChannel;\n        (fieldsCommon.isUpdatesChannel as InputFormField).defaultValue = channel.isUpdatesChannel;\n        (fieldsCommon.isWatchdogChannel as InputFormField).defaultValue = channel.isWatchdogChannel;\n        (fieldsCommon.isSystemChannel as InputFormField).defaultValue = channel.isSystemChannel;\n        (fieldsCommon.tag as InputFormField).defaultValue = channel.tag;\n\n        return (\n            <React.Fragment key={chatBot.channels.indexOf(channel)}>\n                <h5>\n                    {channel.channelData}\n                    {channel.tag ? ` (${channel.tag})` : \"\"}\n                </h5>\n                <hr />\n                <InputForm\n                    fields={fieldsCommon}\n                    onSave={chatChannelStub => {\n                        const chatChannel = {\n                            channelData: this.state.selectedChannel!.channelData,\n                            ...chatChannelStub\n                        };\n                        void this.editChatChannel(chatBot, chatChannel);\n                    }}\n                />\n                <hr />\n                <OverlayTrigger\n                    placement=\"top\"\n                    show={canEditChannels ? false : undefined}\n                    overlay={props => (\n                        <Tooltip id=\"chat-bot-delete-perm\" {...props}>\n                            <FormattedMessage id=\"view.instance.chat.delete.channel.deny\" />\n                        </Tooltip>\n                    )}>\n                    <Button\n                        className=\"nowrap\"\n                        disabled={!canEditChannels}\n                        variant=\"danger\"\n                        onClick={() => void this.deleteChatChannel(chatBot, channel)}>\n                        <FormattedMessage id=\"view.instance.chat.delete.channel\" />\n                    </Button>\n                </OverlayTrigger>\n            </React.Fragment>\n        );\n    }\n}\n\nChatBots.contextType = InstanceEditContext;\nexport default injectIntl(ChatBots);\n"],"names":["DiscordDMOutputDisplayType","IrcPasswordType","ChatBots","React","constructor","props","super","this","state","loading","errors","chatBots","selectedAddNode","selectedChatBot","selectedChannel","addBotProvider","ChatProvider","Discord","flashExport","renderChatBotBrowser","bind","componentDidMount","hasChatBotRight","context","instancePermissionSet","ChatBotRights","Read","refresh","setState","addError","error","prevState","Array","from","push","maxPages","page","response","ChatBotClient","listChatBots","instance","id","code","StatusCode","OK","payload","totalPages","concat","content","forEach","chatBot","loadedWithConnectionString","addChatBot","connectionBuilder","connectionString","discordBuilder","ircBuilder","name","alert","intl","formatMessage","provider","botToken","dmOutputDisplay","deploymentBranding","Irc","address","nickname","port","useSsl","password","passwordType","Error","createChatBot","enabled","channelLimit","reconnectionInterval","newChatBot","newChatBots","reloadChatBot","getChatBot","index","indexOf","editChatBot","chatBotUpdate","updateChatBot","addChatChannel","chatChannel","channelData","RegExp","test","newChannels","channels","length","editChatChannel","channelToEdit","Object","assign","deleteChatChannel","confirm","channelName","tag","splice","deleteChatBot","botName","render","Loading","text","canRead","canCreate","Create","className","DebugJsonViewer","obj","FormattedMessage","map","err","ErrorAlert","key","onClose","prev","newarr","undefined","style","paddingRight","maxHeight","minWidth","overflowY","OverlayTrigger","placement","show","chatBotLimit","overlay","Tooltip","_extends","values","max","Button","disabled","onClick","FontAwesomeIcon","icon","faPlus","padding","renderAddEditChannel","renderAddEditChatBot","selected","canWriteChannels","WriteChannels","variant","faDiscord","faComment","channel","channelSelected","faHashtag","exportChannelsToClipboard","channelsJson","JSON","stringify","navigator","clipboard","writeText","Promise","resolve","setTimeout","importChannelsFromClipboard","readText","prompt","parse","jsError","addon","void","InternalError","ErrorCode","BAD_CHANNELS_JSON","add","providerFieldCommon","type","FieldType","Enum","defaultValue","enum","noLocalize","providerField","onChange","newValue","fieldsCommon","String","tooltip","Boolean","Number","min","fieldsDiscord","Password","dmOutputDisplayType","Always","fieldsIrc","SASL","InputField","InputForm","hideDisabled","includeAll","saveMessageId","fields","onSave","canReadConnectionString","ReadConnectionString","canEditConnectionString","WriteConnectionString","fieldsEdit","WriteName","WriteEnabled","WriteChannelLimit","WriteReconnectionInterval","canDelete","Delete","canEditChannels","faTrash","faCheck","faClipboard","faArrowLeft","faArrowRight","isAdminChannel","isWatchdogChannel","isUpdatesChannel","isSystemChannel","chatChannelStub","contextType","InstanceEditContext","injectIntl"],"sourceRoot":""}