{"version":3,"file":"2153.127573880e3e5661e918.bundle.js","mappings":"kiBAeO,IAAKA,EAAS,SAATA,GAAS,OAATA,EAAS,kBAATA,EAAS,gBAATA,EAAS,gBAATA,EAAS,oBAATA,EAAS,oBAATA,EAAS,YAATA,CAAS,MA+DrB,MAAMC,EAAgBC,EAAAA,YAClB,SAAuBC,EAAOC,GAC1B,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOH,OACvCI,SAAUR,EAAMQ,SAChBP,IAAKA,GAGjB,IAGEQ,EAAkBV,EAAAA,YACpB,SAAuBC,GACnB,OACID,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTO,GAAG,WACHN,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOH,OACvCI,SAAUR,EAAMQ,UAG5B,IAGEG,EAAkBZ,EAAAA,YACpB,SAAyBC,EAAOC,GAC5B,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOH,OACvCI,SAAUR,EAAMQ,SAChBI,KAAK,WACLX,IAAKA,GAGjB,IAGEY,EAAiBd,EAAAA,YACnB,SAAwBC,EAAOC,GAC3B,MAAMa,EAAQC,KAAKC,SAASC,WAC5B,OACIlB,EAAAA,cAAA,SACImB,QAASJ,EACTK,UAAU,sEACVpB,EAAAA,cAACG,EAAAA,EAAKkB,MAAK,CACPC,GAAIP,EACJQ,QAAStB,EAAMI,MACfC,SAAUC,GAAKN,EAAMK,SAASC,EAAEC,OAAOe,SACvCV,KAAK,SACLO,UAAU,SACVX,SAAUR,EAAMQ,SAChBP,IAAKA,IAIrB,IAOEsB,EAAgBxB,EAAAA,YAClB,SAAuBC,EAAOC,GAC1B,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAWC,GACPN,EAAMK,SACFmB,MAAMlB,EAAEC,OAAOkB,eAAiBnB,EAAEC,OAAOH,MAAQE,EAAEC,OAAOkB,eAGlEjB,SAAUR,EAAMQ,SAChBkB,IAAK1B,EAAM0B,IACXC,IAAK3B,EAAM2B,IACXf,KAAK,SACLX,IAAKA,GAGjB,IAOE2B,EAAc7B,EAAAA,YAChB,SAAqBC,EAAOC,GACxB,OACIF,EAAAA,cAACG,EAAAA,EAAKC,QAAO,CACTC,MAAOJ,EAAMI,MACbC,SAAUC,GAAKN,EAAMK,SAASwB,SAASvB,EAAEC,OAAOH,QAChDI,SAAUR,EAAMQ,SAChBE,GAAG,SACHoB,QAAM,EACN7B,IAAKA,GACJ8B,OAAOC,QAAQhC,EAAMiC,MAEjBC,QAAO,EAAEC,KAASX,MAAMK,SAASM,MACjCC,KAAI,EAAED,EAAK/B,KACDJ,EAAMqC,WACTtC,EAAAA,cAAA,UAAQoC,IAAK/B,EAAOA,MAAOA,GACtB+B,GAGLpC,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAI,GAAGrB,EAAMuC,QAAQJ,IAAOA,IAAKA,IAC9CK,GACGzC,EAAAA,cAAA,UAAQoC,IAAK/B,EAAOA,MAAOA,GACtBoC,OAQrC,IAGSC,EAAoD,CAC7D,CAAC5C,EAAU6C,MAAO,EAClB,CAAC7C,EAAU8C,QAAS,EACpB,CAAC9C,EAAU+C,UAAU,EACrB,CAAC/C,EAAUgD,QAAS,GACpB,CAAChD,EAAUiD,UAAW,GACtB,CAACjD,EAAUkD,UAAW,IAGX,SAASC,EAAWhD,GAC/B,MAAOiD,EAAcC,IAAmBC,EAAAA,EAAAA,UACpCnD,EAAMoD,cAAgBX,EAAczC,EAAMY,OAExCyC,GAAaC,EAAAA,EAAAA,QAAyB,OAC5CC,EAAAA,EAAAA,YAAU,KACNL,EAAgBlD,EAAMoD,cAAgBX,EAAczC,EAAMY,MAAM,GAEjE,CAACZ,EAAMoD,gBAEVG,EAAAA,EAAAA,YAAU,KASN,OARIF,EAAWG,UACPH,EAAWG,QAAQC,gBACnBJ,EAAWG,QAAQE,UAAUC,OAAO,cAEpCN,EAAWG,QAAQE,UAAUE,IAAI,eAIjC5D,EAAMY,MACV,KAAKf,EAAU+C,QAMf,KAAK/C,EAAU6C,KACf,KAAK7C,EAAU8C,OAGf,KAAK9C,EAAUgD,OACf,KAAKhD,EAAUiD,SACf,KAAKjD,EAAUkD,SAEX,YADA/C,EAAMK,SAAS4C,EAAwBI,EAAWG,SAASC,kBAAmB,GAEtF,GAED,CAACR,IAEJ,MAUMY,EAIF,CACAC,OAAQhE,EACRiE,SAAUpD,EACVqD,QAASnD,EACToD,SAAUxD,EACV,CAACZ,EAAU8C,aAASuB,EACpB,CAACrE,EAAU6C,WAAOwB,GAGhBC,EACFlB,IAAiBjD,EAAMoD,cAAgBX,EAAczC,EAAMY,QAAUZ,EAAMoE,aAE/E,OACIrE,EAAAA,cAACsE,EAAAA,EAAU,KACPtE,EAAAA,cAACuE,EAAAA,EAAc,CACXC,SA7BKC,EA6BYxE,EAAMyE,QA5B1BD,EAGDzE,EAAAA,cAAC2E,EAAAA,EAAO,CAACrD,GAAImD,GACTzE,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAImD,KAJTzE,EAAAA,cAACA,EAAAA,SAAc,OA6B5B4E,OAAM3E,EAAMyE,cAAUP,IACrB,EAAGjE,SAAQ2E,KACR7E,EAAAA,cAACsE,EAAAA,EAAWQ,QAAO,CAAC1D,UAAU,gBAC1BpB,EAAAA,cAACsE,EAAAA,EAAWS,KAAIC,EAAA,CAAC5D,UAAU,eAAkByD,GACzC7E,EAAAA,cAAA,QAAMoB,UAAWgD,EAAU,mBAAqB,IAC5CpE,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAIrB,EAAMuC,QAEhCxC,EAAAA,cAAA,OAAKoB,UAAU,WACVnB,EAAMQ,WAAaR,EAAMgF,aACtBjF,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAG,qBACrB,KACJtB,EAAAA,cAAA,OACIE,IAAKA,EACLkB,UAAU,sBACV8D,MAAO,CAAEC,WAAYlF,EAAMyE,QAAU,QAAU,WAC/C1E,EAAAA,cAACoF,EAAAA,EAAe,CAACC,KAAMC,EAAAA,YAO9CrF,EAAMY,OAASf,EAAU8C,OACtB5C,EAAAA,cAACwB,EAAa,CACVnB,MAAO6C,EACP5C,SAAUiF,GAAYpC,EAAgBoC,GACtC/C,KAAMvC,EAAMuC,KACZ/B,SAAUR,EAAMQ,SAChBmB,IAAK3B,EAAM2B,IACXD,IAAK1B,EAAM0B,IACXzB,IAAKoD,IAETrD,EAAMY,OAASf,EAAU6C,KACzB3C,EAAAA,cAAC6B,EAAW,CACRxB,MAAO6C,EACP5C,SAAUiF,GAAYpC,EAAgBoC,GACtC/C,KAAMvC,EAAMuC,KACZN,KAAMjC,EAAMiC,KACZI,WAAYrC,EAAMqC,WAClB7B,SAAUR,EAAMQ,WAGpBT,EAAAA,cACI8D,EAAc7D,EAAMY,MACpB,CACIR,MAAO6C,EACP5C,SAAUiF,GAAYpC,EAAgBoC,GACtC9E,SAAUR,EAAMQ,SAChB+B,KAAMvC,EAAMY,KACZX,IAAKoD,IAIbc,IAAWnE,EAAMQ,UAAaR,EAAMuF,iBACpCxF,EAAAA,cAACsE,EAAAA,EAAWmB,OAAM,KACVrB,IAAWnE,EAAMQ,SACjBT,EAAAA,cAAC0F,EAAAA,EAAM,CACHC,QAAQ,SACRC,QAASA,IACLzC,EAAgBlD,EAAMoD,cAAgBX,EAAczC,EAAMY,QAE9Db,EAAAA,cAACoF,EAAAA,EAAe,CAACC,KAAK,UAE1B,KACHpF,EAAMuF,kBAEX,MAhGKf,KAmGrB,C,+UCzSe,SAASoB,EACpB5F,GAEA,MAAM6F,EAAmB,IAAIC,IAIvBC,EAAgB,IAAID,KACnBE,EAAaC,IAAkB9C,EAAAA,EAAAA,UAAiD,CAAC,IAExFI,EAAAA,EAAAA,YAAU,KACNxB,OAAOmE,KAAKlG,EAAMmG,QAAQC,SAAQ/E,IAC9B4E,GAAeI,IAAa,IACrBA,EACH,CAAChF,GAAK,CAAC,KACR,GACL,GAGH,IAEH,IAAK,MAAOA,EAAIiF,KAAUvE,OAAOC,QAAQhC,EAAMmG,QAC3CJ,EAAcQ,IAAIlF,EAAIiF,GACtBT,EAAiBU,IACbD,GAGAnD,EAAAA,EAAAA,UAA0BmD,EAAMlD,cAAgBX,EAAAA,GAAc6D,EAAM1F,QAI5E,IAAI4F,EAAUxG,EAAMyG,gBAChBC,GAAa,EACjB,IAAK,MAAOrF,EAAIsF,KAAoBZ,EAAe,CAC/C,MAAOa,GAAcf,EAAiBgB,IAAIF,GACpCG,EAAad,EAAY3E,GAK/B,IAJKsF,EAAgBvD,cAAgBX,EAAAA,GAAckE,EAAgB/F,QAAUgG,IACzEJ,GAAU,GACVM,GAAYC,UAASL,GAAa,GAElCF,GAAWE,EAAY,KAC/B,CAuBA,OAAI1G,EAAMgH,eACDjF,OAAOkF,OAAOjH,EAAMmG,QAAQe,MAAKZ,IAAUA,EAAM9F,WAC3CT,EAAAA,cAAAA,EAAAA,SAAA,MAKXA,EAAAA,cAAA,WACKgC,OAAOC,QAAQhC,EAAMmG,QAAQ/D,KAAI,EAAEf,EAAIiF,MACpC,MAAM,SAAE9F,KAAa2G,GAAeb,EACpC,OAAItG,EAAMgH,cAAgBxG,EAAiB,KAGvCT,EAAAA,cAACiD,EAAAA,GAAU+B,EAAA,CACP5C,IAAKd,GACD8F,EAAU,CACd3G,SAAUR,EAAMoH,UAAY5G,EAC5BH,SAAUA,CAACgH,EAAyBC,KAChCzB,EAAiBgB,IAAIP,GAAQ,GAAGe,GAChCpB,GAAeI,IAAa,IACrBA,EACH,CAAChF,GAAK,IACCgF,EAAUhF,GACb0F,SAAUO,MAEf,IAET,IAGVvH,EAAAA,cAAA,OAAKoB,UAAU,oBACXpB,EAAAA,cAACuE,EAAAA,EAAc,CACXC,QACIxE,EAAAA,cAAC2E,EAAAA,EAAO,CAACrD,GAAI,gBACTtB,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAG,0BAG7BsD,OAAM+B,QAAaxC,GACnBnE,EAAAA,cAAC0F,EAAAA,EAAM,CACHC,QAAS1F,EAAMoH,UAAYV,EAAa,SAAW,UACnDlG,SAAUR,EAAMoH,WAAaZ,GAAWE,EACxCf,QA9DP4B,KACT,MAAMC,EAAgD,CAAC,EAEvD,IAAK,MAAOnG,EAAIsF,KAAoBZ,EAAe,CAC/C,MAAOa,GAAcf,EAAiBgB,IAAIF,IAGrCA,EAAgBc,eACjBb,IACKD,EAAgBvD,cAAgBX,EAAAA,GAAckE,EAAgB/F,QAClEZ,EAAM0H,cAIXF,EAAanG,GAAMuF,EACvB,CAEA5G,EAAM2H,OAAOH,EAAa,GA8CVzH,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAIrB,EAAM4H,eAAiB,oBAMrE,C,kGC7Je,SAASC,EAAW7H,GAC/B,OACID,EAAAA,cAAC+H,IAAS,CACNC,IAAK/H,EAAMgI,IACXzF,KAAM,OACN0F,MAAM,OACNC,UAAU,WACVC,WAAS,EACTC,kBAAkB,GAG9B,CAEO,SAASC,EAAgBrI,GAC5B,OAAKsI,EAAAA,GAAcC,SAASnI,MAIxBL,EAAAA,cAAA,OAAKoB,UAAU,aACXpB,EAAAA,cAAC8H,EAAU,CAACG,IAAKhI,EAAMgI,OAJpBjI,EAAAA,cAAAA,EAAAA,SAAA,KAOf,C,6KCGA,MAAMyI,UAAyBzI,EAAAA,UAGpB0I,WAAAA,CAAYzI,GACf0I,MAAM1I,GAEN2I,KAAKC,aAAeD,KAAKC,aAAaC,KAAKF,MAE3CA,KAAKG,MAAQ,CACTC,OAAQ,GACRC,QAAQ,EAEhB,CAEQC,QAAAA,CAASC,GACbP,KAAKQ,UAAS9C,IACV,MAAM0C,EAASK,MAAMC,KAAKhD,EAAU0C,QAEpC,OADAA,EAAOO,KAAKJ,GACL,CACHH,SACH,GAET,CAEA,kBAAcH,CAAaW,GACvB,GAAMA,EAASC,gBAAoBD,EAASE,mBAExC,YADAC,MAAM,kDAIV,MAAMC,EAAahB,KAAKiB,QAAQL,SAASlI,GACzC,IAAIwI,EACAN,EAASO,MAAQP,EAASO,MAAQnB,KAAKiB,QAAQL,SAASO,OACxDD,EAAUN,EAASO,KACnBP,EAASO,KAAO,KAChBP,EAASQ,QAAS,EAClBpB,KAAKQ,SAAS,CAAEH,QAAQ,KAG5B,MAAMgB,QAAiBC,EAAAA,EAAerB,aAAa,IAC5CW,EACHlI,GAAIsI,IAER,GAAIK,EAASE,OAASC,EAAAA,EAAWC,GAG7B,OAFAzB,KAAKM,SAASe,EAASd,YACvBP,KAAKQ,SAAS,CAAEH,QAAQ,IAI5B,GAAIa,EAAS,CAET,MAAMQ,QAAkBJ,EAAAA,EAAerB,aAAa,CAChDvH,GAAIsH,KAAKiB,QAAQL,SAASlI,GAC1ByI,KAAMD,IAGV,GAAIQ,EAAUH,OAASC,EAAAA,EAAWC,GAI9B,OAHAzB,KAAKM,SAASoB,EAAUnB,OACxBP,KAAKQ,SAAS,CAAEH,QAAQ,eAClBL,KAAKiB,QAAQU,iBAKvB,IAAIC,EACJ,GAII,SAHM,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,OACjDF,QAAkBN,EAAAA,EAAeU,YAAYhB,GAEzCY,EAAUL,OAASC,EAAAA,EAAWC,GAI9B,OAHAzB,KAAKM,SAASsB,EAAUrB,OACxBP,KAAKQ,SAAS,CAAEH,QAAQ,eAClBL,KAAKiB,QAAQU,uBAGlBC,EAAUK,QAAQC,SAE3B,MAAMC,QAAkBb,EAAAA,EAAerB,aAAa,CAChDmB,QAAQ,EACR1I,GAAIsI,IAEJmB,EAAUZ,OAASC,EAAAA,EAAWC,IAC9BzB,KAAKM,SAAS6B,EAAU5B,OACxBP,KAAKQ,SAAS,CAAEH,QAAQ,KAExB+B,EAAAA,QAAeC,YAAYX,EAAUO,QAAQC,QAAUlB,EAE/D,OAEMhB,KAAKiB,QAAQU,gBACvB,CAEOW,MAAAA,GACH,MAAMC,EAAeC,IACVC,EAAAA,EAAAA,KAAwBC,EAAAA,EAAAA,GAAqB1C,KAAKiB,QAAQ0B,MAAOH,GAGtEhF,EAAS,CACX5D,KAAM,CACFA,KAAM,uBACN3B,KAAMf,EAAAA,GAAUgD,OAChBO,aAAcuF,KAAKiB,QAAQL,SAAShH,KACpC/B,UAAW0K,EAAYK,EAAAA,GAAsBC,SAEjD1B,KAAM,CACFvH,KAAM,uBACN3B,KAAMf,EAAAA,GAAUgD,OAChBO,aAAcuF,KAAKiB,QAAQL,SAASO,KACpCtJ,UAAW0K,EAAYK,EAAAA,GAAsBE,WAEjDC,aAAc,CACVnJ,KAAM,+BACN3B,KAAMf,EAAAA,GAAU8C,OAChBjB,IAAK,EACL0B,aAAcuF,KAAKiB,QAAQL,SAASmC,aACpClL,UAAW0K,EAAYK,EAAAA,GAAsBI,kBAEjDnC,eAAgB,CACZjH,KAAM,uBACN3B,KAAMf,EAAAA,GAAUgD,OAChBO,aAAcuF,KAAKiB,QAAQL,SAASC,eACpChJ,UAAW0K,EAAYK,EAAAA,GAAsBK,gBAEjDnC,mBAAoB,CAChBlH,KAAM,6BACN3B,KAAMf,EAAAA,GAAU8C,OAChBjB,IAAK,EACL0B,aAAcuF,KAAKiB,QAAQL,SAASE,mBACpCjJ,UAAW0K,EAAYK,EAAAA,GAAsBK,gBAEjDC,kBAAmB,CACftJ,KAAM,2BACN3B,KAAMf,EAAAA,GAAU6C,KAChBT,KAAM6J,EAAAA,GACN1I,aAAcuF,KAAKiB,QAAQL,SAASsC,kBACpCrL,UAAW0K,EAAYK,EAAAA,GAAsBQ,oBAIrD,OACIhM,EAAAA,cAAA,OAAKoB,UAAU,eACXpB,EAAAA,cAAA,UACIA,EAAAA,cAACuC,EAAAA,EAAgB,CAACjB,GAAG,wBAEzBtB,EAAAA,cAACsI,EAAAA,EAAe,CAACL,IAAKW,KAAKiB,UAC1BjB,KAAKG,MAAMC,OAAO3G,KAAI,CAAC4J,EAAKC,KACzB,GAAKD,EACL,OACIjM,EAAAA,cAACmM,EAAAA,GAAU,CACP/J,IAAK8J,EACL/C,MAAO8C,EACPG,QAASA,IACLxD,KAAKQ,UAASiD,IACV,MAAMC,EAASjD,MAAMC,KAAK+C,EAAKrD,QAE/B,OADAsD,EAAOJ,QAAS/H,EACT,CACH6E,OAAQsD,EACX,KAGX,IAIT1D,KAAKG,MAAME,OACRjJ,EAAAA,cAACuM,EAAAA,QAAO,CAACC,KAAK,0BAEdxM,EAAAA,cAAC6F,EAAAA,EAAS,CAACO,OAAQA,EAAQwB,OAAQgB,KAAKC,eAIxD,EAEJJ,EAAiBgE,YAAcC,EAAAA,EAC/B,WAAeC,EAAAA,EAAAA,GAAWlE,E,uDC7KnB,MAAMiE,E,QAAsB1M,mBAC/BmE,E,gGC9BAyI,EAAY,CAAC,WAAY,OAAQ,gBAAiB,YAAa,MAK/DC,GAAmB,OAAmB,sBACtCC,GAAoB,OAAmB,uBACvCC,GAAiB,OAAmB,mBAAoB,CAC1DC,UAAW,SAuBT1I,EAA0B,cAAiB,SAAU2I,EAAM/M,GAC7D,IAAIgN,EAAWD,EAAKC,SAChBC,EAAOF,EAAKE,KACZC,EAAgBH,EAAKG,cACrBhM,EAAY6L,EAAK7L,UACjBiM,EAAUJ,EAAKtM,GACfqM,OAAwB,IAAZK,EAAqB,MAAQA,EACzCpN,GAAQ,OAA8BgN,EAAML,GAGhD,OADAM,GAAW,QAAmBA,EAAU,eACpB,gBAAoBF,GAAW,OAAS,CAC1D9M,IAAKA,GACJD,EAAO,CACRmB,UAAW,IAAWA,EAAW8L,EAAUC,GAAQD,EAAW,IAAMC,EAAMC,GAAiB,oBAE/F,IACA9I,EAAWgJ,YAAc,aACzBhJ,EAAWS,KAAOgI,EAClBzI,EAAWiJ,MAhCW,SAAyBtN,GAC7C,OAAoB,gBAAoB8M,EAAgB,KAAmB,gBAAoB,SAAS,OAAS,CAC/GlM,KAAM,SACLZ,IACL,EA6BAqE,EAAWkJ,SAvCc,SAA4BvN,GACnD,OAAoB,gBAAoB8M,EAAgB,KAAmB,gBAAoB,SAAS,OAAS,CAC/GlM,KAAM,YACLZ,IACL,EAoCAqE,EAAWmB,OAASoH,EACpBvI,EAAWQ,QAAUgI,EACrB,K","sources":["webpack://tgstation-server-control-panel/./src/components/utils/InputField.tsx","webpack://tgstation-server-control-panel/./src/components/utils/InputForm.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JsonViewer.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Config.tsx","webpack://tgstation-server-control-panel/./src/contexts/InstanceEditContext.ts","webpack://tgstation-server-control-panel/./node_modules/react-bootstrap/esm/InputGroup.js"],"sourcesContent":["import { faInfo } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nexport type AnyEnum = {\n    [key: string]: string | number;\n    [index: number]: string;\n};\n\nexport enum FieldType {\n    Boolean = \"boolean\",\n    Number = \"number\",\n    String = \"string\",\n    TextArea = \"textarea\",\n    Password = \"password\",\n    Enum = \"enum\"\n}\n\nexport type InputFieldTypes = number | string | boolean;\n\nexport type InputFieldProps = {\n    name: string;\n    disabled?: boolean;\n    tooltip?: string;\n    type: FieldType;\n    hideReadOnly?: boolean;\n    additionalAppend?: React.ReactNode;\n    forceChanged?: boolean;\n} & (\n    | {\n          defaultValue?: boolean | null;\n          onChange: (newValue: boolean, isValid: boolean) => unknown;\n          type: FieldType.Boolean;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Number;\n          min?: number;\n          max?: number;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.String;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.TextArea;\n      }\n    | {\n          defaultValue?: string | null;\n          onChange: (newValue: string, isValid: boolean) => unknown;\n          type: FieldType.Password;\n      }\n    | {\n          defaultValue?: number | null;\n          onChange: (newValue: number, isValid: boolean) => unknown;\n          type: FieldType.Enum;\n          noLocalize?: boolean;\n          enum: AnyEnum;\n      }\n);\n\ninterface ControlProps {\n    value: InputFieldTypes;\n    onChange: (newvalue: InputFieldTypes) => unknown;\n    disabled?: boolean;\n    name: string;\n}\n\nconst StringControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function StringControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n                ref={ref}\n            />\n        );\n    }\n);\n\nconst TextAreaControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function StringControl(props): JSX.Element {\n        return (\n            <Form.Control\n                as=\"textarea\"\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n            />\n        );\n    }\n);\n\nconst PasswordControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function PasswordControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(e.target.value)}\n                disabled={props.disabled}\n                type=\"password\"\n                ref={ref}\n            />\n        );\n    }\n);\n\nconst BooleanControl = React.forwardRef<HTMLInputElement, ControlProps>(\n    function BooleanControl(props, ref): JSX.Element {\n        const rndId = Math.random().toString();\n        return (\n            <label\n                htmlFor={rndId}\n                className=\"d-flex m-0 flex-grow-1 justify-content-center align-content-center\">\n                <Form.Check\n                    id={rndId}\n                    checked={props.value as boolean}\n                    onChange={e => props.onChange(e.target.checked)}\n                    type=\"switch\"\n                    className=\"m-auto\"\n                    disabled={props.disabled}\n                    ref={ref}\n                />\n            </label>\n        );\n    }\n);\n\ntype NumberControlProps = ControlProps & {\n    min?: number;\n    max?: number;\n};\nconst NumberControl = React.forwardRef<HTMLInputElement, NumberControlProps>(\n    function NumberControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as number}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                    props.onChange(\n                        isNaN(e.target.valueAsNumber) ? e.target.value : e.target.valueAsNumber\n                    )\n                }\n                disabled={props.disabled}\n                min={props.min}\n                max={props.max}\n                type=\"number\"\n                ref={ref}\n            />\n        );\n    }\n);\n\ntype EnumControlProps = ControlProps & {\n    enum: AnyEnum;\n    noLocalize?: boolean;\n};\nconst EnumControl = React.forwardRef<HTMLSelectElement, EnumControlProps>(\n    function EnumControl(props, ref): JSX.Element {\n        return (\n            <Form.Control\n                value={props.value as string}\n                onChange={e => props.onChange(parseInt(e.target.value))}\n                disabled={props.disabled}\n                as=\"select\"\n                custom\n                ref={ref}>\n                {Object.entries(props.enum)\n                    //filters out reverse mapping\n                    .filter(([key]) => isNaN(parseInt(key)))\n                    .map(([key, value]) => {\n                        return props.noLocalize ? (\n                            <option key={value} value={value}>\n                                {key}\n                            </option>\n                        ) : (\n                            <FormattedMessage id={`${props.name}.${key}`} key={key}>\n                                {message => (\n                                    <option key={value} value={value}>\n                                        {message}\n                                    </option>\n                                )}\n                            </FormattedMessage>\n                        );\n                    })}\n            </Form.Control>\n        );\n    }\n);\n\nexport const defaultValues: Record<FieldType, InputFieldTypes> = {\n    [FieldType.Enum]: 0,\n    [FieldType.Number]: 0,\n    [FieldType.Boolean]: false,\n    [FieldType.String]: \"\",\n    [FieldType.Password]: \"\",\n    [FieldType.TextArea]: \"\"\n};\n\nexport default function InputField(props: InputFieldProps): JSX.Element {\n    const [currentValue, setCurrentValue] = useState(\n        props.defaultValue ?? defaultValues[props.type]\n    );\n    const controlRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n        setCurrentValue(props.defaultValue ?? defaultValues[props.type]);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [props.defaultValue]);\n\n    useEffect(() => {\n        if (controlRef.current) {\n            if (controlRef.current.checkValidity()) {\n                controlRef.current.classList.remove(\"is-invalid\");\n            } else {\n                controlRef.current.classList.add(\"is-invalid\");\n            }\n        }\n\n        switch (props.type) {\n            case FieldType.Boolean:\n                props.onChange(\n                    currentValue as boolean,\n                    controlRef.current?.checkValidity() ?? true\n                );\n                return;\n            case FieldType.Enum:\n            case FieldType.Number:\n                props.onChange(currentValue as number, controlRef.current?.checkValidity() ?? true);\n                return;\n            case FieldType.String:\n            case FieldType.Password:\n            case FieldType.TextArea:\n                props.onChange(currentValue as string, controlRef.current?.checkValidity() ?? true);\n                return;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [currentValue]);\n\n    const tooltip = (innerid?: string) => {\n        if (!innerid) return <React.Fragment />;\n\n        return (\n            <Tooltip id={innerid}>\n                <FormattedMessage id={innerid} />\n            </Tooltip>\n        );\n    };\n\n    const basicControls: {\n        [Property in typeof props.type]: Property extends FieldType.Enum | FieldType.Number\n            ? undefined\n            : React.FC<ControlProps>;\n    } = {\n        string: StringControl,\n        password: PasswordControl,\n        boolean: BooleanControl,\n        textarea: TextAreaControl,\n        [FieldType.Number]: undefined,\n        [FieldType.Enum]: undefined\n    };\n\n    const changed =\n        currentValue != (props.defaultValue ?? defaultValues[props.type]) || props.forceChanged;\n\n    return (\n        <InputGroup>\n            <OverlayTrigger\n                overlay={tooltip(props.tooltip)}\n                show={props.tooltip ? undefined : false}>\n                {({ ref, ...triggerHandler }) => (\n                    <InputGroup.Prepend className=\"w-50 w-xl-40\">\n                        <InputGroup.Text className=\"flex-grow-1\" {...triggerHandler}>\n                            <span className={changed ? \"font-weight-bold\" : \"\"}>\n                                <FormattedMessage id={props.name} />\n                            </span>\n                            <div className=\"ml-auto\">\n                                {props.disabled && !props.hideReadOnly ? (\n                                    <FormattedMessage id=\"generic.readonly\" />\n                                ) : null}\n                                <div\n                                    ref={ref}\n                                    className=\"d-inline-block ml-2\"\n                                    style={{ visibility: props.tooltip ? \"unset\" : \"hidden\" }}>\n                                    <FontAwesomeIcon icon={faInfo} />\n                                </div>\n                            </div>\n                        </InputGroup.Text>\n                    </InputGroup.Prepend>\n                )}\n            </OverlayTrigger>\n            {props.type === FieldType.Number ? (\n                <NumberControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    disabled={props.disabled}\n                    max={props.max}\n                    min={props.min}\n                    ref={controlRef}\n                />\n            ) : props.type === FieldType.Enum ? (\n                <EnumControl\n                    value={currentValue}\n                    onChange={newValue => setCurrentValue(newValue)}\n                    name={props.name}\n                    enum={props.enum}\n                    noLocalize={props.noLocalize}\n                    disabled={props.disabled}\n                />\n            ) : (\n                React.createElement<ControlProps & React.RefAttributes<HTMLInputElement>>(\n                    basicControls[props.type],\n                    {\n                        value: currentValue,\n                        onChange: newValue => setCurrentValue(newValue),\n                        disabled: props.disabled,\n                        name: props.type,\n                        ref: controlRef\n                    }\n                )\n            )}\n            {!(!changed || props.disabled) || props.additionalAppend ? (\n                <InputGroup.Append>\n                    {!(!changed || props.disabled) ? (\n                        <Button\n                            variant=\"danger\"\n                            onClick={() =>\n                                setCurrentValue(props.defaultValue ?? defaultValues[props.type])\n                            }>\n                            <FontAwesomeIcon icon=\"undo\" />\n                        </Button>\n                    ) : null}\n                    {props.additionalAppend}\n                </InputGroup.Append>\n            ) : null}\n        </InputGroup>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { DistributiveOmit } from \"../../utils/misc\";\nimport InputField, {\n    defaultValues,\n    FieldType,\n    InputFieldProps,\n    InputFieldTypes\n} from \"./InputField\";\n\ntype ExtractValues<T> = T extends T ? T[keyof T] : never;\n\ntype FieldsOutput<Fields extends Record<string, InputFormField>> = {\n    [Id in keyof Fields]: Fields[Id][\"type\"] extends FieldType.Number\n        ? number\n        : Fields[Id][\"type\"] extends FieldType.Enum\n          ? // @ts-expect-error Typescript doesnt seem to support union descrimination in conditional types\n            ExtractValues<Fields[Id][\"enum\"]>\n          : Fields[Id][\"type\"] extends FieldType.Boolean\n            ? boolean\n            : Fields[Id][\"type\"] extends FieldType.String\n              ? string\n              : Fields[Id][\"type\"] extends FieldType.Password\n                ? string\n                : Fields[Id][\"type\"] extends FieldType.TextArea\n                  ? string\n                  : never;\n};\n\nexport type InputFormField = DistributiveOmit<InputFieldProps, \"onChange\"> & {\n    alwaysInclude?: boolean;\n};\ninterface IProps<Fields extends Record<string, InputFormField>> {\n    fields: Fields;\n    onSave: (fields: FieldsOutput<Fields>) => unknown;\n    readOnly?: boolean;\n    hideDisabled?: boolean;\n    includeAll?: boolean;\n    saveMessageId?: string;\n    alwaysAllowSave?: boolean;\n}\n\ninterface FieldState {\n    invalid?: boolean;\n}\n\nexport default function InputForm<Fields extends Record<string, InputFormField>>(\n    props: IProps<Fields>\n): JSX.Element {\n    const fieldValueStates = new Map<\n        InputFormField,\n        [InputFieldTypes, React.Dispatch<React.SetStateAction<InputFieldTypes>>]\n    >();\n    const fieldStateIds = new Map<string, InputFormField>();\n    const [fieldStates, setFieldStates] = useState<Record<string, FieldState | undefined>>({});\n\n    useEffect(() => {\n        Object.keys(props.fields).forEach(id => {\n            setFieldStates(prevState => ({\n                ...prevState,\n                [id]: {}\n            }));\n        });\n        // It wants props.fields, but you really shouldnt ever change it\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    for (const [id, field] of Object.entries(props.fields)) {\n        fieldStateIds.set(id, field);\n        fieldValueStates.set(\n            field,\n            // props.fields never changes, it will be\n            // eslint-disable-next-line react-hooks/rules-of-hooks\n            useState<InputFieldTypes>(field.defaultValue ?? defaultValues[field.type])\n        );\n    }\n\n    let anyDiff = props.alwaysAllowSave;\n    let anyInvalid = false;\n    for (const [id, fieldDescriptor] of fieldStateIds) {\n        const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n        const fieldState = fieldStates[id];\n        if ((fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) != fieldValue)\n            anyDiff = true;\n        if (fieldState?.invalid) anyInvalid = true;\n\n        if (anyDiff && anyInvalid) break;\n    }\n\n    const save = () => {\n        const outputObject: Record<string, InputFieldTypes> = {};\n\n        for (const [id, fieldDescriptor] of fieldStateIds) {\n            const [fieldValue] = fieldValueStates.get(fieldDescriptor)!;\n\n            if (\n                !fieldDescriptor.alwaysInclude &&\n                fieldValue ==\n                    (fieldDescriptor.defaultValue ?? defaultValues[fieldDescriptor.type]) &&\n                !props.includeAll\n            )\n                continue;\n\n            outputObject[id] = fieldValue;\n        }\n        // @ts-expect-error I can't be assed to turn this generic object into the specially crafted output type, its mostly for public api sanity so i dont care\n        props.onSave(outputObject);\n    };\n\n    //Don't show anything including the save button if we are hiding every single field\n    if (props.hideDisabled) {\n        if (!Object.values(props.fields).some(field => !field.disabled)) {\n            return <></>;\n        }\n    }\n\n    return (\n        <div>\n            {Object.entries(props.fields).map(([id, field]) => {\n                const { disabled, ...innerProps } = field;\n                if (props.hideDisabled && disabled) return null;\n\n                return (\n                    <InputField\n                        key={id}\n                        {...innerProps}\n                        disabled={props.readOnly || disabled}\n                        onChange={(newVal: InputFieldTypes, isValid: boolean) => {\n                            fieldValueStates.get(field)![1](newVal);\n                            setFieldStates(prevState => ({\n                                ...prevState,\n                                [id]: {\n                                    ...prevState[id],\n                                    invalid: !isValid\n                                }\n                            }));\n                        }}\n                    />\n                );\n            })}\n            <div className=\"text-center mt-2\">\n                <OverlayTrigger\n                    overlay={\n                        <Tooltip id={`form-invalid`}>\n                            <FormattedMessage id=\"generic.invalid_form\" />\n                        </Tooltip>\n                    }\n                    show={anyInvalid ? undefined : false}>\n                    <Button\n                        variant={props.readOnly || anyInvalid ? \"danger\" : \"success\"}\n                        disabled={props.readOnly || !anyDiff || anyInvalid}\n                        onClick={save}>\n                        <FormattedMessage id={props.saveMessageId ?? \"generic.save\"} />\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport ReactJson from \"react-json-view\";\n\nimport configOptions from \"../../ApiClient/util/config\";\n\nexport default function JsonViewer(props: { obj: unknown }): JSX.Element {\n    return (\n        <ReactJson\n            src={props.obj as Record<string, unknown>}\n            name={\"JSON\"}\n            theme=\"tube\"\n            iconStyle=\"triangle\"\n            collapsed\n            displayDataTypes={false}\n        />\n    );\n}\n\nexport function DebugJsonViewer(props: { obj: unknown }): JSX.Element {\n    if (!configOptions.showjson.value) {\n        return <></>;\n    }\n    return (\n        <div className=\"text-left\">\n            <JsonViewer obj={props.obj} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    ConfigurationType,\n    InstanceManagerRights,\n    InstanceResponse,\n    InstanceUpdateRequest\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient, { GetInstanceErrors } from \"../../../../ApiClient/InstanceClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport InternalStatus, {\n    StatusCode\n} from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport { hasInstanceManagerRight, resolvePermissionSet } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ntype IProps = RouteComponentProps;\ninterface IState {\n    moving: boolean;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n}\n\nclass InstanceSettings extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.editInstance = this.editInstance.bind(this);\n\n        this.state = {\n            errors: [],\n            moving: false\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async editInstance(instance: Omit<InstanceUpdateRequest, \"id\">) {\n        if (!!instance.autoUpdateCron && !!instance.autoUpdateInterval) {\n            alert(\"Cannot set both auto update interval and cron!\");\n            return;\n        }\n\n        const instanceId = this.context.instance.id;\n        let newPath: string | undefined;\n        if (instance.path && instance.path != this.context.instance.path) {\n            newPath = instance.path;\n            instance.path = null;\n            instance.online = false; // need to offline the instance before moving it\n            this.setState({ moving: true });\n        }\n\n        const response = await InstanceClient.editInstance({\n            ...instance,\n            id: instanceId\n        });\n        if (response.code !== StatusCode.OK) {\n            this.addError(response.error);\n            this.setState({ moving: false });\n            return;\n        }\n\n        if (newPath) {\n            //move the instance\n            const response2 = await InstanceClient.editInstance({\n                id: this.context.instance.id,\n                path: newPath\n            });\n\n            if (response2.code !== StatusCode.OK) {\n                this.addError(response2.error);\n                this.setState({ moving: false });\n                await this.context.reloadInstance();\n                return;\n            }\n\n            // we can't use the jobs controller because instance move jobs are special so just wait until the move is done\n            let response3: InternalStatus<InstanceResponse, GetInstanceErrors>;\n            do {\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                response3 = await InstanceClient.getInstance(instanceId);\n\n                if (response3.code !== StatusCode.OK) {\n                    this.addError(response3.error);\n                    this.setState({ moving: false });\n                    await this.context.reloadInstance();\n                    return;\n                }\n            } while (response3.payload.moveJob);\n\n            const response4 = await InstanceClient.editInstance({\n                online: true,\n                id: instanceId\n            });\n            if (response4.code !== StatusCode.OK) {\n                this.addError(response4.error);\n                this.setState({ moving: false });\n            } else {\n                JobsController.registerJob(response2.payload.moveJob!, instanceId);\n            }\n        }\n\n        await this.context.reloadInstance();\n    }\n\n    public render(): React.ReactNode {\n        const checkIMFlag = (flag: InstanceManagerRights) => {\n            return hasInstanceManagerRight(resolvePermissionSet(this.context.user), flag);\n        };\n\n        const fields = {\n            name: {\n                name: \"fields.instance.name\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.name,\n                disabled: !checkIMFlag(InstanceManagerRights.Rename)\n            },\n            path: {\n                name: \"fields.instance.path\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.path,\n                disabled: !checkIMFlag(InstanceManagerRights.Relocate)\n            },\n            chatBotLimit: {\n                name: \"fields.instance.chatbotlimit\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.chatBotLimit,\n                disabled: !checkIMFlag(InstanceManagerRights.SetChatBotLimit)\n            },\n            autoUpdateCron: {\n                name: \"fields.instance.cron\",\n                type: FieldType.String as FieldType.String,\n                defaultValue: this.context.instance.autoUpdateCron,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            autoUpdateInterval: {\n                name: \"fields.instance.autoupdate\",\n                type: FieldType.Number as FieldType.Number,\n                min: 0,\n                defaultValue: this.context.instance.autoUpdateInterval,\n                disabled: !checkIMFlag(InstanceManagerRights.SetAutoUpdate)\n            },\n            configurationType: {\n                name: \"fields.instance.filemode\",\n                type: FieldType.Enum as FieldType.Enum,\n                enum: ConfigurationType,\n                defaultValue: this.context.instance.configurationType,\n                disabled: !checkIMFlag(InstanceManagerRights.SetConfiguration)\n            }\n        };\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.info\" />\n                </h1>\n                <DebugJsonViewer obj={this.context} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n\n                {this.state.moving ? (\n                    <Loading text=\"loading.instance.move\" />\n                ) : (\n                    <InputForm fields={fields} onSave={this.editInstance} />\n                )}\n            </div>\n        );\n    }\n}\nInstanceSettings.contextType = InstanceEditContext;\nexport default withRouter(InstanceSettings);\n","import React from \"react\";\n\nimport type {\n    InstancePermissionSetResponse,\n    InstanceResponse,\n    ServerInformationResponse,\n    UserResponse\n} from \"../ApiClient/generatedcode/generated\";\nimport InternalError from \"../ApiClient/models/InternalComms/InternalError\";\n\nexport type InstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse;\n};\n\n//same as InstanceEditContext except used for components which arent loading under instanceedit so we cant guarentee that instance wont be null\nexport type UnsafeInstanceEditContext = {\n    deleteError: (error: InternalError) => void;\n    errors: Set<InternalError>;\n    reloadInstance: () => Promise<void>;\n    instance: InstanceResponse | null;\n    user: UserResponse;\n    serverInfo: ServerInformationResponse;\n    instancePermissionSet: InstancePermissionSetResponse | null;\n};\n\nexport const InstanceEditContext = React.createContext<InstanceEditContext>(\n    undefined as unknown as InstanceEditContext\n);\n","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"bsPrefix\", \"size\", \"hasValidation\", \"className\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return /*#__PURE__*/React.createElement(InputGroupText, null, /*#__PURE__*/React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      hasValidation = _ref.hasValidation,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size, hasValidation && 'has-validation')\n  }));\n});\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;"],"names":["FieldType","StringControl","React","props","ref","Form","Control","value","onChange","e","target","disabled","TextAreaControl","as","PasswordControl","type","BooleanControl","rndId","Math","random","toString","htmlFor","className","Check","id","checked","NumberControl","isNaN","valueAsNumber","min","max","EnumControl","parseInt","custom","Object","entries","enum","filter","key","map","noLocalize","FormattedMessage","name","message","defaultValues","Enum","Number","Boolean","String","Password","TextArea","InputField","currentValue","setCurrentValue","useState","defaultValue","controlRef","useRef","useEffect","current","checkValidity","classList","remove","add","basicControls","string","password","boolean","textarea","undefined","changed","forceChanged","InputGroup","OverlayTrigger","overlay","innerid","tooltip","Tooltip","show","triggerHandler","Prepend","Text","_extends","hideReadOnly","style","visibility","FontAwesomeIcon","icon","faInfo","newValue","additionalAppend","Append","Button","variant","onClick","InputForm","fieldValueStates","Map","fieldStateIds","fieldStates","setFieldStates","keys","fields","forEach","prevState","field","set","anyDiff","alwaysAllowSave","anyInvalid","fieldDescriptor","fieldValue","get","fieldState","invalid","hideDisabled","values","some","innerProps","readOnly","newVal","isValid","save","outputObject","alwaysInclude","includeAll","onSave","saveMessageId","JsonViewer","ReactJson","src","obj","theme","iconStyle","collapsed","displayDataTypes","DebugJsonViewer","configOptions","showjson","InstanceSettings","constructor","super","this","editInstance","bind","state","errors","moving","addError","error","setState","Array","from","push","instance","autoUpdateCron","autoUpdateInterval","alert","instanceId","context","newPath","path","online","response","InstanceClient","code","StatusCode","OK","response2","reloadInstance","response3","Promise","resolve","setTimeout","getInstance","payload","moveJob","response4","JobsController","registerJob","render","checkIMFlag","flag","hasInstanceManagerRight","resolvePermissionSet","user","InstanceManagerRights","Rename","Relocate","chatBotLimit","SetChatBotLimit","SetAutoUpdate","configurationType","ConfigurationType","SetConfiguration","err","index","ErrorAlert","onClose","prev","newarr","Loading","text","contextType","InstanceEditContext","withRouter","_excluded","InputGroupAppend","InputGroupPrepend","InputGroupText","Component","_ref","bsPrefix","size","hasValidation","_ref$as","displayName","Radio","Checkbox"],"sourceRoot":""}