{"version":3,"file":"8143.fa0e94b3db3e44149382.bundle.js","mappings":"kMAiBA,QAAoB,cAA+BA,EAAAA,EAC/C,qBAAaC,CACTC,EACAC,GAIA,IAAIC,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAIC,2BAA2BN,EAAU,CAC9EO,QAAS,CACLC,SAAUT,IAGtB,CAAE,MAAOU,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAAShB,EAASiB,OAG1B,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,aACV,CACIC,aAAcrB,EAASiB,MAE3BjB,KAIZ,QACI,OAAO,IAAIS,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,uBAAawB,CACT1B,GAIA,IAAIE,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAIqB,4BAA4B,CACrEnB,QAAS,CACLC,SAAUT,IAGtB,CAAE,MAAOU,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAAShB,EAASiB,OAG1B,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,aACV,CACIC,aAAcrB,EAASiB,MAE3BjB,KAIZ,QACI,OAAO,IAAIS,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,sBAAa0B,CACT5B,GAIA,IAAIE,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAIuB,2BAA2B,CACpErB,QAAS,CACLC,SAAUT,IAGtB,CAAE,MAAOU,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAAShB,EAASiB,OAG1B,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,aACV,CACIC,aAAcrB,EAASiB,MAE3BjB,KAIZ,QACI,OAAO,IAAIS,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,mBAAa4B,CACT9B,GAMA,IAAIE,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAIyB,yBAAyB,CAClEvB,QAAS,CACLC,SAAUT,IAGtB,CAAE,MAAOU,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAAShB,EAASiB,OAG1B,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASc,OAAOC,OACZ,CAAEC,aAAa,GACfhC,EAASiB,QAIrB,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,aACV,CACIC,aAAcrB,EAASiB,MAE3BjB,KAIZ,QACI,OAAO,IAAIS,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,CAEA,oBAAaiC,CACTnC,EACAoC,GAMA,IAAIlC,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAI+B,2BAA2BD,EAAa,CACjF5B,QAAS,CACLC,SAAUT,IAGtB,CAAE,MAAOU,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQR,EAASc,QACb,KAAK,IACD,OAAO,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAAShB,EAASiB,OAG1B,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASc,OAAOC,OACZ,CAAEK,aAAa,GACfpC,EAASiB,QAIrB,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,aACV,CACIC,aAAcrB,EAASiB,MAE3BjB,KAIZ,QACI,OAAO,IAAIS,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUG,mBACV,CAAEC,cAAevB,GACjBA,KAKpB,E","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/RepositoryClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    ErrorMessageResponse,\n    RepositoryCreateRequest,\n    RepositoryResponse,\n    RepositoryUpdateRequest\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\n\nexport type cloneRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type deleteRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type recloneRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type getRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\nexport type editRepositoryErrors = GenericErrors | ErrorCode.NO_DB_ENTITY;\n\nexport default new (class RepositoryClient extends ApiClient {\n    public async cloneRepository(\n        instanceid: number,\n        settings: RepositoryCreateRequest\n    ): Promise<InternalStatus<RepositoryResponse, cloneRepositoryErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.repositoryControllerCreate(settings, {\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async recloneRepository(\n        instanceid: number\n    ): Promise<InternalStatus<RepositoryResponse, recloneRepositoryErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.repositoryControllerReclone({\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteRepository(\n        instanceid: number\n    ): Promise<InternalStatus<RepositoryResponse, deleteRepositoryErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.repositoryControllerDelete({\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async getRepository(\n        instanceid: number\n    ): Promise<\n        InternalStatus<RepositoryResponse & { bootstrapped?: boolean }, getRepositoryErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.repositoryControllerRead({\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 201: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: Object.assign(\n                        { bootstraped: true },\n                        response.data as RepositoryResponse\n                    )\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async editRepository(\n        instanceid: number,\n        newSettings: RepositoryUpdateRequest\n    ): Promise<\n        InternalStatus<RepositoryResponse & { longRunning?: boolean }, editRepositoryErrors>\n    > {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.repositoryControllerUpdate(newSettings, {\n                headers: {\n                    Instance: instanceid\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as RepositoryResponse\n                });\n            }\n            case 202: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: Object.assign(\n                        { longRunning: true },\n                        response.data as RepositoryResponse\n                    )\n                });\n            }\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.NO_DB_ENTITY,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","cloneRepository","instanceid","settings","response","ServerClient","wait4Init","apiClient","api","repositoryControllerCreate","headers","Instance","stat","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","NO_DB_ENTITY","errorMessage","UNHANDLED_RESPONSE","axiosResponse","recloneRepository","repositoryControllerReclone","deleteRepository","repositoryControllerDelete","getRepository","repositoryControllerRead","Object","assign","bootstraped","editRepository","newSettings","repositoryControllerUpdate","longRunning"],"sourceRoot":""}