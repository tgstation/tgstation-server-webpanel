{"version":3,"file":"6105.f7f6090b8ac9391d5d35.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/ConfigurationFileClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\r\nimport {\r\n    ConfigurationFileRequest,\r\n    ConfigurationFileResponse,\r\n    ErrorMessageResponse,\r\n    PaginatedConfigurationFileResponse\r\n} from \"./generatedcode/generated\";\r\nimport { DownloadedConfigFile } from \"./models/DownloadedConfigFile\";\r\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\r\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\r\nimport ServerClient from \"./ServerClient\";\r\nimport TransferClient, { DownloadErrors, ProgressEvent, UploadErrors } from \"./TransferClient\";\r\nimport configOptions from \"./util/config\";\r\n\r\nexport type ConfigErrors =\r\n    | GenericErrors\r\n    | ErrorCode.CONFIG_FILE_IO_ERROR\r\n    | ErrorCode.CONFIG_FILE_NOT_FOUND;\r\n\r\nexport type ConfigDirectoryErrors = GenericErrors | ErrorCode.CONFIG_FILE_DIRECTORY_NOT_FOUND;\r\n\r\nexport default new (class ConfigurationFileClient extends ApiClient {\r\n    public async addDirectory(\r\n        instance: number,\r\n        path: ConfigurationFileRequest\r\n    ): Promise<InternalStatus<ConfigurationFileResponse | null, GenericErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerCreateDirectory(\r\n                path,\r\n                {\r\n                    headers: {\r\n                        Instance: instance.toString()\r\n                    }\r\n                }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200:\r\n            case 201: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: null\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async writeConfigFile(\r\n        instance: number,\r\n        fileRequest: ConfigurationFileRequest,\r\n        file: ArrayBuffer\r\n    ): Promise<InternalStatus<ConfigurationFileResponse, GenericErrors | UploadErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerUpdate(\r\n                fileRequest,\r\n                {\r\n                    headers: { Instance: instance.toString() }\r\n                }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n        switch (response.status) {\r\n            case 200:\r\n            case 202: {\r\n                const payload = response.data as ConfigurationFileResponse;\r\n                const upload = await TransferClient.Upload(payload.fileTicket, file);\r\n                if (upload.code === StatusCode.OK) {\r\n                    return new InternalStatus({\r\n                        code: StatusCode.OK,\r\n                        payload\r\n                    });\r\n                }\r\n                return new InternalStatus({ code: StatusCode.ERROR, error: upload.error });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getConfigFile(\r\n        instance: number,\r\n        filePath: string,\r\n        getContentProgressHandler: ((progressEvent: ProgressEvent) => void) | null\r\n    ): Promise<InternalStatus<DownloadedConfigFile, ConfigErrors | DownloadErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerFile(filePath, {\r\n                headers: { Instance: instance.toString() }\r\n            });\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200: {\r\n                if (getContentProgressHandler) {\r\n                    const payload = response.data as ConfigurationFileResponse;\r\n                    const contents = await TransferClient.Download(\r\n                        payload.fileTicket,\r\n                        getContentProgressHandler\r\n                    );\r\n\r\n                    if (contents.code === StatusCode.OK) {\r\n                        const temp: DownloadedConfigFile = Object.assign(\r\n                            { content: contents.payload },\r\n                            payload\r\n                        );\r\n                        return new InternalStatus({\r\n                            code: StatusCode.OK,\r\n                            payload: temp\r\n                        });\r\n                    }\r\n                    return new InternalStatus({ code: StatusCode.ERROR, error: contents.error });\r\n                }\r\n\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: response.data as ConfigurationFileResponse\r\n                });\r\n            }\r\n            case 410: {\r\n                const errorMessage = response.data as ErrorMessageResponse;\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.CONFIG_FILE_NOT_FOUND,\r\n                        { errorMessage },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getDirectory(\r\n        instance: number,\r\n        directoryPath: string,\r\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\r\n    ): Promise<InternalStatus<PaginatedConfigurationFileResponse, ConfigDirectoryErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerDirectory(\r\n                {\r\n                    directoryPath,\r\n                    pageSize: pageSize,\r\n                    page: page\r\n                },\r\n                { headers: { Instance: instance.toString() } }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<ConfigDirectoryErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: response.data as PaginatedConfigurationFileResponse\r\n                });\r\n            }\r\n\r\n            case 410: {\r\n                const errorMessage = response.data as ErrorMessageResponse;\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.CONFIG_FILE_DIRECTORY_NOT_FOUND,\r\n                        { errorMessage },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getRootDirectory(\r\n        instance: number,\r\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\r\n    ): Promise<InternalStatus<PaginatedConfigurationFileResponse, ConfigDirectoryErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerList(\r\n                {\r\n                    pageSize: pageSize,\r\n                    page: page\r\n                },\r\n                { headers: { Instance: instance.toString() } }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<ConfigDirectoryErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 200: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: response.data as PaginatedConfigurationFileResponse\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    public async deleteDirectory(\r\n        instance: number,\r\n        directory: ConfigurationFileRequest\r\n    ): Promise<InternalStatus<ConfigurationFileResponse | null, GenericErrors>> {\r\n        await ServerClient.wait4Init();\r\n\r\n        let response;\r\n        try {\r\n            response = await ServerClient.apiClient!.api.configurationControllerDeleteDirectory(\r\n                directory,\r\n                { headers: { Instance: instance.toString() } }\r\n            );\r\n        } catch (stat) {\r\n            return new InternalStatus({\r\n                code: StatusCode.ERROR,\r\n                error: stat as InternalError<GenericErrors>\r\n            });\r\n        }\r\n\r\n        switch (response.status) {\r\n            case 204: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.OK,\r\n                    payload: null\r\n                });\r\n            }\r\n            default: {\r\n                return new InternalStatus({\r\n                    code: StatusCode.ERROR,\r\n                    error: new InternalError(\r\n                        ErrorCode.UNHANDLED_RESPONSE,\r\n                        { axiosResponse: response },\r\n                        response\r\n                    )\r\n                });\r\n            }\r\n        }\r\n    }\r\n})();\r\n"],"names":["ApiClient","addDirectory","instance","path","response","ServerClient","wait4Init","apiClient","api","configurationControllerCreateDirectory","headers","Instance","toString","stat","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","InternalError","ErrorCode","UNHANDLED_RESPONSE","axiosResponse","writeConfigFile","fileRequest","file","configurationControllerUpdate","data","upload","TransferClient","Upload","fileTicket","getConfigFile","filePath","getContentProgressHandler","configurationControllerFile","contents","Download","temp","Object","assign","content","errorMessage","CONFIG_FILE_NOT_FOUND","getDirectory","directoryPath","page","pageSize","configOptions","itemsperpage","value","configurationControllerDirectory","CONFIG_FILE_DIRECTORY_NOT_FOUND","getRootDirectory","configurationControllerList","deleteDirectory","directory","configurationControllerDeleteDirectory"],"sourceRoot":""}