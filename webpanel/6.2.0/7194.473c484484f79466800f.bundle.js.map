{"version":3,"file":"7194.473c484484f79466800f.bundle.js","mappings":"qrBAwCA,MAAMA,UAAkBC,EAAAA,UAGbC,WAAAA,CAAYC,GACfC,MAAMD,GACNE,KAAKC,YAAcD,KAAKC,YAAYC,KAAKF,MACzCA,KAAKG,aAAeH,KAAKG,aAAaD,KAAKF,MAC3CA,KAAKI,OAASJ,KAAKI,OAAOF,KAAKF,MAC/BA,KAAKK,QAAUL,KAAKK,QAAQH,KAAKF,MAEjCA,KAAKM,MAAQ,CACTC,OAAQ,GACRC,WAAYC,EAAAA,GACZC,iBAAiB,EAEzB,CAEQP,YAAAA,GACCH,KAAKW,2BACd,CAEA,+BAAcA,SACJC,EAAAA,EAAaC,YACnB,MAAMC,QAAqBC,EAAAA,EAAWC,iBACtC,GAAIF,EAAaG,OAASC,EAAAA,EAAWC,MAAO,OAE5C,MAAMC,EAAON,EAAaO,QAEpBC,GAAgBC,EAAAA,EAAAA,GAAqBH,GAC3C,IAAII,EAAAA,EAAAA,IAAcF,EAAeG,EAAAA,GAAqBC,eAAgB,CAClE,MAAMC,QAAiBC,EAAAA,EAAYC,eACnC,GAAIF,EAASV,MAAQC,EAAAA,EAAWY,GAAI,CAChC,MAAMC,EAAgB,IAAIC,EAAAA,OAAOL,EAASN,QAAQU,eAC5CE,EAAiB,IAAID,EAAAA,OAAOhC,KAAKkC,QAAQC,WAAYC,SAErD1B,EAA4D,IAA1CqB,EAAcM,QAAQJ,GAE9CjC,KAAKsC,SAAS,CACV5B,mBAER,CACJ,CACJ,CAEQN,MAAAA,GACJJ,KAAKsC,SAAS,CACV5B,iBAAiB,GAEzB,CAEQL,OAAAA,CAAQE,GACZP,KAAKsC,SAAS,CACV/B,UAER,CAEA,uBAAagC,GACTC,EAAAA,EAAWC,GAAG,eAAgBzC,KAAKG,cACnCS,EAAAA,EAAa6B,GAAG,SAAUzC,KAAKI,QAE/BJ,KAAKsC,SAAS,CACV/B,aAAcmC,EAAAA,EAAgBC,cAGlCD,EAAAA,EAAgBD,GAAG,UAAWzC,KAAKK,QACvC,CAEOuC,oBAAAA,GACHJ,EAAAA,EAAWK,eAAe,eAAgB7C,KAAKG,cAC/CS,EAAAA,EAAaiC,eAAe,SAAU7C,KAAKI,QAC3CsC,EAAAA,EAAgBG,eAAe,UAAW7C,KAAKK,QACnD,CAEOyC,MAAAA,GACH,OACIlD,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAACmD,EAAAA,EAAM,CACHC,UAAU,YACVC,OAAQjD,KAAKF,MAAMoD,SAAW,UAAOC,EACrCC,kBAAgB,EAChBC,QAAQ,OACRC,GAAG,WACH1D,EAAAA,cAACmD,EAAAA,EAAOQ,MAAK,CACTC,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KAAKC,EAAAA,GAAUC,KAAKC,MAAQF,EAAAA,GAAUC,KAAKE,MAAO,CACjEC,QAAQ,GACV,EAENf,UAAU,WACThD,KAAKgE,iBAEVpE,EAAAA,cAACmD,EAAAA,EAAOkB,OAAM,CAACjB,UAAU,OAAO,gBAAc,0BAC9CpD,EAAAA,cAACmD,EAAAA,EAAOmB,SAAQ,CAAClB,UAAU,kBAAkBmB,MAAO,CAAEC,SAAU,QAC5DxE,EAAAA,cAACyE,EAAAA,EAAG,KACErE,KAAKF,MAAMoD,SAcToB,OAAOC,OAAOvE,KAAKM,MAAME,YAAYgE,KAAIC,IACrC,GAAKA,EAAIC,OAAOC,WAChB,OAA4B,GAArBF,EAAIlE,OAAOqE,OACdhF,EAAAA,cAACyE,EAAAA,EAAIQ,KAAI,CAACC,IAAKL,EAAIM,MACfnF,EAAAA,cAACyE,EAAAA,EAAIW,KAAI,CACLxB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfe,EAAIC,OAAOb,MAAQY,EAAIC,OAAOZ,MAC9B,CAAEC,QAAQ,GACb,EAELkB,QAAQC,EAAAA,EAAAA,IACJlF,KAAKF,MAAMqF,SAASC,SACpBX,EAAIC,OAAOZ,OACVW,EAAIC,OAAOW,cAEhBzF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAId,EAAIC,OAAOK,SAIzCnF,EAAAA,cAACyE,EAAAA,EAAIQ,KAAI,CAACC,IAAKL,EAAIM,MACfnF,EAAAA,cAAC4F,EAAAA,EAAW,CACRD,GAAId,EAAIM,KAAO,YACfU,MAAO7F,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAId,EAAIC,OAAOK,QACvCT,OAAOC,OAAOE,EAAIlE,QAAQmF,QACvBC,GAASA,EAAMhB,aACjBC,QAAU,EACRhF,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAC4F,EAAAA,EAAYX,KAAI,CACbrB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfe,EAAIC,OAAOb,MACPY,EAAIC,OAAOZ,MACf,CAAEC,QAAQ,GACb,EAELkB,QAAQC,EAAAA,EAAAA,IACJlF,KAAKF,MAAMqF,SAASC,SACpBX,EAAIC,OAAOZ,OACX,IAEJlE,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAId,EAAIC,OAAOK,QAGtBN,EAAIlE,OAAOiE,KAAIoB,IACZ,IAAIA,EAAIC,WACHD,EAAIjB,YACJiB,EAAIE,cAET,OACIlG,EAAAA,cAAC4F,EAAAA,EAAYX,KAAI,CACbC,IAAKc,EAAIb,KACTvB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfkC,EAAI/B,MAAQ+B,EAAI9B,MAChB,CACIC,QAAQ,GAEf,EAELkB,QAAQC,EAAAA,EAAAA,IACJlF,KAAKF,MAAMqF,SACNC,SACLQ,EAAI9B,OACH8B,EAAIP,cAETzF,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAIK,EAAIb,OAEG,KAK/B,IAIf,IA5FLnF,EAAAA,cAACyE,EAAAA,EAAIQ,KAAI,KACLjF,EAAAA,cAACyE,EAAAA,EAAIW,KAAI,CACLxB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfC,EAAAA,GAAUC,KAAKC,MAAQF,EAAAA,GAAUC,KAAKE,MACtC,CAAEC,QAAQ,GACb,EAELkB,QAAQ,GACRrF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBAuFpCvF,KAAKM,MAAMI,gBACRd,EAAAA,cAACmG,EAAAA,EAAc,CACXC,UAAU,QACVC,QAASnG,GACLF,EAAAA,cAACsG,EAAAA,EAAOC,EAAA,CAACZ,GAAG,uBAA0BzF,GAClCF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBAG7B3F,EAAAA,cAAA,UACIA,EAAAA,cAACwG,EAAAA,EAAe,CACZpD,UAAU,0BACVQ,QAASA,IACLxD,KAAKF,MAAM2D,QAAQC,KACfC,EAAAA,GAAU0C,aAAaxC,MACnBF,EAAAA,GAAU0C,aAAavC,MAC3B,CAAEC,QAAQ,IAGlBuC,KAAMC,EAAAA,QAKlB3G,EAAAA,cAACA,EAAAA,SAAc,MAElBI,KAAKwG,eAK1B,CAEQxC,aAAAA,GACJ,OAAKhE,KAAKkC,QAAQC,YAAYC,QAK1BxC,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBACpB,KACAvF,KAAKkC,QAAQC,WAAWC,SAPtBxC,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,mBAUpC,CAEQiB,UAAAA,GACJ,OAAKxG,KAAKF,MAAMoD,SA0BZtD,EAAAA,cAACyE,EAAAA,EAAIQ,KAAI,CAAC7B,UAAU,WAChBpD,EAAAA,cAAC6G,EAAAA,EAAQ,KACL7G,EAAAA,cAAC6G,EAAAA,EAASxC,OAAM,CACZsB,GAAG,gBACHmB,KAAK,SACLrD,QAAQ,UACR,cAAY,WACZ,gBAAc,OACd,gBAAc,SACbrD,KAAKkC,QAAQd,KACVpB,KAAKkC,QAAQd,KAAK2D,KAElBnF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,qBAG7B3F,EAAAA,cAAC6G,EAAAA,EAASE,KAAI,CAACC,YAAU,EAAC5D,UAAU,cAChCpD,EAAAA,cAAC6G,EAAAA,EAAS5B,KAAI,CACVrB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfC,EAAAA,GAAUkD,KAAKhD,MAAQF,EAAAA,GAAUkD,KAAK/C,MACtC,CAAEC,QAAQ,GACb,GAELnE,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,iBAEzB3F,EAAAA,cAAC6G,EAAAA,EAAS5B,KAAI,CACVrB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfC,EAAAA,GAAUmD,OAAOjD,MAAQF,EAAAA,GAAUmD,OAAOhD,MAC1C,CAAEC,QAAQ,GACb,GAELnE,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,mBAExB5B,EAAAA,GAAUoD,OAAOpC,WACd/E,EAAAA,cAAC6G,EAAAA,EAAS5B,KAAI,CACVrB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfC,EAAAA,GAAUoD,OAAOlD,MAAQF,EAAAA,GAAUoD,OAAOjD,MAC1C,CAAEC,QAAQ,GACb,GAELnE,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,mBAGzB,GAEJ3F,EAAAA,cAAC6G,EAAAA,EAAS5B,KAAI,CACVrB,QAASA,KACL5C,EAAAA,EAAaoG,KAAK,cAClBhH,KAAKF,MAAM2D,QAAQwD,QAAQjH,KAAKF,MAAMqF,SAASC,SAAU,CACrDrB,QAAQ,GACV,GAENnE,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,uBAEzB3F,EAAAA,cAAC6G,EAAAA,EAAS5B,KAAI,CACVrB,QAASA,KACLxD,KAAKF,MAAM2D,QAAQwD,QAAQjH,KAAKF,MAAMqF,SAASC,SAAU,CACrDrB,QAAQ,GACV,GAENnE,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBAEzB3F,EAAAA,cAAC6G,EAAAA,EAAS5B,KAAI,CAACrB,QAASxD,KAAKC,aACzBL,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,sBAzFjC3F,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAACsH,EAAAA,EAAM,CACH1D,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KACfC,EAAAA,GAAUmD,OAAOjD,MAAQF,EAAAA,GAAUmD,OAAOhD,MAC1C,CAAEC,QAAQ,GACb,EAELV,QAAQ,WACRzD,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAK,UAE1B1G,EAAAA,cAACsH,EAAAA,EAAM,CACH1D,QAASA,KACLxD,KAAKF,MAAM2D,QAAQC,KAAKC,EAAAA,GAAUkD,KAAKhD,MAAQF,EAAAA,GAAUkD,KAAK/C,MAAO,CACjEC,QAAQ,GACV,EAENV,QAAQ,WACRzD,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAK,iBA6E1C,CAEQrG,WAAAA,GACJW,EAAAA,EAAaR,QACjB,EAEJT,EAAUwH,YAAcC,EAAAA,EACxB,OAAeC,EAAAA,EAAAA,GAAW1H,G,wNCpXX,MAAM2H,UAAa1H,EAAAA,UACvBkD,MAAAA,GACH,IAAIyE,EAAe,EACnB,OACI3H,EAAAA,cAACmG,EAAAA,EAAc,CACXC,UAAU,OACVwB,SAAUC,IACFA,IACAF,EAAeG,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GACrD,EAEJ3B,QAASnG,GACLF,EAAAA,cAACsG,EAAAA,EAAOC,EAAA,CAACZ,GAAG,wBAA2BzF,GACnCF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAI,aAAagC,QAG3C3H,EAAAA,cAAA,OAAKoD,UAAU,qBAAqB6E,MAAO,GAAIC,OAAQ,GAAIC,I,kGAGvE,E,wNCnBW,MAAMC,UAAoBpI,EAAAA,UAC9BkD,MAAAA,GACH,OACIlD,EAAAA,cAACmG,EAAAA,EAAc,CACXC,UAAU,MACVC,QAASnG,GACLF,EAAAA,cAACsG,EAAAA,EAAOC,EAAA,CAACZ,GAAG,wBAA2BzF,GACnCF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,kBAG7B3F,EAAAA,cAACsH,EAAAA,EAAM,CACHlE,UAAU,sBACVQ,QAASA,IACLyE,OAAOC,KACH,sEAGRtI,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAM6B,EAAAA,OAIvC,E,iCCjBJ,MAAMC,UAAsBxI,EAAAA,UACjBC,WAAAA,CAAYC,GACfC,MAAMD,GACNE,KAAKM,MAAQ,CAAC,CAClB,CAEO+H,kBAAAA,CAAmBC,GAClBtI,KAAKF,MAAMqF,SAASL,MAAQwD,EAAUnD,SAASL,KAC/C9E,KAAKsC,SAAS,CACViG,WAAOpF,EACPqF,eAAWrF,GAGvB,CAEOsF,iBAAAA,CAAkBF,EAAcC,GACnCxI,KAAKsC,SAAS,CACViG,QACAC,aAER,CAEO1F,MAAAA,GACH,OAAI9C,KAAKM,MAAMiI,MAEP3I,EAAAA,cAAC8I,EAAAA,EAAS,CAAC1F,UAAU,aACjBpD,EAAAA,cAAC+I,EAAAA,EAAI,CAAC3F,UAAU,iBAAiB4F,OAAO,UACpChJ,EAAAA,cAAC+I,EAAAA,EAAKE,OAAM,CAAC7F,UAAU,aACnBpD,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,8BAEzB3F,EAAAA,cAAC+I,EAAAA,EAAKG,KAAI,KACNlJ,EAAAA,cAAC+I,EAAAA,EAAKI,MAAK,KACN/I,KAAKM,MAAMiI,MAAMxD,KAAK,KAAG/E,KAAKM,MAAMiI,MAAMS,SAE/CpJ,EAAAA,cAAC+I,EAAAA,EAAKM,KAAI,CAACC,GAAI,MAAOlG,UAAU,8BAC5BpD,EAAAA,cAAA,YACK,qBAAqBuJ,EAAAA,sBAA2BC,EAAAA,mBAC7CpJ,KAAKM,MAAMkI,WAAWa,gBACtB,kCASrBrJ,KAAKF,MAAMwJ,QAE1B,EAGJ,OAAejC,EAAAA,EAAAA,GAAWe,G,0DCpD1B,MAAMmB,UAAeC,EAAAA,UACV3J,WAAAA,CAAYC,GACfC,MAAMD,GACNE,KAAKM,MAAQ,CACTmJ,OAAO,EAEf,CACOpB,kBAAAA,CAAmBC,GAClBtI,KAAKM,MAAMmJ,MACXzJ,KAAKsC,SAAS,CACVmH,OAAO,IAKXnB,EAAUoB,MAAMC,MAAQ3J,KAAKF,MAAM4J,MAAMC,MACzCrB,EAAUnD,SAASL,KAAO9E,KAAKF,MAAMqF,SAASL,KAC9C9E,KAAKF,MAAMqF,SAAS7E,OAAOyD,QAE3B/D,KAAKsC,SAAS,CACVmH,OAAO,GAGnB,CAEO3G,MAAAA,GACH,OAAO9C,KAAKM,MAAMmJ,MAAQ,GAAKzJ,KAAKF,MAAMwJ,QAC9C,EAGJ,OAAejC,EAAAA,EAAAA,GAAWkC,G,UCT1B,MAAMK,EAAYC,GACdjK,EAAAA,cAACkK,EAAAA,QAAO,CAACC,KAAM,gBACXnK,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAIsE,KAIxBG,GAAWC,EAAAA,EAAAA,KAAS,IAAM,gCAAuC,CACnEC,SAAUN,EAAS,2BAGvB,MAAMO,WAAeX,EAAAA,UAEV3J,WAAAA,CAAYC,GACfC,MAAMD,GAENE,KAAKoK,gBAAkBpK,KAAKoK,gBAAgBlK,KAAKF,MAEjD,MAAMqK,EAAa,IAAIC,IAER5H,EAAAA,EAAgB6H,oBAAmB,GAC3CC,SAAQ1G,IACXuG,EAAWI,IACP3G,EAAMiB,MAGNkF,EAAAA,EAAAA,KAAS,IAAM,QAAO,KAAsBnG,EAAM4G,SAAS,CACvDR,SAAUN,EAAS9F,EAAMiB,QAEhC,IAGL/E,KAAKM,MAAQ,CACTqK,UAAW,IAAIC,gBAAgB3C,OAAO9C,SAAS0F,QAAQC,IAAI,SAC3DvK,OAAQmC,EAAAA,EAAgB6H,oBAAmB,GAC3CF,WAAYA,EAEpB,CAEQD,eAAAA,CAAgB7J,GACpBP,KAAKsC,SAAS,CACV/B,UAER,CAEA,uBAAagC,GACTG,EAAAA,EAAgBD,GAAG,aAAczC,KAAKoK,iBAEtCpK,KAAKF,MAAM2D,QAAQsH,QAAO5F,IACjBnF,KAAKgL,SAAS7F,EAASC,SAAS,IAEzCpF,KAAKgL,SAAShL,KAAKF,MAAMqF,SAASC,UAElC,MAAM6F,EAAY,IAAIL,gBAAgB3C,OAAO9C,SAAS0F,QAChDvK,EAAQ2K,EAAUH,IAAI,SAC5B,IAAKxK,EAID,YAHAN,KAAKsC,SAAS,CACVqI,SAAS,IAMb1C,OAAOxE,QAAQyH,aAAa,KAAMC,SAAS1F,MAAOwC,OAAO9C,SAASC,UAGtE,MAIMgG,EAJYC,KAAKC,MACnBrD,OAAOsD,eAAeC,QAAQ,UAAY,MAGjBlL,GAC7B,IAAK8K,EACD,OAAOpL,KAAKyL,eACR,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,gBAAiB,CACzCC,QAASC,MAAM,SAASxL,2CAKpC,MAAMW,EAAOgK,EAAUH,IAAI,QAC3B,IAAK7J,EACD,OAAOjB,KAAKyL,eACR,IAAIC,EAAAA,GAAcC,EAAAA,GAAUC,gBAAiB,CACzCC,QAASC,MAAM,sBAI3B9L,KAAKF,MAAM2D,QAAQwD,QAAQmE,EAAWW,KAEtC,MAAMpK,QAAiBf,EAAAA,EAAaoL,MAAM,CACtCtF,KAAMuF,EAAAA,EAAgBC,MACtBC,SAAUf,EAAWe,SACrBC,MAAOnL,IAKX,GAFAgH,OAAOsD,eAAec,WAAW,SAE7B1K,EAASV,OAASC,EAAAA,EAAWY,GAK7B,OAAO9B,KAAKyL,eAAe9J,EAAS4G,OAJpCvI,KAAKsC,SAAS,CACVqI,SAAS,GAKrB,CAEO/H,oBAAAA,GACHF,EAAAA,EAAgBG,eAAe,aAAc7C,KAAKoK,gBACtD,CAEQqB,cAAAA,CAAelD,GACnB+D,EAAAA,GAAUC,YAAc,CAAChE,GACzBvI,KAAKsC,SAAS,CACVqI,SAAS,GAEjB,CAEQK,QAAAA,CAAS7F,GACb,MAAM5E,EAASmC,EAAAA,EAAgB6H,oBAAmB,GAClD,IAAK,MAAMzG,KAASvD,EAChB,GAAIuD,EAAM0I,UAAY1I,EAAMuB,cAAeH,EAAAA,EAAAA,IAAYC,EAAUrB,EAAMA,OAAQ,CAC3E9D,KAAKF,MAAM2M,eAAe3I,EAAM0I,UAChC,KACJ,CAER,CAEO1J,MAAAA,GACH,OAAI9C,KAAKM,MAAMqK,QACJ/K,EAAAA,cAACkK,EAAAA,QAAO,CAACC,KAAK,mBAIrBnK,EAAAA,cAACwI,EAAa,KACVxI,EAAAA,cAAC2J,EAAM,KACH3J,EAAAA,cAAA,WACIA,EAAAA,cAAC8M,EAAAA,GAAM,KACF1M,KAAKM,MAAMC,OAAOiE,KAAIV,IACnB,GAAKA,EAAM6I,WAAc3M,KAAKF,MAAMoD,SAEpC,OACItD,EAAAA,cAACgN,EAAAA,GAAK,CACFC,OAAQ/I,EAAMgJ,MACdnD,KAAM7F,EAAMA,MACZgB,IAAKhB,EAAMiB,KACXjC,OAAQhD,IACJ,IAAIiN,EAUJ,OALIA,EAHCjJ,EAAMa,WAGA3E,KAAKM,MAAM+J,WAAWS,IACzBhH,EAAMiB,MAHHiI,EAAAA,EAOHhN,KAAKkC,SAASd,MAAS0C,EAAM6I,UAcpC3M,KAAKkC,SAASC,YACb2B,GAASH,EAAAA,GAAUmD,OAYjBhD,EAAMmJ,YACNrN,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAACmN,EAASjN,IAGdF,EAAAA,cAAC8I,EAAAA,EAAS,CAAC1F,UAAU,aACjBpD,EAAAA,cAACmN,EAASjN,IAjBdF,EAAAA,cAAC8I,EAAAA,EAAS,KACN9I,EAAAA,cAACsN,EAAAA,GAAU,CACP3E,MACI,IAAImD,EAAAA,GAAcC,EAAAA,GAAUwB,SAAU,CAClCtB,QAASC,MACL,yDApBpBlM,EAAAA,cAAC8I,EAAAA,EAAS,KACN9I,EAAAA,cAACsN,EAAAA,GAAU,CACP3E,MACI,IAAImD,EAAAA,GAAcC,EAAAA,GAAUwB,SAAU,CAClCtB,QAASC,MACL,iDA6BvB,GAEP,IAGVlM,EAAAA,cAAC8I,EAAAA,EAAS,CAAC1F,UAAU,aACjBpD,EAAAA,cAACgN,EAAAA,GAAK,CAAC9H,IAAI,YACN9E,KAAKF,MAAMoD,SACRtD,EAAAA,cAACoK,EAAQ,MAETpK,EAAAA,cAACwN,EAAAA,QAAK,CAACC,UAAWrN,KAAKF,MAAMuN,iBASjE,EAEJlD,GAAOhD,YAAcC,EAAAA,EACrB,QAAeC,EAAAA,EAAAA,GAAW8C,IC1N1B,MAAMmD,WAAiB1N,EAAAA,UAGZC,WAAAA,CAAYC,GACfC,MAAMD,GAENE,KAAKM,MAAQ,CAAC,CAClB,CAEOiC,iBAAAA,GACH4I,SAAS1F,MAAQ,iBAAmB8H,EAEpCpC,SAASqC,iBAAiB,WAAWC,IACf,MAAdA,EAAM3I,KAAe2I,EAAMC,SAAWD,EAAME,WAC5C/M,EAAAA,EAAaR,SACRQ,EAAAA,EAAaoL,MAAM4B,EAAAA,EAAAA,SAC5B,GAER,CAEO9K,MAAAA,GACH,OACIlD,EAAAA,cAACiO,EAAAA,GAAa,CACVC,SACI7F,OAAO8F,WACD,IAAIC,IAAI/F,OAAO8F,WAAY9F,OAAO9C,SAAS8I,MAAM7I,SACjD8I,EAAAA,IAEVtO,EAAAA,cAACwI,EAAa,KACVxI,EAAAA,cAACD,EAAS,CAAC6M,SAAUxM,KAAKM,MAAM6N,YAAajL,SAAUlD,KAAKF,MAAMoD,WACjElD,KAAKF,MAAM6K,QACR/K,EAAAA,cAAC8I,EAAAA,EAAS,CAAC1F,UAAU,aACjBpD,EAAAA,cAACkK,EAAAA,QAAO,CAACC,KAAK,iBAGlBnK,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAC8I,EAAAA,EAAS,CAAC1F,UAAU,QACjBpD,EAAAA,cAACwO,EAAAA,EAAK,CAAC/K,QAAQ,UAAUL,UAAU,qBAC/BpD,EAAAA,cAACwO,EAAAA,EAAMC,QAAO,KACVzO,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,+BAEzB3F,EAAAA,cAAA,WACAA,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,wBAExB+I,MAAMC,KAAKvO,KAAKkC,QAAQsM,OAAOjK,UAAUC,KAAI,CAACmB,EAAO8I,IAE9C7O,EAAAA,cAACsN,EAAAA,GAAU,CACP3E,MAAO5C,EACPb,IAAK2J,EACLC,QAASA,IAAM1O,KAAKkC,QAAQyM,YAAYhJ,QAKxD/F,EAAAA,cAACuK,GAAM,CACHjH,SAAUlD,KAAKF,MAAMoD,SACrBmK,UAAWrN,KAAKF,MAAMuN,UACtBZ,eAAgBhI,IACZzE,KAAKsC,SAAS,CACV6L,YAAa,CACTpJ,KAAMN,EACNK,IAAK4C,KAAKE,SAASgH,aAEzB,KAKjB5O,KAAKF,MAAMoD,SAAWtD,EAAAA,cAACiP,EAAAA,EAAQ,MAAM,MAE1CjP,EAAAA,cAACoI,EAAW,MACZpI,EAAAA,cAAC0H,EAAI,MAGjB,EAEJgG,GAASnG,YAAcC,EAAAA,EAEvB,S,yFC9FA,MAAM4F,UAAqBpN,EAAAA,UAChBkD,MAAAA,GAIH,OACIlD,EAAAA,cAACkP,EAAAA,EAAY,CAACrJ,MAAM,wBAChB7F,EAAAA,cAACsH,EAAAA,EAAM,CAAC7D,QAAQ,SAASL,UAAU,cAAcQ,QAL1CuL,KACX/O,KAAKF,MAAM2D,QAAQsL,QAAQ,GAKnBnP,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBAIrC,EAGJ,KAAe8B,EAAAA,EAAAA,GAAW2F,E,iLCN1B,MAAME,UAAmB1D,EAAAA,UACd3J,WAAAA,CAAYC,GACfC,MAAMD,GACNE,KAAKM,MAAQ,CACT0O,OAAO,EAEf,CACOlM,MAAAA,GACH,IAAK9C,KAAKF,MAAMyI,MACZ,MAAO,GAGX,MAAM0G,EAAcA,IAAMjP,KAAKsC,SAAS,CAAE0M,OAAO,IAGjD,OACIpP,EAAAA,cAACwO,EAAAA,EAAK,CACFpL,UAAU,WACVK,QAAQ,QACR6L,cAAelP,KAAKF,MAAM4O,QAC1BA,QAAS1O,KAAKF,MAAM4O,SACpB9O,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAIvF,KAAKF,MAAMyI,MAAMtH,MAAQ,wBAC/CrB,EAAAA,cAAA,WAEAA,EAAAA,cAACsH,EAAAA,EAAM,CAAC7D,QAAQ,SAASL,UAAU,cAAcQ,QAXtC2L,IAAMnP,KAAKsC,SAAS,CAAE0M,OAAO,KAYpCpP,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,qBAGzB3F,EAAAA,cAACwP,EAAAA,EAAK,CAACC,UAAQ,EAACC,KAAMtP,KAAKM,MAAM0O,MAAOO,OAAQN,EAAaO,KAAK,MAC9D5P,EAAAA,cAACwP,EAAAA,EAAMvG,OAAM,CAAC4G,aAAW,GACrB7P,EAAAA,cAACwP,EAAAA,EAAMrG,MAAK,KACRnJ,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAIvF,KAAKF,MAAMyI,MAAMtH,MAAQ,0BAGvDrB,EAAAA,cAACwP,EAAAA,EAAMtG,KAAI,CAAC9F,UAAU,oBACjBhD,KAAKF,MAAMyI,MAAMmH,MAAMhJ,OAASiJ,EAAAA,GAASC,OACtChQ,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAIvF,KAAKF,MAAMyI,MAAMmH,KAAKA,MAAQ,oBAEtC1P,KAAKF,MAAMyI,MAAMmH,MAAMA,KACvB1P,KAAKF,MAAMyI,MAAMmH,KAAKA,KAEtB,GAEJ9P,EAAAA,cAAA,WACAA,EAAAA,cAACiQ,EAAAA,EAAa,KACVjQ,EAAAA,cAAA,QAAMoD,UAAU,iDACX,qBAAqBmG,EAAAA,sBACrCC,EAAAA,mBACF0G,EAAAA,qBAED9P,KAAKF,MAAMyI,MAAMtH,4BACVjB,KAAKF,MAAMyI,MAAMmH,KAAO1P,KAAKF,MAAMyI,MAAMmH,KAAKA,KAAO,gDAGxE1P,KAAKF,MAAMyI,MAAMwH,eAAe9I,QAAQ,MAAO,WAI7BrH,EAAAA,cAACwP,EAAAA,EAAMY,OAAM,KACTpQ,EAAAA,cAAA,QAAMoD,UAAU,uBACZpD,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,uBAEzB3F,EAAAA,cAACsH,EAAAA,EAAM,CAAC7D,QAAQ,YAAYG,QAASyL,GACjCrP,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,qBAM7C,EAUJ,SAAS0K,GAAU,CAAEC,GAAwB3H,GACzC2H,GAAUC,IACN,MAAM3B,EAASF,MAAMC,KAAK4B,GAE1B,OADA3B,EAAO9K,KAAK6E,GACLiG,CAAM,GAErB,CAEA,SAAS4B,GAAe5B,EAAQ0B,IAC5B,OAAO1B,EAAOhK,KAAI,CAAC6L,EAAKC,KACpB,GAAKD,EACL,OACIzQ,EAAAA,cAACsN,EAAU,CACPpI,IAAKwL,EACL/H,MAAO8H,EACP3B,QAASA,IACLwB,GAAUK,IACN,MAAMC,EAASlC,MAAMC,KAAKgC,GAE1B,OADAC,EAAOF,QAASnN,EACTqN,CAAM,KAGvB,GAGd,CAhCA,M,sGCrFe,SAAS1B,EAAahP,GACjC,OACIF,EAAAA,cAACwO,EAAAA,EAAK,CAACpL,UAAU,WAAWK,QAAQ,SAChCzD,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAIzF,EAAM2F,QAC3B3F,EAAM2Q,KACH7Q,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAA,WACAA,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAIzF,EAAM2Q,QAEhC3Q,EAAMwJ,SACN1J,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAA,WACCE,EAAMwJ,UAEX,KAGhB,C,mNCde,SAASoH,EAAS5Q,GAC7B,MAAOoI,EAAMyI,IAAWC,EAAAA,EAAAA,WAAS,GACjC,OACIhR,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAACsH,EAAAA,EAAM,CACH7D,QAAQ,SACRL,UAAU,iBACVQ,QAASA,IAAMmN,GAAQ,GACvBnB,KAAK,MACL5P,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAG,uBACHhB,OAAQ,CACJsC,UAC4B1D,IAAxBrD,EAAM+Q,IAAIC,WAAmD,OAAxBhR,EAAM+Q,IAAIC,UACzCC,EAAAA,GAAajR,EAAM+Q,IAAIC,WACvB,aAKtBlR,EAAAA,cAACwP,EAAAA,EAAK,CAACC,UAAQ,EAACC,KAAMpH,EAAMqH,OAAQA,IAAMoB,GAAQ,GAAQnB,KAAK,MAC3D5P,EAAAA,cAACwP,EAAAA,EAAMvG,OAAM,CAAC4G,aAAW,GACrB7P,EAAAA,cAACwP,EAAAA,EAAMrG,MAAK,KACRnJ,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAIzF,EAAM+Q,IAAIG,gBAGxCpR,EAAAA,cAACwP,EAAAA,EAAMtG,KAAI,CAAC9F,UAAU,oBAClBpD,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,6BAA6B,IAAE,SAC3BpC,IAAxBrD,EAAM+Q,IAAIC,WAAmD,OAAxBhR,EAAM+Q,IAAIC,UAC1CC,EAAAA,GAAajR,EAAM+Q,IAAIC,WACvB,SACNlR,EAAAA,cAAA,WACAA,EAAAA,cAACiQ,EAAAA,EAAa,KACVjQ,EAAAA,cAAA,QAAMoD,UAAU,iDACXlD,EAAM+Q,IAAII,oBAIvBrR,EAAAA,cAACwP,EAAAA,EAAMY,OAAM,KACTpQ,EAAAA,cAACsH,EAAAA,EAAM,CAAC7D,QAAQ,YAAYG,QAASA,IAAMmN,GAAQ,IAC/C/Q,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,qBAM7C,C,wNCrCe,MAAM2L,UAAgBtR,EAAAA,UAC1BkD,MAAAA,GACH,MAAM+N,EAAM7Q,KAAKF,MAAM+Q,IACjBM,EAAc,IAAIC,KAAKP,EAAIQ,WAC3BC,GAAeH,EAAYI,UAAYH,KAAKI,OAAS,IAErDC,GADc,IAAIL,KAAKP,EAAIa,WAAa,GACbH,UAAYH,KAAKI,OAAS,IACrDnO,OACgBF,IAAlB0N,EAAIC,gBAAoD3N,IAAzB0N,EAAII,iBAC7B,SACAJ,EAAIc,UACF,UACAd,EAAIa,UACF,UACA,OAEd,OACI9R,EAAAA,cAACgS,EAAAA,EAAK,CACF5O,UAAU,UACV8B,IAAK+L,EAAItL,GACTpB,MAAO,CACH0N,SAAU7R,KAAKF,MAAM+H,OAEzB6G,QAASA,KACD1O,KAAKF,MAAM4O,SAAS1O,KAAKF,MAAM4O,QAAQmC,EAAI,GAEnDjR,EAAAA,cAACkS,EAAAA,EAAW,CACRrC,cAAeoB,EAAIa,aAAe1R,KAAKF,MAAM4O,QAC7C1L,UAAW,MAAMK,KAAW,IAC1BwN,EAAItL,GAAG,KAAGsL,EAAIG,aAEpBpR,EAAAA,cAACmS,EAAAA,EAAS,CAAC/O,UAAU,mBAEhB6N,EAAImB,MAAQpS,EAAAA,cAAA,OAAKoD,UAAU,QAAO,SAAE6N,EAAImB,OAAe,KAExDpS,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBACrB3F,EAAAA,cAACmG,EAAAA,EAAc,CACXE,QACIrG,EAAAA,cAACsG,EAAAA,EAAO,CAACX,GAAI,GAAGsL,EAAItL,sBACf4L,EAAYc,oBAGpB,EAAGC,SAAQC,KACRvS,EAAAA,cAAA,OAAAuG,EAAA,GAAUgM,EAAc,CAAED,IAAKA,IAC3BtS,EAAAA,cAACwS,EAAAA,EAAqB,CAClBzM,MAAO2L,EACPe,QAAQ,OACRC,wBAAyB,OAKzC1S,EAAAA,cAAA,WAGAA,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,sBACrB3F,EAAAA,cAACmG,EAAAA,EAAc,CACXE,QACIrG,EAAAA,cAACsG,EAAAA,EAAO,CAACX,GAAI,GAAGsL,EAAItL,wBAChB3F,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,mBACpBsL,EAAI0B,UAAUhN,MAGtB,EAAG2M,SAAQC,KACRvS,EAAAA,cAAA,OAAAuG,EAAA,CAAM+L,IAAKA,GAAuCC,GAC7CtB,EAAI0B,UAAUxN,QAI3BnF,EAAAA,cAAA,WACAA,EAAAA,cAAA,WAECiR,EAAIa,UACD9R,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAIsL,EAAIc,UAAY,oBAAsB,sBAE9C/R,EAAAA,cAACmG,EAAAA,EAAc,CACXE,QACIrG,EAAAA,cAACsG,EAAAA,EAAO,CAACX,GAAI,GAAGsL,EAAItL,sBACf4L,EAAYc,oBAGpB,EAAGC,SAAQC,KACRvS,EAAAA,cAAA,OAAAuG,EAAA,GACQgM,EAAc,CAClBD,IAAKA,IACLtS,EAAAA,cAACwS,EAAAA,EAAqB,CAClBzM,MAAO8L,EACPY,QAAQ,OACRC,wBAAyB,OAKzC1S,EAAAA,cAAA,YAGJ,GAEHiR,EAAI2B,YACD5S,EAAAA,cAACA,EAAAA,SAAc,KACXA,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,wBACrB3F,EAAAA,cAACmG,EAAAA,EAAc,CACXE,QACIrG,EAAAA,cAACsG,EAAAA,EAAO,CAACX,GAAI,GAAGsL,EAAItL,wBAChB3F,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,mBACpBsL,EAAI0B,UAAUhN,MAGtB,EAAG2M,SAAQC,KACRvS,EAAAA,cAAA,OAAAuG,EAAA,CACI+L,IAAKA,GACDC,GACHtB,EAAI2B,YAAazN,QAI9BnF,EAAAA,cAAA,YAGJ,QAIeuD,IAAlB0N,EAAIC,gBAAoD3N,IAAzB0N,EAAII,iBAChCrR,EAAAA,cAAC8Q,EAAQ,CAACG,IAAKA,IAEf,GAIc1N,MAAjB0N,EAAIa,UACD9R,EAAAA,cAAA,OAAKoD,UAAU,cAAcmB,MAAO,CAAE2D,OAAQ,WAC1ClI,EAAAA,cAAC6S,EAAAA,EAAW,CACRzP,UAAU,mDACV0P,UAAW7B,EAAIa,UACfiB,MAC4B,iBAAjB9B,EAAI+B,SACL,GAAG/B,EAAI+B,SAAShE,mBAChBzL,EAEVqO,IAA6B,iBAAjBX,EAAI+B,SAAwB/B,EAAI+B,SAAW,IACvDC,SAAO,EACPxP,QAASA,IAEZwN,EAAIiC,YAAcjC,EAAIa,UACnB9R,EAAAA,cAACsH,EAAAA,EAAM,CACH/C,MAAO,CAAE4O,QAAS,SAClB/P,UAAU,OACVK,QAAQ,SACRG,QAASA,IAAMxD,KAAKF,MAAMkT,SAASnC,IACnCjR,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAK,QAAQtD,UAAU,aAE5C,MAGR,IAKpB,E,yaCvJW,MAAM6L,UAAiBjP,EAAAA,UAO3BC,WAAAA,CAAYC,GACfC,MAAMD,GAAO,KAHTmT,UAAYrT,EAAAA,YAAiC,KAyC7CsT,oBAAc,EApClBlT,KAAKmT,aAAenT,KAAKmT,aAAajT,KAAKF,MAC3CA,KAAKgT,SAAWhT,KAAKgT,SAAS9S,KAAKF,MACnCA,KAAK0O,QAAU1O,KAAK0O,QAAQxO,KAAKF,MAEjCA,KAAKM,MAAQ,CACT8S,KAAMC,EAAAA,QAAeC,eACrB9E,OAAQ,GACR+E,iBAAkB,KAClBC,UAAW,GACX7I,SAAS,EACT8I,UAAW,IAAInJ,IAEvB,CAEQ2F,QAAAA,CAAS1H,GACbvI,KAAKsC,UAAS6N,IACV,MAAMqD,EAAYlF,MAAMC,KAAK4B,EAAUqD,WAKvC,OAJAA,EAAU9P,KAAK6E,GACXvI,KAAKiT,UAAUS,UACf1T,KAAKiT,UAAUS,QAAQC,UAAY,GAEhC,CACHH,YACH,GAET,CAEOjR,iBAAAA,GACH8Q,EAAAA,QAAe5Q,GAAG,aAAczC,KAAKmT,cACrCnT,KAAKmT,cACT,CAEOvQ,oBAAAA,GACHyQ,EAAAA,QAAexQ,eAAe,aAAc7C,KAAKmT,aACrD,CAIOA,YAAAA,GAMH,IAAII,EALAvT,KAAKkT,iBACLU,aAAa5T,KAAKkT,gBAClBlT,KAAKkT,eAAiB,MAItBG,EAAAA,QAAeQ,WAEXN,EADAF,EAAAA,QAAeQ,UAAUC,cAAe,IAAI1C,MAAO0C,aAChCT,EAAAA,QAAeQ,UAAUC,cAAe,IAAI1C,MAAO0C,aAEnD,EAEvB9T,KAAKkT,eAAiBa,YAAW,IAAM/T,KAAKmT,gBAAgB,MAE5DI,EAAmB,KAGvBvT,KAAKsC,SAAS,CACV8Q,KAAMC,EAAAA,QAAeC,eACrB9E,OAAQ6E,EAAAA,QAAe7E,OACvB+E,mBACA5I,SAAS,EACT8I,UAAWJ,EAAAA,QAAeW,qBAElC,CAEA,cAAchB,CAASnC,SACEwC,EAAAA,QAAeY,UAAUpD,EAAItL,IAAIgD,GAASvI,KAAKiQ,SAAS1H,OAK7E8K,EAAAA,QAAea,SAAW,EAC9B,CAEQxF,OAAAA,CAAQmC,GACZwC,EAAAA,QAAec,SAAStD,EAAItL,GAChC,CAEOzC,MAAAA,GACH,IAAK9C,KAAKF,MAAMsU,OAAQ,OAAOpU,KAAKqU,SAEpC,IAKIC,EALAC,EAAY,EAChB,IAAK,MAAM1D,KAAO7Q,KAAKM,MAAM8S,KAAK7O,SAC9BgQ,GAAa1D,EAAIrB,KAYrB,OAPI8E,EADAE,EAAAA,GAAcC,kBAAkB9O,QAAU+O,EAAAA,GAAkBC,QAErDH,EAAAA,GAAcC,kBAAkB9O,QAAU+O,EAAAA,GAAkBE,SAGzDL,EAAY,GAAKvU,KAAKM,MAAMkO,OAAO5J,OAAS,IAItDhF,EAAAA,cAAA,OACIuE,MAAO,CACH0Q,SAAU,QACVC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,KAAM,EACNC,cAAe,OACfC,OAAQ,IAEZvV,EAAAA,cAACwV,EAAAA,EAAG,CACApS,UAAW,eAAcsR,EAAU,GAAK,aACxCnQ,MAAO,CACH+Q,cAAe,OACfH,OAAQ,EACRC,MAAO,GAEXK,QAAS,CACLxN,MAAO,OACPC,OAAQ,OACRwN,EACInK,SAASoK,gBAAgBC,YACzB9N,KAAK+N,IAA2C,GAAvCtK,SAASoK,gBAAgBC,YAAmB,KACrD,GACJE,EACIvK,SAASoK,gBAAgBI,aACe,GAAxCxK,SAASoK,gBAAgBI,aACzB,IAER9D,SAAU,IACV+D,UAAW,GACXxR,SAAU,IACVyR,OAAO,UACPjW,EAAAA,cAAA,OAAKoD,UAAU,kCAAkCkP,IAAKlS,KAAKiT,WACvDrT,EAAAA,cAAA,MAAIoD,UAAU,4CACVpD,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,8BAExBvF,KAAKqU,WAK1B,CAEQA,MAAAA,GACJ,OACIzU,EAAAA,cAAA,OAAKoD,UAAWhD,KAAKF,MAAMsU,OAAS,aAAe,IAC9CpU,KAAKM,MAAMqK,QAAU/K,EAAAA,cAACkK,EAAAA,QAAO,CAACC,KAAK,+BAAkC,GACrE/J,KAAKM,MAAMkT,UAAUhP,KAAI,CAAC6L,EAAKC,KAC5B,GAAKD,EACL,OACIzQ,EAAAA,cAACsN,EAAAA,GAAU,CACPpI,IAAKwL,EACL/H,MAAO8H,EACP3B,QAASA,IACL1O,KAAKsC,UAASiO,IACV,MAAMC,EAASlC,MAAMC,KAAKgC,EAAKiD,WAE/B,OADAhD,EAAOF,QAASnN,EACT,CACHqQ,UAAWhD,EACd,KAGX,IAGTxQ,KAAKM,MAAMkO,OAAO5J,OAAS,EACxBhF,EAAAA,cAACA,EAAAA,SAAc,KACVI,KAAKM,MAAMkO,OAAOhK,KAAI,CAAC+D,EAAO+H,IAEvB1Q,EAAAA,cAAA,OACIkF,IAAKwL,EACLnM,MAAO,CAAE0N,SAAU7R,KAAKF,MAAMsU,OAAS,IAAM,UAC7CxU,EAAAA,cAACsN,EAAAA,GAAU,CAAC3E,MAAOA,OAI/B3I,EAAAA,cAAC+I,EAAAA,EAAI,KACgC,IAAhC3I,KAAKM,MAAMiT,iBACR3T,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,qCACU,MAA/BvF,KAAKM,MAAMiT,iBACX3T,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAG,kCACHhB,OAAQ,CACJuR,QAAS9V,KAAKM,MAAMiT,oBAG5B3T,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,0CAIjC,KACH+I,MAAMC,KAAKvO,KAAKM,MAAM8S,MAClB2C,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAKC,EAAE,KACxBzR,KAAI,EAAE0R,EAAYC,MACf,IAAIC,GAAmB,EACvBD,EAAO3L,SAAQqG,IACPA,EAAIa,YAAW0E,GAAmB,EAAI,IAG9C,MAAMC,EAAsBD,EACtB,CAAEE,UAAW,MAAOC,WAAY,aAChCpT,EAEN,OACIvD,EAAAA,cAACA,EAAAA,SAAc,CAACkF,IAAKoR,GACjBtW,EAAAA,cAAA,OAAKoD,UAAU,mBACXpD,EAAAA,cAAA,OAAKoD,UAAW,OAAOoT,EAAmB,EAAI,kBAC1CxW,EAAAA,cAAA,OAAKuE,MAAOkS,GACRzW,EAAAA,cAACmG,EAAAA,EAAc,CACXE,QAAUnG,GACNF,EAAAA,cAACsG,EAAAA,EAAOC,EAAA,CACJZ,GAAI,oBAAoB2Q,KACpBpW,GACHoW,IAGTtW,EAAAA,cAACA,EAAAA,SAAc,KACVI,KAAKM,MAAMmT,UAAU3I,IAAIoL,IAAanR,MACnC,UAAW,IAAI,IAEnBnF,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAG,8BACHhB,OAAQ,CAAEiS,OAAQL,EAAO3G,QAC3B,QAMjB4G,EACGxW,EAAAA,cAAA,OAAKoD,UAAU,oBACXpD,EAAAA,cAACmG,EAAAA,EAAc,CACXC,UAAU,MACVC,QAASnG,GACLF,EAAAA,cAACsG,EAAAA,EAAOC,EAAA,CAACZ,GAAG,uBAA0BzF,GAClCF,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,uCAG7B3F,EAAAA,cAACsH,EAAAA,EAAM,CACH7D,QAAQ,oBACRG,QAASA,IACL2S,EAAO3L,SAAQqG,IACPA,EAAIa,WACJ2B,EAAAA,QAAec,SAAStD,EAAItL,GAAG,IAG3CvC,UAAU,UACVpD,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAMmQ,EAAAA,SAKnC7W,EAAAA,cAACA,EAAAA,SAAc,OAGtB0O,MAAMC,KAAK4H,GAAQ,EAAE,CAAEtF,KAASA,IAC5BkF,MAAK,CAACC,EAAGC,IAAMA,EAAE1Q,GAAKyQ,EAAEzQ,KACxBf,KAAIqM,GACDjR,EAAAA,cAACsR,EAAAA,EAAO,CACJL,IAAKA,EACLhJ,MAAO7H,KAAKF,MAAM+H,MAClB/C,IAAK+L,EAAItL,GACTmJ,QAAS1O,KAAK0O,QACdsE,SAAU0D,IAAU1W,KAAKgT,SAAS0D,EAAG,MAGpC,IAKzC,EAtRiB7H,EACH8H,aAAe,CACzBvC,QAAQ,E,+SCOhB,MAAMhH,UAAcxN,EAAAA,UAGTC,WAAAA,CAAYC,GACfC,MAAMD,GACNE,KAAK4W,OAAS5W,KAAK4W,OAAO1W,KAAKF,MAE/B6W,QAAQC,IAAIxK,EAAAA,GAAUC,aAEtBvM,KAAKM,MAAQ,CACTyW,MAAM,EACNC,WAAW,EACXC,SAAU,GACVC,SAAU,GACV1I,OAAQF,MAAMC,KAAKjC,EAAAA,GAAUC,aAErC,CAEA,uBAAahK,IAEL0F,OAAOsD,eAAeC,QAAQ,UAC9BoC,EAAAA,EAAoBuJ,aAAazQ,OAASuF,EAAAA,EAAgBC,QACd,WAAT9C,EAAAA,SAE7BpJ,KAAKoX,iBAEnB,CAEA,qBAAcA,GACV,GAAIpX,KAAKF,MAAMuN,UACX,cAGmBzM,EAAAA,EAAaoL,MAAM4B,EAAAA,EAAAA,UAE7B3M,OAASC,EAAAA,EAAWY,IAC7B9B,KAAKsC,SAAS,CACV+U,eAAe,GAG3B,CAEQpH,QAAAA,CAAS1H,GACbvI,KAAKsC,UAAS6N,IACV,MAAM3B,EAASF,MAAMC,KAAK4B,EAAU3B,QAEpC,OADAA,EAAO9K,KAAK6E,GACL,CACHiG,SACH,GAET,CAEO1L,MAAAA,GAMH,GAAI9C,KAAKM,MAAMyW,MAAQnJ,EAAAA,EAAoB0J,WACvC,OAAO1X,EAAAA,cAACkK,EAAAA,QAAO,CAACC,KAAK,kBAGzB,IAAK/J,KAAKkC,QAAQC,WACd,OAAOvC,EAAAA,cAACkK,EAAAA,QAAO,CAACC,KAAK,uBAGzB,MAAMwN,EAAoD,CACtD,CAACC,EAAAA,GAAcC,QAAS7X,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAMoR,EAAAA,GAAUvT,MAAO,CAAE0D,MAAO,WACzE,CAAC2P,EAAAA,GAAcG,SACX/X,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAMsR,EAAAA,GAAWzT,MAAO,CAAE0D,MAAO,WAEtD,CAAC2P,EAAAA,GAAcK,UAAWjY,EAAAA,cAAA,OAAKmI,I,gGAAa+P,IAAI,SAAS3T,MAAO,CAAE0D,MAAO,WACzE,CAAC2P,EAAAA,GAAcO,UACXnY,EAAAA,cAAA,OAAKmI,I,gGAAmB+P,IAAI,eAAe3T,MAAO,CAAE0D,MAAO,WAE/D,CAAC2P,EAAAA,GAAcQ,mBACXpY,EAAAA,cAACwG,EAAAA,EAAe,CAACE,KAAM2R,EAAAA,IAAY9T,MAAO,CAAE0D,MAAO,YAIrDqQ,EAA4D,CAC9DT,OAAQ,UACRE,QAAS,UACTE,cAAU1U,EACV4U,cAAU5U,EACV6U,uBAAmB7U,GAGvB,OACIvD,EAAAA,cAACuY,EAAAA,EAAG,CAACnV,UAAU,UAAUoV,GAAI,EAAGC,GAAI,GAC/BrY,KAAKM,MAAMkO,OAAOhK,KAAI,CAAC6L,EAAKC,KACzB,GAAKD,EACL,OACIzQ,EAAAA,cAACsN,EAAAA,GAAU,CACPpI,IAAKwL,EACL/H,MAAO8H,EACP3B,QAASA,IACL1O,KAAKsC,UAASiO,IACV,MAAMC,EAASlC,MAAMC,KAAKgC,EAAK/B,QAE/B,OADAgC,EAAOF,QAASnN,EACT,CACHqL,OAAQgC,EACX,KAGX,IAGV5Q,EAAAA,cAAC+I,EAAAA,EAAI,CAAC8H,MAAI,GACN7Q,EAAAA,cAAC+I,EAAAA,EAAKI,MAAK,KACPnJ,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,kBAEzB3F,EAAAA,cAAC+I,EAAAA,EAAI,CAAC8H,MAAI,GACN7Q,EAAAA,cAAC+I,EAAAA,EAAKI,MAAK,KACPnJ,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,wBAEzB3F,EAAAA,cAAC0Y,EAAAA,EAAI,CAACtB,UAAWhX,KAAKM,MAAM0W,UAAWuB,SAAU7B,IAAU1W,KAAK4W,OAAOF,EAAG,GACtE9W,EAAAA,cAAC0Y,EAAAA,EAAKE,MAAK,CAACC,UAAU,YAClB7Y,EAAAA,cAAC0Y,EAAAA,EAAKI,MAAK,KACP9Y,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBAEzB3F,EAAAA,cAAC0Y,EAAAA,EAAKK,QAAO,CACTjS,KAAK,OACLkS,YAAY,iBACZC,SAvEJpL,GACpBzN,KAAKsC,SAAS,CAAE2U,SAAUxJ,EAAMqL,OAAOnT,QAuEfA,MAAO3F,KAAKM,MAAM2W,SAClB8B,UAAQ,KAGhBnZ,EAAAA,cAAC0Y,EAAAA,EAAKE,MAAK,CAACC,UAAU,YAClB7Y,EAAAA,cAAC0Y,EAAAA,EAAKI,MAAK,KACP9Y,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,oBAEzB3F,EAAAA,cAAC0Y,EAAAA,EAAKK,QAAO,CACTjS,KAAK,WACLkS,YAAY,WACZC,SAjFJpL,GACpBzN,KAAKsC,SAAS,CAAE4U,SAAUzJ,EAAMqL,OAAOnT,QAiFfA,MAAO3F,KAAKM,MAAM4W,SAClB6B,UAAQ,KAGhBnZ,EAAAA,cAACsH,EAAAA,EAAM,CAACR,KAAK,SAASsS,OAAK,GACvBpZ,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,qBAI/BvF,KAAKkC,QAAQC,YAAY8W,oBAAoBtB,SAC3C3X,KAAKkC,QAAQC,YAAY8W,oBAAoBxB,QAC7CzX,KAAKkC,QAAQC,YAAY8W,oBAAoBlB,UAC7C/X,KAAKkC,QAAQC,YAAY8W,oBAAoBpB,UAC7C7X,KAAKkC,QAAQC,YAAY8W,oBAAoBjB,oBAC7CpY,EAAAA,cAAAA,EAAAA,SAAA,KACIA,EAAAA,cAAA,WACAA,EAAAA,cAAC+I,EAAAA,EAAI,CAAC8H,MAAI,GACN7Q,EAAAA,cAAC+I,EAAAA,EAAKI,MAAK,KACPnJ,EAAAA,cAAC0F,EAAAA,EAAgB,CAACC,GAAG,sBAExBjB,OAAO4U,KAAKlZ,KAAKkC,QAAQC,WAAW8W,oBAAsB,CAAC,GAAGzU,KAC3D2H,IACI,MAAMgN,EAASjB,EAAe/L,GAC9B,OACIvM,EAAAA,cAACsH,EAAAA,EAAM,CACHpC,IAAKqH,EACL6M,OAAK,EACL7U,MAAOgV,EAAS,CAAEC,WAAYD,QAAWhW,EACzCK,QAASA,KACAxD,KAAKqZ,WAAWlN,EACxB,GACAoL,EAAUpL,GACXvM,EAAAA,cAAA,QAAMoD,UAAU,QACZpD,EAAAA,cAAC0F,EAAAA,EAAgB,CACbC,GAAG,cACHhB,OAAQ,CAAE4H,eAGb,OAUjD,CAEA,gBAAckN,CAAWlN,GACrB,IAAKnM,KAAKkC,QAAQC,WAMd,YALAnC,KAAKiQ,SACD,IAAIvE,EAAAA,GAAcC,EAAAA,GAAUwB,SAAU,CAClCtB,QAASC,MAAM,uCAM3B,MAAMwN,EAAa,IAAIC,WAAW,IAClCtR,OAAOuR,OAAOC,gBAAgBH,GAC9B,MAAMhZ,EAAQgO,MAAMC,KAAK+K,GAAYI,GAAOA,EAAI9K,SAAS,IAAI+K,SAAS,EAAG,OAAMC,KAAK,IAEpF,IAAI7N,EAEJ,MAAM2K,EAAImD,mBAEV,OAAQ1N,GACJ,KAAKqL,EAAAA,GAAcG,QACf5L,EAAM,yEAAyE2K,EAC3E1W,KAAKkC,QAAQC,WAAW8W,mBAAmBtB,QAAQmC,kCAC7BpD,EAAEpW,KAExBN,KAAKkC,QAAQC,WAAW8W,mBAAmBtB,QAAQoC,cAEnDhO,EAAM,GAAGA,kBAAoB2K,EACzB1W,KAAKkC,QAAQC,WAAW8W,mBAAmBtB,QAAQoC,gBAI3D,MAEJ,KAAKvC,EAAAA,GAAcC,OACf1L,EAAM,sDAAsD2K,EACxD1W,KAAKkC,QAAQC,WAAW8W,mBAAmBxB,OAAOqC,0BACpCpD,EACd1W,KAAKkC,QAAQC,WAAW8W,mBAAmBxB,OAAOsC,sBAC3CrD,EAAEpW,wBACb,MAEJ,KAAKkX,EAAAA,GAAcO,SACfhM,EAAM,GAAG/L,KAAKkC,QAAQC,WAAW8W,mBAAmBlB,SAC/CiC,uEAAwEtD,EACzE1W,KAAKkC,QAAQC,WAAW8W,mBAAmBlB,SAAS+B,gCAChCpD,EAAEpW,mBAAuBoW,EAC7C1W,KAAKkC,QAAQC,WAAW8W,mBAAmBlB,SAASgC,eAExD,MAEJ,KAAKvC,EAAAA,GAAcK,SACf9L,EAAM,+EAA+E2K,EACjF1W,KAAKkC,QAAQC,WAAW8W,mBAAmBpB,SAASiC,mBAC7CpD,EAAEpW,mBAAuBoW,EAChC1W,KAAKkC,QAAQC,WAAW8W,mBAAmBpB,SAASkC,eAExD,MAEJ,KAAKvC,EAAAA,GAAcQ,kBACfjM,EAAM,GAAG/L,KAAKkC,QAAQC,WAAW8W,mBAAmBjB,kBAC/CgC,2DAA4DtD,EAC7D1W,KAAKkC,QAAQC,WAAW8W,mBAAmBjB,kBAAkB8B,iCACxCpD,EAAEpW,mBAAuBoW,EAC9C1W,KAAKkC,QAAQC,WAAW8W,mBAAmBjB,kBAAkB+B,eAMzE,MAAME,EAAY5O,KAAKC,MACnBrD,OAAOsD,eAAeC,QAAQ,UAAY,MAW9C,OATAyO,EAAU3Z,GAAS,CACf6L,SAAUA,EACVJ,IAAK/L,KAAKF,MAAMqF,SAASC,UAG7B6C,OAAOsD,eAAe2O,QAAQ,QAAS7O,KAAK8O,UAAUF,IAEtDhS,OAAO9C,SAAS8I,KAAOlC,EAEhB,IAAIqO,SAAQC,GAAWA,KAClC,CAEA,YAAczD,CAAOnJ,GACjBA,EAAM6M,iBACNta,KAAKsC,SAAS,CACVyU,MAAM,IAEV,MAAMpV,QAAiBf,EAAAA,EAAaoL,MAAM,CACtCtF,KAAMuF,EAAAA,EAAgBsO,SACtBC,SAAUxa,KAAKM,MAAM2W,SACrBC,SAAUlX,KAAKM,MAAM4W,WAErBvV,EAASV,MAAQC,EAAAA,EAAWC,QAC5BnB,KAAKsC,SAAS,CACVyU,MAAM,IAEV/W,KAAKiQ,SAAStO,EAAS4G,OAE/B,EAEJ6E,EAAMjG,YAAcC,EAAAA,EACpB,OAAeC,EAAAA,EAAAA,GAAW+F,E,oEC3T1B,MAAM1K,UAAwB+X,EAAAA,aAGnB5a,WAAAA,GACHE,QAAQ,KAHJ2a,YAAa,EAIjBzS,OAAO0S,aAAe3a,KACtBA,KAAK4a,cAAgB5a,KAAK4a,cAAc1a,KAAKF,MAE7CwC,EAAAA,EAAWqY,QAAQ7a,KAAK4a,eACxB5a,KAAK4a,gBAAgBE,MAAMjE,QAAQtO,OAGnCsO,QAAQkE,KAAK,oBACb,MAAMC,EAAS,IAAI1Q,IAEnB,IAAK,MAAOvF,EAAMa,KAAQtB,OAAO2W,QAAQC,EAAAA,IACrCtV,EAAIrF,OAAS,GAEbya,EAAOvQ,IAAI7E,EAAIb,KAAOa,GAEtBnF,EAAAA,GAAcsE,GAAQa,EAG1B,IAAK,MAAM9B,KAASQ,OAAOC,OAAOZ,EAAAA,IAAY,CAC1C,IAAKG,EAAM0I,SAAU,SAErB,MAAM/H,EAAMuW,EAAOlQ,IAAIhH,EAAM0I,UAC7B,GAAK/H,GAQL,GAFAA,EAAIlE,OAAQmD,KAAKI,GAEbA,EAAM+B,UAAW,CACjB,GAAIpB,EAAIC,OAAQ,CACZmS,QAAQtO,MAAM,2BAA4B9D,EAAIC,OAAQZ,GACtD,QACJ,CACAW,EAAIC,OAASZ,CACjB,OAbI+S,QAAQtO,MAAM,6BAA8BzE,EAcpD,CACA+S,QAAQC,IAAI,oBAAqBkE,GACjCnE,QAAQsE,QAAQ,mBACpB,CAEA,mBAAaP,GACT,GAAI5a,KAAK0a,WAEL,YADA7D,QAAQC,IAAI,sBAIhB9W,KAAK0a,YAAa,EAElB,MAAMU,EAAO,GACP7a,EAASP,KAAKuK,oBAAmB,GAEvC,IAAK,MAAMzG,KAASvD,EAChBuD,EAAMa,gBAAaxB,EACfW,EAAMuX,aACND,EAAK1X,KACDI,EAAMuX,eAAeC,MAAKC,IACtBzX,EAAMa,WAAa4W,CAAI,KAI/BzX,EAAMa,YAAa,QAIrByV,QAAQoB,IAAIJ,GAElBpb,KAAKgH,KAAK,UAAWhH,KAAKuK,oBAAmB,IAC7C,MAAMkR,EAAezb,KAAKuK,oBAAmB,GAK7C,OAJAvK,KAAKgH,KAAK,aAAcyU,GACxBzb,KAAK0a,YAAa,EAElB7D,QAAQC,IAAI,mBAAoB2E,SACnBzb,KAAK2C,WACtB,CAEQ+Y,YAAAA,GACJ,OAAO,IAAItB,SAAcC,IAChBra,KAAK0a,WAIV1a,KAAKyC,GAAG,WAAW,KACf4X,GAAS,IAJTA,GAKF,GAEV,CAEA,eAAa1X,CAAU4Y,GAAO,GAG1B,aAFMvb,KAAK0b,eAEJ1b,KAAKuK,mBAAmBgR,EACnC,CAEOhR,kBAAAA,CAAmBgR,GAAO,GAC7B,MAAMI,EAA2B,GAEjC,IAAK,MAAM/V,KAAOtB,OAAOC,OAAOZ,EAAAA,IAExBiC,EAAIyV,eAAiBzV,EAAIjB,YAAc4W,GAE3CI,EAAQjY,KAAKkC,GAGjB,OAAO+V,CACX,EAGJ,QAAmBjZ,C,kMChFnB,SAASkZ,EAAW5G,GAChB,OAAO6G,UACH,IAAKjO,EAAAA,EAAoB0J,WAAY,OAAO,EAC5C,MAAM3V,QAAiBZ,EAAAA,EAAWC,iBAElC,OAAIW,EAASV,MAAQC,EAAAA,EAAWY,QAClBP,EAAAA,EAAAA,GAAqBI,EAASN,SAASya,qBAAuB9G,EAEhE,CAEpB,CAEA,SAAS+G,EAAqB/G,GAC1B,OAAO6G,UACH,IAAKjO,EAAAA,EAAoB0J,WAAY,OAAO,EAC5C,MAAM3V,QAAiBZ,EAAAA,EAAWC,iBAElC,OAAIW,EAASV,MAAQC,EAAAA,EAAWY,QAClBP,EAAAA,EAAAA,GAAqBI,EAASN,SAAS2a,sBAAwBhH,EAEjE,CAEpB,CAIA,MAEMrR,EAAmC,CACrCC,KAAM,CACFmB,KAAM,cACNjB,MAAO,IACP4G,KAAM,OAENoC,OAAO,EACPzH,aAAa,EAEbS,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,OACV3G,WAAW,GAEfqW,eAAgB,CACZnX,KAAM,wBACNjB,MAAO,oBACP4G,KAAM,kBAENoC,OAAO,EACPzH,aAAa,EAEbgW,aAAcU,EAAqBI,EAAAA,GAAsBC,QAEzDtW,eAAe,EAEf0G,SAAU,WACV3G,WAAW,GAEfwW,aAAc,CACVtX,KAAM,sBACNjB,MAAO,cACP4G,KAAM,gBAENoC,OAAO,EACPzH,aAAa,EAEbgW,aAAcU,EAAqBI,EAAAA,GAAsBG,KAAOH,EAAAA,GAAsBI,MAEtFzW,eAAe,EACfmW,SAAU,MAEVzP,SAAU,WACV3G,WAAW,GAEf2W,aAAc,CACVzX,KAAM,sBACNjB,MAAO,mCACP4G,KAAM,wBAEN,QAAI7G,GACA,YAAwCV,IAAjCmJ,EAAUmQ,mBACX,mBAAmBnQ,EAAUmQ,2BACatZ,IAAtCmJ,EAAUoQ,wBACJ,GAAGpQ,EAAUoQ,2BACb,KAET/Y,EAAU0Y,aAAaxY,MAAQF,EAAU0Y,aAAavY,KACjE,EAEAgJ,OAAO,EACPzH,aAAa,EAEbS,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,YAEdmQ,aAAc,CACV5X,KAAM,sBACNjB,MAAO,mBACP4G,KAAM,gBAENoC,OAAO,EACPzH,aAAa,EAEbS,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,YAEdoQ,SAAU,CACN7X,KAAM,qBACNjB,MAAO,UACP4G,KAAM,YAENoC,OAAO,EACPzH,aAAa,EAEbS,eAAe,EACfmW,SAAU,OAEVzP,SAAU,OACV3G,WAAW,GAEfgX,SAAU,CACN9X,KAAM,kBACNjB,MAAO,oCAGP,QAAID,GACA,YAAoCV,IAA7BmJ,EAAUwQ,eACX,oBAAoBxQ,EAAUwQ,uBACI3Z,IAA9BmJ,EAAUyQ,gBAAgC,GAAGzQ,EAAUyQ,mBAAqB,KAE/EpZ,EAAUiZ,SAAS/Y,MAAQF,EAAUiZ,SAAS9Y,KACzD,EACA4G,KAAM,YAENoC,OAAO,EACPzH,aAAa,EAEbS,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,QAEdwQ,WAAY,CACRjY,KAAM,oBACNjB,MAAO,iBAEPD,KAAM,iBACN6G,KAAM,cAENoC,OAAO,EACPzH,aAAa,EAEbgW,aAAcO,EAAWna,EAAAA,GAAqBwb,YAE9CnX,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,QAEd0Q,MAAO,CACHnY,KAAM,eACNjB,MAAO,UACP4G,KAAM,iBAENoC,OAAO,EACPzH,aAAa,EAEbgW,aAAcO,EACVna,EAAAA,GAAqBC,cACjBD,EAAAA,GAAqB0b,aACrB1b,EAAAA,GAAqB2b,eAG7BtX,eAAe,EACfmW,SAAU,QAEVzP,SAAU,QACV3G,WAAW,GAEfQ,aAAc,CACVtB,KAAM,sBACNjB,MAAO,uBACP4G,KAAM,eAEN7G,KAAM,iBAENiJ,OAAO,EACPzH,aAAa,EAEbgW,aAAcO,EACVna,EAAAA,GAAqBC,cAAgBD,EAAAA,GAAqB2b,eAE9DtX,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,SAEd6Q,WAAY,CACRtY,KAAM,oBACNjB,MAAO,sBACPD,KAAM,eACN6G,KAAM,aAENoC,OAAO,EACPzH,aAAa,EAEbgW,aAAcO,EAAWna,EAAAA,GAAqB0b,cAC9CrX,eAAe,EACfmW,cAAU9Y,EAEVqJ,SAAU,QAEVS,aAAa,GAEjBlG,OAAQ,CACJhC,KAAM,gBACNjB,MAAO,4BACPD,KAAM,iBACN6G,KAAM,iBAENoC,OAAO,EACPzH,aAAa,EAEbgW,aAAcO,EAAWna,EAAAA,GAAqB6b,iBAE9CxX,eAAe,EACfmW,SAAU,OAEdnV,OAAQ,CACJ/B,KAAM,gBACNjB,MAAO,WACP4G,KAAM,gBAENoC,OAAO,EACPzH,aAAa,EAEbsH,WAAW,EAEX7G,eAAe,EACfmW,SAAU,QAEdsB,MAAO,CACHxY,KAAM,eACNjB,MAAO,UACP4G,KAAM,QAENoC,OAAO,EACPzH,aAAa,EAEbsH,WAAW,EAEX7G,eAAe,GAEnB0X,MAAO,CACHzY,KAAM,eACNjB,MAAO,qBACP4G,KAAM,QAENoC,OAAO,EACPzH,aAAa,EAEbsH,WAAW,EAEX7G,eAAe,GAEnBe,KAAM,CACF9B,KAAM,cACNjB,MAAO,QACP4G,KAAM,OAENoC,OAAO,EACPzH,aAAa,EAEbsH,WAAW,EAEX7G,eAAe,EACfmW,SAAU,cAEVzP,cAAUrJ,EACV0C,WAAW,IAkBNqV,EAAkD,CAC3DtX,KAAM,CACFmB,KAAM,QAEV0Y,SAAU,CACN1Y,KAAM,YAEV3D,KAAM,CACF2D,KAAM,QAEVmY,MAAO,CACHnY,KAAM,UAKDtE,EAA+E,CAAC,EAEhF6L,EAAY,CACrBwQ,oBAAgB3Z,EAChB4Z,qBAAiB5Z,EAEjBsZ,wBAAoBtZ,EACpBuZ,6BAAyBvZ,EAEzBua,sBAAkBva,EAClBwa,iBAAaxa,EACbya,mBAAeza,EACf0a,kBAAc1a,EACd2a,eAAgB,IAAIxT,IAEpBiC,YAAa,G,uBC/XjB,IAAI/H,EAAM,CACT,eAAgB,CACf,KACA,KACA,MAED,mBAAoB,CACnB,KACA,KACA,MAED,iBAAkB,CACjB,IACA,KACA,KACA,KACA,KACA,KAED,qBAAsB,CACrB,IACA,KACA,KACA,KACA,KACA,KAED,mBAAoB,CACnB,KACA,KACA,MAED,uBAAwB,CACvB,KACA,KACA,MAED,mBAAoB,CACnB,KACA,MAED,uBAAwB,CACvB,KACA,MAED,kBAAmB,CAClB,KACA,KACA,MAED,sBAAuB,CACtB,KACA,KACA,MAED,SAAU,CACT,IACA,KAED,aAAc,CACb,IACA,KAED,SAAU,CACT,KACA,KACA,MAED,aAAc,CACb,KACA,KACA,MAED,oBAAqB,CACpB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,wBAAyB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,2BAA4B,CAC3B,KACA,KACA,KACA,KACA,MAED,+BAAgC,CAC/B,KACA,KACA,KACA,KACA,MAED,yBAA0B,CACzB,KACA,KACA,MAED,6BAA8B,CAC7B,KACA,KACA,MAED,6BAA8B,CAC7B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,iCAAkC,CACjC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,yBAA0B,CACzB,KACA,KACA,KACA,KACA,KACA,MAED,6BAA8B,CAC7B,KACA,KACA,KACA,KACA,KACA,MAED,wBAAyB,CACxB,KACA,KACA,KACA,KACA,MAED,4BAA6B,CAC5B,KACA,KACA,KACA,KACA,MAED,sCAAuC,CACtC,KACA,KACA,KACA,KACA,MAED,0CAA2C,CAC1C,KACA,KACA,KACA,KACA,MAED,6BAA8B,CAC7B,KACA,KACA,MAED,iCAAkC,CACjC,KACA,KACA,MAED,6BAA8B,CAC7B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,iCAAkC,CACjC,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,yBAA0B,CACzB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,6BAA8B,CAC7B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,0BAA2B,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,8BAA+B,CAC9B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAED,kBAAmB,CAClB,KACA,MAED,sBAAuB,CACtB,KACA,MAED,kBAAmB,CAClB,KACA,KACA,MAED,sBAAuB,CACtB,KACA,KACA,MAED,UAAW,CACV,MAED,cAAe,CACd,MAED,UAAW,CACV,KACA,MAED,cAAe,CACd,KACA,MAED,gBAAiB,CAChB,KACA,MAED,oBAAqB,CACpB,KACA,MAED,cAAe,CACd,KACA,KACA,KACA,MAED,kBAAmB,CAClB,KACA,KACA,KACA,MAED,cAAe,CACd,KACA,KACA,MAED,kBAAmB,CAClB,KACA,KACA,OAGF,SAASuZ,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE1Z,EAAKwZ,GAC9B,OAAO5D,QAAQC,UAAUiB,MAAK,WAC7B,IAAI5E,EAAI,IAAI5K,MAAM,uBAAyBkS,EAAM,KAEjD,MADAtH,EAAEzV,KAAO,mBACHyV,CACP,IAGD,IAAIyH,EAAM3Z,EAAIwZ,GAAMzY,EAAK4Y,EAAI,GAC7B,OAAO/D,QAAQoB,IAAI2C,EAAIC,MAAM,GAAG5Z,IAAIyZ,EAAoBvH,IAAI4E,MAAK,WAChE,OAAO2C,EAAoB1Y,EAC5B,GACD,CACAwY,EAAoB7E,KAAO,WAAa,OAAO5U,OAAO4U,KAAK1U,EAAM,EACjEuZ,EAAoBxY,GAAK,KACzB8Y,EAAOC,QAAUP,C","sources":["webpack://tgstation-server-control-panel/./src/components/AppNavbar.tsx","webpack://tgstation-server-control-panel/./src/components/Logo.tsx","webpack://tgstation-server-control-panel/./src/components/ReportIssue.tsx","webpack://tgstation-server-control-panel/./src/components/utils/ErrorBoundary.tsx","webpack://tgstation-server-control-panel/./src/components/utils/Reload.tsx","webpack://tgstation-server-control-panel/./src/Router.tsx","webpack://tgstation-server-control-panel/./src/InnerApp.tsx","webpack://tgstation-server-control-panel/./src/components/utils/AccessDenied.tsx","webpack://tgstation-server-control-panel/./src/components/utils/ErrorAlert.tsx","webpack://tgstation-server-control-panel/./src/components/utils/GenericAlert.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobError.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobCard.tsx","webpack://tgstation-server-control-panel/./src/components/utils/JobsList.tsx","webpack://tgstation-server-control-panel/./src/components/views/Login.tsx","webpack://tgstation-server-control-panel/./src/utils/RouteController.ts","webpack://tgstation-server-control-panel/./src/utils/routes.ts","webpack://tgstation-server-control-panel/./src/components/views/ lazy ^\\.\\/.*$ namespace object"],"sourcesContent":["import \"./AppNavbar.css\";\n\nimport { faExclamationCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { NavDropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { SemVer } from \"semver\";\n\nimport AdminClient from \"../ApiClient/AdminClient\";\nimport { AdministrationRights } from \"../ApiClient/generatedcode/generated\";\nimport { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../ApiClient/ServerClient\";\nimport UserClient from \"../ApiClient/UserClient\";\nimport LoginHooks from \"../ApiClient/util/LoginHooks\";\nimport { GeneralContext, UnsafeGeneralContext } from \"../contexts/GeneralContext\";\nimport { hasAdminRight, matchesPath, resolvePermissionSet } from \"../utils/misc\";\nimport RouteController from \"../utils/RouteController\";\nimport { AppCategories, AppRoute, AppRoutes } from \"../utils/routes\";\n\ninterface IProps extends RouteComponentProps {\n    category?: {\n        name: string;\n        key: string;\n    };\n    loggedIn: boolean;\n}\n\ninterface IState {\n    //so we dont actually use the routes but it allows us to make react update the component\n    routes: AppRoute[];\n    categories: typeof AppCategories;\n    updateAvailable: boolean;\n}\n\nclass AppNavbar extends React.Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.logoutClick = this.logoutClick.bind(this);\n        this.loginSuccess = this.loginSuccess.bind(this);\n        this.logout = this.logout.bind(this);\n        this.refresh = this.refresh.bind(this);\n\n        this.state = {\n            routes: [],\n            categories: AppCategories,\n            updateAvailable: false\n        };\n    }\n\n    private loginSuccess(): void {\n        void this.checkShowServerUpdateIcon();\n    }\n\n    private async checkShowServerUpdateIcon(): Promise<void> {\n        await ServerClient.wait4Init();\n        const userResponse = await UserClient.getCurrentUser();\n        if (userResponse.code === StatusCode.ERROR) return;\n\n        const user = userResponse.payload;\n\n        const permissionSet = resolvePermissionSet(user);\n        if (hasAdminRight(permissionSet, AdministrationRights.ChangeVersion)) {\n            const response = await AdminClient.getAdminInfo();\n            if (response.code == StatusCode.OK) {\n                const latestVersion = new SemVer(response.payload.latestVersion);\n                const currentVersion = new SemVer(this.context.serverInfo!.version);\n\n                const updateAvailable = latestVersion.compare(currentVersion) === 1;\n\n                this.setState({\n                    updateAvailable\n                });\n            }\n        }\n    }\n\n    private logout() {\n        this.setState({\n            updateAvailable: false\n        });\n    }\n\n    private refresh(routes: Array<AppRoute>) {\n        this.setState({\n            routes\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        LoginHooks.on(\"loginSuccess\", this.loginSuccess);\n        ServerClient.on(\"logout\", this.logout);\n\n        this.setState({\n            routes: await RouteController.getRoutes()\n        });\n\n        RouteController.on(\"refresh\", this.refresh);\n    }\n\n    public componentWillUnmount(): void {\n        LoginHooks.removeListener(\"loginSuccess\", this.loginSuccess);\n        ServerClient.removeListener(\"logout\", this.logout);\n        RouteController.removeListener(\"refresh\", this.refresh);\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <React.Fragment>\n                <Navbar\n                    className=\"shadow-lg\"\n                    expand={this.props.loggedIn ? \"lg\" : undefined}\n                    collapseOnSelect\n                    variant=\"dark\"\n                    bg=\"primary\">\n                    <Navbar.Brand\n                        onClick={() => {\n                            this.props.history.push(AppRoutes.home.link ?? AppRoutes.home.route, {\n                                reload: true\n                            });\n                        }}\n                        className=\"mr-auto\">\n                        {this.renderVersion()}\n                    </Navbar.Brand>\n                    <Navbar.Toggle className=\"mr-2\" aria-controls=\"responsive-navbar-nav\" />\n                    <Navbar.Collapse className=\"text-right mr-2\" style={{ minWidth: \"0px\" }}>\n                        <Nav>\n                            {!this.props.loggedIn ? (\n                                <Nav.Item>\n                                    <Nav.Link\n                                        onClick={() => {\n                                            this.props.history.push(\n                                                AppRoutes.home.link ?? AppRoutes.home.route,\n                                                { reload: true }\n                                            );\n                                        }}\n                                        active={true}>\n                                        <FormattedMessage id=\"routes.login\" />\n                                    </Nav.Link>\n                                </Nav.Item>\n                            ) : (\n                                Object.values(this.state.categories).map(cat => {\n                                    if (!cat.leader.cachedAuth) return;\n                                    return cat.routes.length == 1 ? (\n                                        <Nav.Item key={cat.name}>\n                                            <Nav.Link\n                                                onClick={() => {\n                                                    this.props.history.push(\n                                                        cat.leader.link ?? cat.leader.route,\n                                                        { reload: true }\n                                                    );\n                                                }}\n                                                active={matchesPath(\n                                                    this.props.location.pathname,\n                                                    cat.leader.route,\n                                                    !cat.leader.navbarLoose\n                                                )}>\n                                                <FormattedMessage id={cat.leader.name} />\n                                            </Nav.Link>\n                                        </Nav.Item>\n                                    ) : (\n                                        <Nav.Item key={cat.name}>\n                                            <NavDropdown\n                                                id={cat.name + \"-dropdown\"}\n                                                title={<FormattedMessage id={cat.leader.name} />}>\n                                                {Object.values(cat.routes).filter(\n                                                    value => value.cachedAuth\n                                                ).length >= 2 ? (\n                                                    <React.Fragment>\n                                                        <NavDropdown.Item\n                                                            onClick={() => {\n                                                                this.props.history.push(\n                                                                    cat.leader.link ??\n                                                                        cat.leader.route,\n                                                                    { reload: true }\n                                                                );\n                                                            }}\n                                                            active={matchesPath(\n                                                                this.props.location.pathname,\n                                                                cat.leader.route,\n                                                                true\n                                                            )}>\n                                                            <FormattedMessage\n                                                                id={cat.leader.name}\n                                                            />\n                                                        </NavDropdown.Item>\n                                                        {cat.routes.map(val => {\n                                                            if (val.catleader) return; //we already display this but differently\n                                                            if (!val.cachedAuth) return;\n                                                            if (!val.visibleNavbar) return;\n\n                                                            return (\n                                                                <NavDropdown.Item\n                                                                    key={val.name}\n                                                                    onClick={() => {\n                                                                        this.props.history.push(\n                                                                            val.link ?? val.route,\n                                                                            {\n                                                                                reload: true\n                                                                            }\n                                                                        );\n                                                                    }}\n                                                                    active={matchesPath(\n                                                                        this.props.location\n                                                                            .pathname,\n                                                                        val.route,\n                                                                        !val.navbarLoose\n                                                                    )}>\n                                                                    <FormattedMessage\n                                                                        id={val.name}\n                                                                    />\n                                                                </NavDropdown.Item>\n                                                            );\n                                                        })}\n                                                    </React.Fragment>\n                                                ) : (\n                                                    \"\"\n                                                )}\n                                            </NavDropdown>\n                                        </Nav.Item>\n                                    );\n                                })\n                            )}\n                        </Nav>\n                        {this.state.updateAvailable ? (\n                            <OverlayTrigger\n                                placement=\"right\"\n                                overlay={props => (\n                                    <Tooltip id=\"tgs-updated-tooltip\" {...props}>\n                                        <FormattedMessage id=\"navbar.update\" />\n                                    </Tooltip>\n                                )}>\n                                <h3>\n                                    <FontAwesomeIcon\n                                        className=\"tgs-update-notification\"\n                                        onClick={() =>\n                                            this.props.history.push(\n                                                AppRoutes.admin_update.link ??\n                                                    AppRoutes.admin_update.route,\n                                                { reload: true }\n                                            )\n                                        }\n                                        icon={faExclamationCircle}\n                                    />\n                                </h3>\n                            </OverlayTrigger>\n                        ) : (\n                            <React.Fragment />\n                        )}\n                        {this.renderUser()}\n                    </Navbar.Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n\n    private renderVersion(): React.ReactNode {\n        if (!this.context.serverInfo?.version) {\n            return <FormattedMessage id=\"loading.loading\" />;\n        }\n\n        return (\n            <React.Fragment>\n                <FormattedMessage id=\"generic.appname\" />\n                {\" v\"}\n                {this.context.serverInfo.version}\n            </React.Fragment>\n        );\n    }\n\n    private renderUser(): React.ReactNode {\n        if (!this.props.loggedIn)\n            return (\n                <React.Fragment>\n                    <Button\n                        onClick={() => {\n                            this.props.history.push(\n                                AppRoutes.config.link ?? AppRoutes.config.route,\n                                { reload: true }\n                            );\n                        }}\n                        variant=\"primary\">\n                        <FontAwesomeIcon icon=\"cogs\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            this.props.history.push(AppRoutes.info.link ?? AppRoutes.info.route, {\n                                reload: true\n                            });\n                        }}\n                        variant=\"primary\">\n                        <FontAwesomeIcon icon=\"info-circle\" />\n                    </Button>\n                </React.Fragment>\n            );\n\n        return (\n            <Nav.Item className=\"ml-auto\">\n                <Dropdown>\n                    <Dropdown.Toggle\n                        id=\"user-dropdown\"\n                        type=\"button\"\n                        variant=\"primary\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\">\n                        {this.context.user ? (\n                            this.context.user.name\n                        ) : (\n                            <FormattedMessage id=\"loading.loading\" />\n                        )}\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu alignRight className=\"text-right\">\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.info.link ?? AppRoutes.info.route,\n                                    { reload: true }\n                                );\n                            }}>\n                            <FormattedMessage id=\"routes.info\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.push(\n                                    AppRoutes.config.link ?? AppRoutes.config.route,\n                                    { reload: true }\n                                );\n                            }}>\n                            <FormattedMessage id=\"routes.config\" />\n                        </Dropdown.Item>\n                        {AppRoutes.passwd.cachedAuth ? (\n                            <Dropdown.Item\n                                onClick={() => {\n                                    this.props.history.push(\n                                        AppRoutes.passwd.link ?? AppRoutes.passwd.route,\n                                        { reload: true }\n                                    );\n                                }}>\n                                <FormattedMessage id=\"routes.passwd\" />\n                            </Dropdown.Item>\n                        ) : (\n                            \"\"\n                        )}\n                        <Dropdown.Item\n                            onClick={() => {\n                                ServerClient.emit(\"purgeCache\");\n                                this.props.history.replace(this.props.location.pathname, {\n                                    reload: true\n                                });\n                            }}>\n                            <FormattedMessage id=\"navbar.purgecache\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                            onClick={() => {\n                                this.props.history.replace(this.props.location.pathname, {\n                                    reload: true\n                                });\n                            }}>\n                            <FormattedMessage id=\"navbar.refresh\" />\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={this.logoutClick}>\n                            <FormattedMessage id=\"navbar.logout\" />\n                        </Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            </Nav.Item>\n        );\n    }\n\n    private logoutClick(): void {\n        ServerClient.logout();\n    }\n}\nAppNavbar.contextType = GeneralContext;\nexport default withRouter(AppNavbar);\n","import React from \"react\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport logo from \"../images/logo.svg\";\n\ntype IProps = object;\n\ntype IState = object;\n\nexport default class Logo extends React.Component<IProps, IState> {\n    public render(): React.ReactNode {\n        let memeSelector = 4;\n        return (\n            <OverlayTrigger\n                placement=\"left\"\n                onToggle={showing => {\n                    if (showing) {\n                        memeSelector = Math.round(Math.random() * 100) % 26;\n                    }\n                }}\n                overlay={props => (\n                    <Tooltip id=\"report-issue-tooltip\" {...props}>\n                        <FormattedMessage id={`view.meme_${memeSelector}`} />\n                    </Tooltip>\n                )}>\n                <img className=\"nowrap corner-logo\" width={50} height={50} src={logo} />\n            </OverlayTrigger>\n        );\n    }\n}\n","import { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = object;\n\ntype IState = object;\n\nexport default class ReportIssue extends React.Component<IProps, IState> {\n    public render(): React.ReactNode {\n        return (\n            <OverlayTrigger\n                placement=\"top\"\n                overlay={props => (\n                    <Tooltip id=\"report-issue-tooltip\" {...props}>\n                        <FormattedMessage id=\"view.report\" />\n                    </Tooltip>\n                )}>\n                <Button\n                    className=\"nowrap report-issue\"\n                    onClick={() =>\n                        window.open(\n                            \"https://github.com/tgstation/tgstation-server-webpanel/issues/new\"\n                        )\n                    }>\n                    <FontAwesomeIcon icon={faExclamationTriangle} />\n                </Button>\n            </OverlayTrigger>\n        );\n    }\n}\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\ntype IProps = RouteComponentProps;\ninterface IState {\n    error?: Error;\n    errorInfo?: React.ErrorInfo;\n}\n\nclass ErrorBoundary extends React.Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {};\n    }\n\n    public componentDidUpdate(prevProps: IProps): void {\n        if (this.props.location.key !== prevProps.location.key) {\n            this.setState({\n                error: undefined,\n                errorInfo: undefined\n            });\n        }\n    }\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.setState({\n            error,\n            errorInfo\n        });\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.error) {\n            return (\n                <Container className=\"mt-5 mb-5\">\n                    <Card className=\"bg-transparent\" border=\"danger\">\n                        <Card.Header className=\"bg-danger\">\n                            <FormattedMessage id=\"error.somethingwentwrong\" />\n                        </Card.Header>\n                        <Card.Body>\n                            <Card.Title>\n                                {this.state.error.name}: {this.state.error.message}\n                            </Card.Title>\n                            <Card.Text as={\"pre\"} className=\"bg-transparent text-danger\">\n                                <code>\n                                    {`Webpanel Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nStack trace: ${\n                                        this.state.errorInfo?.componentStack ??\n                                        \"Unable to get stack info\"\n                                    }`}\n                                </code>\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            );\n        } else {\n            return this.props.children;\n        }\n    }\n}\n\nexport default withRouter(ErrorBoundary);\n","import { Component, ReactNode } from \"react\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\ntype IProps = RouteComponentProps<\n    Record<string, string>,\n    {\n        statusCode?: number;\n    },\n    { reload?: boolean }\n>;\ninterface IState {\n    clear: boolean;\n}\n\nclass Reload extends Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {\n            clear: false\n        };\n    }\n    public componentDidUpdate(prevProps: IProps): void {\n        if (this.state.clear) {\n            this.setState({\n                clear: false\n            });\n            return;\n        }\n        if (\n            prevProps.match.path == this.props.match.path &&\n            prevProps.location.key != this.props.location.key &&\n            this.props.location.state?.reload\n        ) {\n            this.setState({\n                clear: true\n            });\n        }\n    }\n\n    public render(): ReactNode {\n        return this.state.clear ? \"\" : this.props.children;\n    }\n}\n\nexport default withRouter(Reload);\n","import loadable, { LoadableComponent } from \"@loadable/component\";\nimport * as React from \"react\";\nimport { Component, ComponentClass, ReactNode } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { CredentialsType } from \"./ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"./ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"./ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport AccessDenied from \"./components/utils/AccessDenied\";\nimport ErrorAlert from \"./components/utils/ErrorAlert\";\nimport ErrorBoundary from \"./components/utils/ErrorBoundary\";\nimport Loading from \"./components/utils/Loading\";\nimport Reload from \"./components/utils/Reload\";\nimport Login, { OAuthStateStorage } from \"./components/views/Login\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport { MODE } from \"./definitions/constants\";\nimport { matchesPath } from \"./utils/misc\";\nimport RouteController from \"./utils/RouteController\";\nimport { AppRoute, AppRoutes, RouteData } from \"./utils/routes\";\n\ninterface IState {\n    loading: boolean;\n    routes: Array<AppRoute>;\n    components: Map<string, LoadableComponent<unknown>>;\n}\ninterface IProps extends RouteComponentProps {\n    loggedIn: boolean;\n    loggedOut: boolean;\n    selectCategory: (category: string) => void;\n}\n\nconst LoadSpin = (page: string) => (\n    <Loading text={\"loading.page\"}>\n        <FormattedMessage id={page} />\n    </Loading>\n);\n\nconst NotFound = loadable(() => import(\"./components/utils/NotFound\"), {\n    fallback: LoadSpin(\"loading.page.notfound\")\n});\n\nclass Router extends Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n    public constructor(props: IProps) {\n        super(props);\n\n        this.refreshListener = this.refreshListener.bind(this);\n\n        const components = new Map<string, LoadableComponent<unknown>>();\n\n        const routes = RouteController.getImmediateRoutes(false);\n        routes.forEach(route => {\n            components.set(\n                route.name,\n                //*should* always be a react component\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                loadable(() => import(`./components/views/${route.file}`), {\n                    fallback: LoadSpin(route.name)\n                })\n            );\n        });\n\n        this.state = {\n            loading: !!new URLSearchParams(window.location.search).get(\"state\"),\n            routes: RouteController.getImmediateRoutes(false),\n            components: components\n        };\n    }\n\n    private refreshListener(routes: Array<AppRoute>) {\n        this.setState({\n            routes\n        });\n    }\n\n    public async componentDidMount() {\n        RouteController.on(\"refreshAll\", this.refreshListener);\n\n        this.props.history.listen(location => {\n            void this.listener(location.pathname);\n        });\n        this.listener(this.props.location.pathname);\n\n        const URLSearch = new URLSearchParams(window.location.search);\n        const state = URLSearch.get(\"state\");\n        if (!state) {\n            this.setState({\n                loading: false\n            });\n            return;\n        }\n\n        if (MODE === \"PROD\" || MODE === \"GITHUB\") {\n            window.history.replaceState(null, document.title, window.location.pathname);\n        }\n\n        const oauthdata = JSON.parse(\n            window.sessionStorage.getItem(\"oauth\") ?? \"{}\"\n        ) as OAuthStateStorage;\n\n        const oauthstate = oauthdata[state];\n        if (!oauthstate) {\n            return this.setErrorAndEnd(\n                new InternalError(ErrorCode.LOGIN_BAD_OAUTH, {\n                    jsError: Error(`State(${state}) cannot be resolved to a provider.`)\n                })\n            );\n        }\n\n        const code = URLSearch.get(\"code\");\n        if (!code) {\n            return this.setErrorAndEnd(\n                new InternalError(ErrorCode.LOGIN_BAD_OAUTH, {\n                    jsError: Error(`Code not found.`)\n                })\n            );\n        }\n        this.props.history.replace(oauthstate.url);\n\n        const response = await ServerClient.login({\n            type: CredentialsType.OAuth,\n            provider: oauthstate.provider,\n            token: code\n        });\n\n        window.sessionStorage.removeItem(\"oauth\");\n\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                loading: false\n            });\n        } else {\n            return this.setErrorAndEnd(response.error);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        RouteController.removeListener(\"refreshAll\", this.refreshListener);\n    }\n\n    private setErrorAndEnd(error: InternalError<ErrorCode>) {\n        RouteData.oautherrors = [error];\n        this.setState({\n            loading: false\n        });\n    }\n\n    private listener(location: string) {\n        const routes = RouteController.getImmediateRoutes(false);\n        for (const route of routes) {\n            if (route.category && route.navbarLoose && matchesPath(location, route.route)) {\n                this.props.selectCategory(route.category);\n                break;\n            }\n        }\n    }\n\n    public render(): ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.routes\" />;\n        }\n\n        return (\n            <ErrorBoundary>\n                <Reload>\n                    <div>\n                        <Switch>\n                            {this.state.routes.map(route => {\n                                if (!route.loginless && !this.props.loggedIn) return;\n\n                                return (\n                                    <Route\n                                        exact={!route.loose}\n                                        path={route.route}\n                                        key={route.name}\n                                        render={props => {\n                                            let Comp;\n\n                                            if (!route.cachedAuth) {\n                                                Comp = AccessDenied;\n                                            } else {\n                                                Comp = this.state.components.get(\n                                                    route.name\n                                                )! as ComponentClass;\n                                            }\n\n                                            return !this.context?.user && !route.loginless ? (\n                                                <Container>\n                                                    <ErrorAlert\n                                                        error={\n                                                            new InternalError(ErrorCode.APP_FAIL, {\n                                                                jsError: Error(\n                                                                    \"Router has no user in the general context\"\n                                                                )\n                                                            })\n                                                        }\n                                                    />\n                                                </Container>\n                                            ) : //Yeah I have no excuse for this, I didn't want to implement a route config option\n                                            // to allow a single route to work without server info so i added it as a check here\n                                            !this.context?.serverInfo &&\n                                              route != AppRoutes.config ? (\n                                                <Container>\n                                                    <ErrorAlert\n                                                        error={\n                                                            new InternalError(ErrorCode.APP_FAIL, {\n                                                                jsError: Error(\n                                                                    \"Router has no server info in the general context\"\n                                                                )\n                                                            })\n                                                        }\n                                                    />\n                                                </Container>\n                                            ) : route.noContainer ? (\n                                                <React.Fragment>\n                                                    <Comp {...props} />\n                                                </React.Fragment>\n                                            ) : (\n                                                <Container className=\"mt-5 mb-5\">\n                                                    <Comp {...props} />\n                                                </Container>\n                                            );\n                                        }}\n                                    />\n                                );\n                            })}\n                            <Container className=\"mt-5 mb-5\">\n                                <Route key=\"notfound\">\n                                    {this.props.loggedIn ? (\n                                        <NotFound />\n                                    ) : (\n                                        <Login loggedOut={this.props.loggedOut} />\n                                    )}\n                                </Route>\n                            </Container>\n                        </Switch>\n                    </div>\n                </Reload>\n            </ErrorBoundary>\n        );\n    }\n}\nRouter.contextType = GeneralContext;\nexport default withRouter(Router);\n","import React from \"react\";\nimport { Alert, Container } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport Pkg from \"./../package.json\";\nimport ServerClient from \"./ApiClient/ServerClient\";\nimport CredentialsProvider from \"./ApiClient/util/CredentialsProvider\";\nimport AppNavbar from \"./components/AppNavbar\";\nimport Logo from \"./components/Logo\";\nimport ReportIssue from \"./components/ReportIssue\";\nimport ErrorAlert from \"./components/utils/ErrorAlert\";\nimport ErrorBoundary from \"./components/utils/ErrorBoundary\";\nimport JobsList from \"./components/utils/JobsList\";\nimport Loading from \"./components/utils/Loading\";\nimport { GeneralContext, UnsafeGeneralContext } from \"./contexts/GeneralContext\";\nimport { DEFAULT_BASEPATH } from \"./definitions/constants\";\nimport Router from \"./Router\";\n\ninterface InnerProps {\n    loading: boolean;\n    loggedIn: boolean;\n    loggedOut: boolean;\n}\n\ninterface InnerState {\n    passdownCat?: { name: string; key: string };\n}\n\nclass InnerApp extends React.Component<InnerProps, InnerState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: InnerProps) {\n        super(props);\n\n        this.state = {};\n    }\n\n    public componentDidMount(): void {\n        document.title = \"TGS Webpanel v\" + Pkg.version;\n        // I can't be assed to remember the default admin password\n        document.addEventListener(\"keydown\", event => {\n            if (event.key === \"L\" && event.ctrlKey && event.shiftKey) {\n                ServerClient.logout();\n                void ServerClient.login(CredentialsProvider.default);\n            }\n        });\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <BrowserRouter\n                basename={\n                    window.publicPath\n                        ? new URL(window.publicPath, window.location.href).pathname\n                        : DEFAULT_BASEPATH\n                }>\n                <ErrorBoundary>\n                    <AppNavbar category={this.state.passdownCat} loggedIn={this.props.loggedIn} />\n                    {this.props.loading ? (\n                        <Container className=\"mt-5 mb-5\">\n                            <Loading text=\"loading.app\" />\n                        </Container>\n                    ) : (\n                        <>\n                            <Container className=\"mt-5\">\n                                <Alert variant=\"warning\" className=\"d-block d-lg-none\">\n                                    <Alert.Heading>\n                                        <FormattedMessage id=\"warning.screensize.header\" />\n                                    </Alert.Heading>\n                                    <hr />\n                                    <FormattedMessage id=\"warning.screensize\" />\n                                </Alert>\n                                {Array.from(this.context.errors.values()).map((value, idx) => {\n                                    return (\n                                        <ErrorAlert\n                                            error={value}\n                                            key={idx}\n                                            onClose={() => this.context.deleteError(value)}\n                                        />\n                                    );\n                                })}\n                            </Container>\n                            <Router\n                                loggedIn={this.props.loggedIn}\n                                loggedOut={this.props.loggedOut}\n                                selectCategory={cat => {\n                                    this.setState({\n                                        passdownCat: {\n                                            name: cat,\n                                            key: Math.random().toString()\n                                        }\n                                    });\n                                }}\n                            />\n                        </>\n                    )}\n                    {this.props.loggedIn ? <JobsList /> : null}\n                </ErrorBoundary>\n                <ReportIssue />\n                <Logo />\n            </BrowserRouter>\n        );\n    }\n}\nInnerApp.contextType = GeneralContext;\n\nexport default InnerApp;\n","import React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router\";\n\nimport GenericAlert from \"./GenericAlert\";\n\ntype IProps = RouteComponentProps;\n\ninterface IState {\n    auth: boolean;\n}\n\nclass AccessDenied extends React.Component<IProps, IState> {\n    public render(): ReactNode {\n        const goBack = () => {\n            this.props.history.goBack();\n        };\n        return (\n            <GenericAlert title=\"generic.accessdenied\">\n                <Button variant=\"danger\" className=\"float-right\" onClick={goBack}>\n                    <FormattedMessage id=\"generic.goback\" />\n                </Button>\n            </GenericAlert>\n        );\n    }\n}\n\nexport default withRouter(AccessDenied);\n","import ClickToSelect from \"@mapbox/react-click-to-select\";\nimport React, { Component, ReactNode } from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport InternalError, {\n    DescType,\n    ErrorCode\n} from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { API_VERSION, MODE, VERSION } from \"../../definitions/constants\";\n\ninterface IProps {\n    error: InternalError<ErrorCode> | undefined;\n    onClose?: () => void;\n}\n\ninterface IState {\n    popup: boolean;\n}\n\nclass ErrorAlert extends Component<IProps, IState> {\n    public constructor(props: IProps) {\n        super(props);\n        this.state = {\n            popup: false\n        };\n    }\n    public render(): ReactNode {\n        if (!this.props.error) {\n            return \"\";\n        }\n\n        const handleClose = () => this.setState({ popup: false });\n        const handleOpen = () => this.setState({ popup: true });\n\n        return (\n            <Alert\n                className=\"clearfix\"\n                variant=\"error\"\n                dismissible={!!this.props.onClose}\n                onClose={this.props.onClose}>\n                <FormattedMessage id={this.props.error.code || \"error.app.undefined\"} />\n                <hr />\n\n                <Button variant=\"danger\" className=\"float-right\" onClick={handleOpen}>\n                    <FormattedMessage id=\"generic.details\" />\n                </Button>\n\n                <Modal centered show={this.state.popup} onHide={handleClose} size=\"lg\">\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id={this.props.error.code || \"error.app.undefined\"} />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className=\"text-danger pb-0\">\n                        {this.props.error.desc?.type === DescType.LOCALE ? (\n                            <FormattedMessage\n                                id={this.props.error.desc.desc || \"error.api.empty\"}\n                            />\n                        ) : this.props.error.desc?.desc ? (\n                            this.props.error.desc.desc\n                        ) : (\n                            \"\"\n                        )}\n                        <hr />\n                        <ClickToSelect>\n                            <code className=\"bg-darker d-block pre-wrap p-2 pre-scrollable\">\n                                {`Webpanel Version: ${VERSION}\nWebpanel Mode: ${MODE}\nAPI Version: ${API_VERSION}\n\nError Code: ${this.props.error.code}\nError Description: ${this.props.error.desc ? this.props.error.desc.desc : \"No description\"}\n\nAdditional Information:\n${this.props.error.extendedInfo}`.replace(/\\\\/g, \"\\\\\\\\\")}\n                            </code>\n                        </ClickToSelect>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <span className=\"font-italic mr-auto\">\n                            <FormattedMessage id=\"generic.debugwarn\" />\n                        </span>\n                        <Button variant=\"secondary\" onClick={handleClose}>\n                            <FormattedMessage id=\"generic.close\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </Alert>\n        );\n    }\n}\n\nexport default ErrorAlert;\n\nexport type ErrorState = [\n    Array<InternalError<ErrorCode> | undefined>,\n    React.Dispatch<React.SetStateAction<Array<InternalError<ErrorCode> | undefined>>>\n];\n\nfunction addError([, setErrors]: ErrorState, error: InternalError<ErrorCode>): void {\n    setErrors(prevState => {\n        const errors = Array.from(prevState);\n        errors.push(error);\n        return errors;\n    });\n}\n\nfunction displayErrors([errors, setErrors]: ErrorState): Array<JSX.Element | undefined> {\n    return errors.map((err, index) => {\n        if (!err) return;\n        return (\n            <ErrorAlert\n                key={index}\n                error={err}\n                onClose={() =>\n                    setErrors(prev => {\n                        const newarr = Array.from(prev);\n                        newarr[index] = undefined;\n                        return newarr;\n                    })\n                }\n            />\n        );\n    });\n}\n\nexport { displayErrors, addError };\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { FormattedMessage } from \"react-intl\";\n\ninterface IProps {\n    title: string;\n    body?: string;\n    children?: JSX.Element;\n}\n\nexport default function GenericAlert(props: IProps): JSX.Element {\n    return (\n        <Alert className=\"clearfix\" variant=\"error\">\n            <FormattedMessage id={props.title} />\n            {props.body ? (\n                <React.Fragment>\n                    <hr />\n                    <FormattedMessage id={props.body} />\n                </React.Fragment>\n            ) : props.children ? (\n                <React.Fragment>\n                    <hr />\n                    {props.children}\n                </React.Fragment>\n            ) : null}\n        </Alert>\n    );\n}\n","import ClickToSelect from \"@mapbox/react-click-to-select\";\nimport React, { useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ErrorCode as TGSErrorCode } from \"../../ApiClient/generatedcode/generated\";\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\n\ninterface IProps {\n    job: TGSJobResponse;\n}\n\nexport default function JobError(props: IProps): JSX.Element {\n    const [open, setOpen] = useState(false);\n    return (\n        <>\n            <Button\n                variant=\"danger\"\n                className=\"d-inline-block\"\n                onClick={() => setOpen(true)}\n                size=\"sm\">\n                <FormattedMessage\n                    id=\"generic.errordetails\"\n                    values={{\n                        info:\n                            props.job.errorCode !== undefined && props.job.errorCode !== null\n                                ? TGSErrorCode[props.job.errorCode]\n                                : \"NoCode\"\n                    }}\n                />\n            </Button>\n\n            <Modal centered show={open} onHide={() => setOpen(false)} size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id={props.job.description} />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body className=\"text-danger pb-0\">\n                    <FormattedMessage id=\"view.instance.jobs.error\" />:{\" \"}\n                    {props.job.errorCode !== undefined && props.job.errorCode !== null\n                        ? TGSErrorCode[props.job.errorCode]\n                        : \"NoCode\"}\n                    <hr />\n                    <ClickToSelect>\n                        <code className=\"bg-darker d-block pre-wrap p-2 pre-scrollable\">\n                            {props.job.exceptionDetails}\n                        </code>\n                    </ClickToSelect>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => setOpen(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport ProgressBar from \"react-bootstrap/ProgressBar\";\nimport Toast from \"react-bootstrap/Toast\";\nimport ToastBody from \"react-bootstrap/ToastBody\";\nimport ToastHeader from \"react-bootstrap/ToastHeader\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage, FormattedRelativeTime } from \"react-intl\";\n\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\nimport JobError from \"./JobError\";\n\ntype IState = object;\ninterface IProps {\n    job: TGSJobResponse;\n    width?: string;\n    onClose?: (job: TGSJobResponse) => void;\n    onCancel: (job: TGSJobResponse) => void;\n}\n\nexport default class JobCard extends React.Component<IProps, IState> {\n    public render(): ReactNode {\n        const job = this.props.job;\n        const createddate = new Date(job.startedAt);\n        const createddiff = (createddate.getTime() - Date.now()) / 1000;\n        const stoppeddate = new Date(job.stoppedAt ?? 0);\n        const stoppeddiff = (stoppeddate.getTime() - Date.now()) / 1000;\n        const variant =\n            job.errorCode !== undefined || job.exceptionDetails !== undefined\n                ? \"danger\"\n                : job.cancelled\n                  ? \"warning\"\n                  : job.stoppedAt\n                    ? \"success\"\n                    : \"info\";\n\n        return (\n            <Toast\n                className=\"mx-auto\"\n                key={job.id}\n                style={{\n                    maxWidth: this.props.width\n                }}\n                onClose={() => {\n                    if (this.props.onClose) this.props.onClose(job);\n                }}>\n                <ToastHeader\n                    closeButton={!!job.stoppedAt && !!this.props.onClose}\n                    className={`bg-${variant}`}>\n                    #{job.id}: {job.description}\n                </ToastHeader>\n                <ToastBody className=\"pt-1 text-white\">\n                    {/*STAGE*/}\n                    {job.stage ? <div className=\"mb-2\">▶{job.stage}</div> : null}\n                    {/*STARTED AT*/}\n                    <FormattedMessage id=\"app.job.started\" />\n                    <OverlayTrigger\n                        overlay={\n                            <Tooltip id={`${job.id}-tooltip-started`}>\n                                {createddate.toLocaleString()}\n                            </Tooltip>\n                        }>\n                        {({ ref, ...triggerHandler }) => (\n                            <span {...triggerHandler} ref={ref as React.Ref<HTMLSpanElement>}>\n                                <FormattedRelativeTime\n                                    value={createddiff}\n                                    numeric=\"auto\"\n                                    updateIntervalInSeconds={1}\n                                />\n                            </span>\n                        )}\n                    </OverlayTrigger>\n                    <br />\n\n                    {/*CREATED BY*/}\n                    <FormattedMessage id=\"app.job.startedby\" />\n                    <OverlayTrigger\n                        overlay={\n                            <Tooltip id={`${job.id}-tooltip-startedby`}>\n                                <FormattedMessage id=\"generic.userid\" />\n                                {job.startedBy.id}\n                            </Tooltip>\n                        }>\n                        {({ ref, ...triggerHandler }) => (\n                            <span ref={ref as React.Ref<HTMLSpanElement>} {...triggerHandler}>\n                                {job.startedBy.name}\n                            </span>\n                        )}\n                    </OverlayTrigger>\n                    <br />\n                    <br />\n                    {/*STOPPED AT*/}\n                    {job.stoppedAt ? (\n                        <React.Fragment>\n                            <FormattedMessage\n                                id={job.cancelled ? \"app.job.cancelled\" : \"app.job.completed\"}\n                            />\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${job.id}-tooltip-stopped`}>\n                                        {createddate.toLocaleString()}\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <span\n                                        {...triggerHandler}\n                                        ref={ref as React.Ref<HTMLSpanElement>}>\n                                        <FormattedRelativeTime\n                                            value={stoppeddiff}\n                                            numeric=\"auto\"\n                                            updateIntervalInSeconds={1}\n                                        />\n                                    </span>\n                                )}\n                            </OverlayTrigger>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n                    {job.cancelledBy ? (\n                        <React.Fragment>\n                            <FormattedMessage id=\"app.job.cancelledby\" />\n                            <OverlayTrigger\n                                overlay={\n                                    <Tooltip id={`${job.id}-tooltip-createdby`}>\n                                        <FormattedMessage id=\"generic.userid\" />\n                                        {job.startedBy.id}\n                                    </Tooltip>\n                                }>\n                                {({ ref, ...triggerHandler }) => (\n                                    <span\n                                        ref={ref as React.Ref<HTMLSpanElement>}\n                                        {...triggerHandler}>\n                                        {job.cancelledBy!.name}\n                                    </span>\n                                )}\n                            </OverlayTrigger>\n                            <br />\n                        </React.Fragment>\n                    ) : (\n                        \"\"\n                    )}\n\n                    {/*ERROR*/}\n                    {job.errorCode !== undefined || job.exceptionDetails !== undefined ? (\n                        <JobError job={job} />\n                    ) : (\n                        \"\"\n                    )}\n\n                    {/* PROGRESS BAR */}\n                    {job.stoppedAt == undefined ? (\n                        <div className=\"d-flex mt-2\" style={{ height: \"1.5rem\" }}>\n                            <ProgressBar\n                                className=\"text-darker font-weight-bold flex-grow-1 h-unset\"\n                                animated={!job.stoppedAt}\n                                label={\n                                    typeof job.progress === \"number\"\n                                        ? `${job.progress.toString()}%`\n                                        : undefined\n                                }\n                                now={typeof job.progress === \"number\" ? job.progress : 100}\n                                striped\n                                variant={variant}\n                            />\n                            {job.canCancel && !job.stoppedAt ? (\n                                <Button\n                                    style={{ padding: \"0 1em\" }}\n                                    className=\"ml-1\"\n                                    variant=\"danger\"\n                                    onClick={() => this.props.onCancel(job)}>\n                                    <FontAwesomeIcon icon=\"times\" className=\"d-block\" />\n                                </Button>\n                            ) : null}\n                        </div>\n                    ) : (\n                        \"\"\n                    )}\n                </ToastBody>\n            </Toast>\n        );\n    }\n}\n","import { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactNode } from \"react\";\nimport { Button, Card } from \"react-bootstrap\";\nimport { OverlayInjectedProps } from \"react-bootstrap/Overlay\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Rnd } from \"react-rnd\";\n\nimport type { InstanceResponse } from \"../../ApiClient/generatedcode/generated\";\nimport { TGSJobResponse } from \"../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport configOptions, { jobsWidgetOptions } from \"../../ApiClient/util/config\";\nimport JobsController from \"../../ApiClient/util/JobsController\";\nimport ErrorAlert from \"./ErrorAlert\";\nimport JobCard from \"./JobCard\";\nimport Loading from \"./Loading\";\n\ninterface IProps {\n    width?: string;\n    widget: boolean;\n}\n\ninterface IState {\n    jobs: Map<number, Map<number, TGSJobResponse>>;\n    errors: InternalError<ErrorCode>[];\n    nextRetrySeconds: number | null;\n    ownerrors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    instances: Map<number, InstanceResponse>;\n}\n\nexport default class JobsList extends React.Component<IProps, IState> {\n    public static defaultProps = {\n        widget: true\n    };\n\n    private widgetRef = React.createRef<HTMLDivElement>();\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.onCancel = this.onCancel.bind(this);\n        this.onClose = this.onClose.bind(this);\n\n        this.state = {\n            jobs: JobsController.jobsByInstance,\n            errors: [],\n            nextRetrySeconds: null,\n            ownerrors: [],\n            loading: true,\n            instances: new Map<number, InstanceResponse>()\n        };\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const ownerrors = Array.from(prevState.ownerrors);\n            ownerrors.push(error);\n            if (this.widgetRef.current) {\n                this.widgetRef.current.scrollTop = 0;\n            }\n            return {\n                ownerrors\n            };\n        });\n    }\n\n    public componentDidMount(): void {\n        JobsController.on(\"jobsLoaded\", this.handleUpdate);\n        this.handleUpdate();\n    }\n\n    public componentWillUnmount(): void {\n        JobsController.removeListener(\"jobsLoaded\", this.handleUpdate);\n    }\n\n    private currentTimeout?: NodeJS.Timeout | null;\n\n    public handleUpdate(): void {\n        if (this.currentTimeout) {\n            clearTimeout(this.currentTimeout);\n            this.currentTimeout = null;\n        }\n\n        let nextRetrySeconds;\n        if (JobsController.nextRetry) {\n            if (JobsController.nextRetry.getSeconds() > new Date().getSeconds()) {\n                nextRetrySeconds = JobsController.nextRetry.getSeconds() - new Date().getSeconds();\n            } else {\n                nextRetrySeconds = 0;\n            }\n            this.currentTimeout = setTimeout(() => this.handleUpdate(), 1000);\n        } else {\n            nextRetrySeconds = null;\n        }\n\n        this.setState({\n            jobs: JobsController.jobsByInstance,\n            errors: JobsController.errors,\n            nextRetrySeconds,\n            loading: false,\n            instances: JobsController.accessibleInstances\n        });\n    }\n\n    private async onCancel(job: TGSJobResponse) {\n        const status = await JobsController.cancelJob(job.id, error => this.addError(error));\n\n        if (!status) {\n            return;\n        }\n        JobsController.fastmode = 5;\n    }\n\n    private onClose(job: TGSJobResponse) {\n        JobsController.clearJob(job.id);\n    }\n\n    public render(): ReactNode {\n        if (!this.props.widget) return this.nested();\n\n        let totalJobs = 0;\n        for (const job of this.state.jobs.values()) {\n            totalJobs += job.size;\n        }\n\n        let display: boolean;\n        if (configOptions.jobswidgetdisplay.value === jobsWidgetOptions.NEVER) {\n            display = false;\n        } else if (configOptions.jobswidgetdisplay.value === jobsWidgetOptions.ALWAYS) {\n            display = true;\n        } else {\n            display = totalJobs > 0 || this.state.errors.length > 0;\n        }\n\n        return (\n            <div\n                style={{\n                    position: \"fixed\",\n                    top: 0,\n                    bottom: 0,\n                    right: 0,\n                    left: 0,\n                    pointerEvents: \"none\",\n                    zIndex: 5\n                }}>\n                <Rnd\n                    className={`jobswidget ${display ? \"\" : \"invisible\"}`}\n                    style={{\n                        pointerEvents: \"auto\",\n                        bottom: 0,\n                        right: 0\n                    }}\n                    default={{\n                        width: \"30vw\",\n                        height: \"50vh\",\n                        x:\n                            document.documentElement.clientWidth -\n                            Math.min(document.documentElement.clientWidth * 0.3, 350) -\n                            20,\n                        y:\n                            document.documentElement.clientHeight -\n                            document.documentElement.clientHeight * 0.5 -\n                            20\n                    }}\n                    maxWidth={350}\n                    minHeight={50}\n                    minWidth={110}\n                    bounds=\"parent\">\n                    <div className=\"fancyscroll overflow-auto h-100\" ref={this.widgetRef}>\n                        <h5 className=\"text-center text-darker font-weight-bold\">\n                            <FormattedMessage id=\"view.instance.jobs.title\" />\n                        </h5>\n                        {this.nested()}\n                    </div>\n                </Rnd>\n            </div>\n        );\n    }\n\n    private nested(): ReactNode {\n        return (\n            <div className={this.props.widget ? \"d-sm-block\" : \"\"}>\n                {this.state.loading ? <Loading text=\"loading.instance.jobs.list\" /> : \"\"}\n                {this.state.ownerrors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.ownerrors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        ownerrors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                {this.state.errors.length > 0 ? (\n                    <React.Fragment>\n                        {this.state.errors.map((error, index) => {\n                            return (\n                                <div\n                                    key={index}\n                                    style={{ maxWidth: this.props.widget ? 350 : \"unset\" }}>\n                                    <ErrorAlert error={error} />\n                                </div>\n                            );\n                        })}\n                        <Card>\n                            {this.state.nextRetrySeconds === 0 ? (\n                                <FormattedMessage id=\"view.instance.jobs.reconnect_now\"></FormattedMessage>\n                            ) : this.state.nextRetrySeconds != null ? (\n                                <FormattedMessage\n                                    id=\"view.instance.jobs.reconnect_in\"\n                                    values={{\n                                        seconds: this.state.nextRetrySeconds\n                                    }}></FormattedMessage>\n                            ) : (\n                                <FormattedMessage id=\"view.instance.jobs.reconnected_auth\"></FormattedMessage>\n                            )}\n                        </Card>\n                    </React.Fragment>\n                ) : null}\n                {Array.from(this.state.jobs)\n                    .sort((a, b) => a[0] - b[0])\n                    .map(([instanceid, jobMap]) => {\n                        let xFinishedEnabled = false;\n                        jobMap.forEach(job => {\n                            if (job.stoppedAt) xFinishedEnabled = true;\n                        });\n\n                        const instanceHeaderStyle = xFinishedEnabled\n                            ? { marginTop: \"5px\", marginLeft: \"20px\" }\n                            : undefined;\n\n                        return (\n                            <React.Fragment key={instanceid}>\n                                <div className=\"bg-dark p-2 row\">\n                                    <div className={`col-${xFinishedEnabled ? 9 : 12} text-center`}>\n                                        <div style={instanceHeaderStyle}>\n                                            <OverlayTrigger\n                                                overlay={(props: OverlayInjectedProps) => (\n                                                    <Tooltip\n                                                        id={`tooltip-instance-${instanceid}`}\n                                                        {...props}>\n                                                        {instanceid}\n                                                    </Tooltip>\n                                                )}>\n                                                <React.Fragment>\n                                                    {this.state.instances.get(instanceid)?.name ??\n                                                        \"Unknown\"}{\" \"}\n                                                    (\n                                                    <FormattedMessage\n                                                        id=\"view.instance.jobs.jobtotal\"\n                                                        values={{ amount: jobMap.size }}\n                                                    />\n                                                    )\n                                                </React.Fragment>\n                                            </OverlayTrigger>\n                                        </div>\n                                    </div>\n                                    {xFinishedEnabled ? (\n                                        <div className=\"col-3 text-right\">\n                                            <OverlayTrigger\n                                                placement=\"top\"\n                                                overlay={props => (\n                                                    <Tooltip id=\"clear-instance-jobs\" {...props}>\n                                                        <FormattedMessage id=\"view.instance.jobs.clearfinished\" />\n                                                    </Tooltip>\n                                                )}>\n                                                <Button\n                                                    variant=\"outline-secondary\"\n                                                    onClick={() =>\n                                                        jobMap.forEach(job => {\n                                                            if (job.stoppedAt)\n                                                                JobsController.clearJob(job.id);\n                                                        })\n                                                    }\n                                                    className=\"nowrap\">\n                                                    <FontAwesomeIcon icon={faTimes} />\n                                                </Button>\n                                            </OverlayTrigger>\n                                        </div>\n                                    ) : (\n                                        <React.Fragment />\n                                    )}\n                                </div>\n                                {Array.from(jobMap, ([, job]) => job)\n                                    .sort((a, b) => b.id - a.id)\n                                    .map(job => (\n                                        <JobCard\n                                            job={job}\n                                            width={this.props.width}\n                                            key={job.id}\n                                            onClose={this.onClose}\n                                            onCancel={e => void this.onCancel(e)}\n                                        />\n                                    ))}\n                            </React.Fragment>\n                        );\n                    })}\n            </div>\n        );\n    }\n}\n","import { faInvision } from \"@fortawesome/free-brands-svg-icons\";\nimport { faDiscord } from \"@fortawesome/free-brands-svg-icons/faDiscord\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons/faGithub\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ChangeEvent, FormEvent, ReactNode } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/esm/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\n\nimport { OAuthProvider } from \"../../ApiClient/generatedcode/generated\";\nimport { CredentialsType } from \"../../ApiClient/models/ICredentials\";\nimport InternalError, { ErrorCode } from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport ServerClient from \"../../ApiClient/ServerClient\";\nimport CredentialsProvider from \"../../ApiClient/util/CredentialsProvider\";\nimport { GeneralContext, UnsafeGeneralContext } from \"../../contexts/GeneralContext\";\nimport { MODE } from \"../../definitions/constants\";\nimport KeycloakLogo from \"../../images/keycloak_icon_64px.png\";\nimport TGLogo from \"../../images/tglogo-white.svg\";\nimport { RouteData } from \"../../utils/routes\";\nimport ErrorAlert from \"../utils/ErrorAlert\";\nimport Loading from \"../utils/Loading\";\n\ninterface IProps extends RouteComponentProps {\n    loggedOut: boolean;\n}\ninterface IState {\n    busy: boolean;\n    validated: boolean;\n    username: string;\n    password: string;\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    redirectSetup?: boolean;\n}\n\nexport type StoredOAuthData = { provider: OAuthProvider; url: string };\nexport type OAuthStateStorage = Record<string, StoredOAuthData>;\n\nclass Login extends React.Component<IProps, IState> {\n    public declare context: UnsafeGeneralContext;\n\n    public constructor(props: IProps) {\n        super(props);\n        this.submit = this.submit.bind(this);\n\n        console.log(RouteData.oautherrors);\n\n        this.state = {\n            busy: false,\n            validated: false,\n            username: \"\",\n            password: \"\",\n            errors: Array.from(RouteData.oautherrors)\n        };\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const oauthState =\n            window.sessionStorage.getItem(\"oauth\") ??\n            CredentialsProvider.credentials?.type === CredentialsType.OAuth;\n        if (!oauthState && (MODE === \"PROD\" || MODE === \"GITHUB\")) {\n            // noinspection ES6MissingAwait\n            await this.tryLoginDefault();\n        }\n    }\n\n    private async tryLoginDefault(): Promise<void> {\n        if (this.props.loggedOut) {\n            return;\n        }\n\n        const response = await ServerClient.login(CredentialsProvider.default);\n\n        if (response.code === StatusCode.OK) {\n            this.setState({\n                redirectSetup: true\n            });\n        }\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public render(): ReactNode {\n        const handleUsrInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ username: event.target.value });\n        const handlePwdInput = (event: ChangeEvent<HTMLInputElement>) =>\n            this.setState({ password: event.target.value });\n\n        if (this.state.busy || CredentialsProvider.hasToken()) {\n            return <Loading text=\"loading.login\" />;\n        }\n\n        if (!this.context.serverInfo) {\n            return <Loading text=\"loading.serverinfo\" />;\n        }\n\n        const providers: Record<OAuthProvider, React.ReactNode> = {\n            [OAuthProvider.GitHub]: <FontAwesomeIcon icon={faGithub} style={{ width: \"1.2em\" }} />,\n            [OAuthProvider.Discord]: (\n                <FontAwesomeIcon icon={faDiscord} style={{ width: \"1.2em\" }} />\n            ),\n            [OAuthProvider.TGForums]: <img src={TGLogo} alt=\"tglogo\" style={{ width: \"1.2em\" }} />,\n            [OAuthProvider.Keycloak]: (\n                <img src={KeycloakLogo} alt=\"keycloaklogo\" style={{ width: \"1.2em\" }} />\n            ),\n            [OAuthProvider.InvisionCommunity]: (\n                <FontAwesomeIcon icon={faInvision} style={{ width: \"1.2em\" }} />\n            )\n        };\n\n        const providersTheme: Record<OAuthProvider, string | undefined> = {\n            GitHub: \"#161b22\",\n            Discord: \"#7289da\",\n            TGForums: undefined,\n            Keycloak: undefined,\n            InvisionCommunity: undefined\n        };\n\n        return (\n            <Col className=\"mx-auto\" lg={5} md={8}>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <Card body>\n                    <Card.Title>\n                        <FormattedMessage id=\"login.header\" />\n                    </Card.Title>\n                    <Card body>\n                        <Card.Title>\n                            <FormattedMessage id=\"login.type.generic\" />\n                        </Card.Title>\n                        <Form validated={this.state.validated} onSubmit={e => void this.submit(e)}>\n                            <Form.Group controlId=\"username\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.username\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Enter username\"\n                                    onChange={handleUsrInput}\n                                    value={this.state.username}\n                                    required\n                                />\n                            </Form.Group>\n                            <Form.Group controlId=\"password\">\n                                <Form.Label>\n                                    <FormattedMessage id=\"login.password\" />\n                                </Form.Label>\n                                <Form.Control\n                                    type=\"password\"\n                                    placeholder=\"Password\"\n                                    onChange={handlePwdInput}\n                                    value={this.state.password}\n                                    required\n                                />\n                            </Form.Group>\n                            <Button type=\"submit\" block>\n                                <FormattedMessage id=\"login.submit\" />\n                            </Button>\n                        </Form>\n                    </Card>\n                    {(this.context.serverInfo?.oAuthProviderInfos?.Discord ||\n                        this.context.serverInfo?.oAuthProviderInfos?.GitHub ||\n                        this.context.serverInfo?.oAuthProviderInfos?.Keycloak ||\n                        this.context.serverInfo?.oAuthProviderInfos?.TGForums ||\n                        this.context.serverInfo?.oAuthProviderInfos?.InvisionCommunity) && (\n                        <>\n                            <hr />\n                            <Card body>\n                                <Card.Title>\n                                    <FormattedMessage id=\"login.type.oauth\" />\n                                </Card.Title>\n                                {Object.keys(this.context.serverInfo.oAuthProviderInfos ?? {}).map(\n                                    provider => {\n                                        const ptheme = providersTheme[provider as OAuthProvider];\n                                        return (\n                                            <Button\n                                                key={provider}\n                                                block\n                                                style={ptheme ? { background: ptheme } : undefined}\n                                                onClick={() =>\n                                                    void this.startOAuth(provider as OAuthProvider)\n                                                }>\n                                                {providers[provider as OAuthProvider]}\n                                                <span className=\"ml-1\">\n                                                    <FormattedMessage\n                                                        id=\"login.oauth\"\n                                                        values={{ provider }}\n                                                    />\n                                                </span>\n                                            </Button>\n                                        );\n                                    }\n                                )}\n                            </Card>\n                        </>\n                    )}\n                </Card>\n            </Col>\n        );\n    }\n\n    private async startOAuth(provider: OAuthProvider): Promise<void> {\n        if (!this.context.serverInfo) {\n            this.addError(\n                new InternalError(ErrorCode.APP_FAIL, {\n                    jsError: Error(\"serverInfo is null in startOAuth\")\n                })\n            );\n            return;\n        }\n\n        const stateArray = new Uint8Array(10);\n        window.crypto.getRandomValues(stateArray);\n        const state = Array.from(stateArray, dec => dec.toString(16).padStart(2, \"0\")).join(\"\");\n\n        let url: string | undefined = undefined;\n\n        const e = encodeURIComponent;\n\n        switch (provider) {\n            case OAuthProvider.Discord: {\n                url = `https://discord.com/api/oauth2/authorize?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Discord.clientId\n                )}&scope=identify&state=${e(state)}`;\n                const discordRedirect =\n                    this.context.serverInfo.oAuthProviderInfos.Discord.redirectUri;\n                if (discordRedirect) {\n                    url = `${url}&redirect_uri=${e(\n                        this.context.serverInfo.oAuthProviderInfos.Discord.redirectUri\n                    )}`;\n                }\n\n                break;\n            }\n            case OAuthProvider.GitHub: {\n                url = `https://github.com/login/oauth/authorize?client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.GitHub.clientId\n                )}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.GitHub.redirectUri\n                )}&state=${e(state)}&allow_signup=false`;\n                break;\n            }\n            case OAuthProvider.Keycloak: {\n                url = `${this.context.serverInfo.oAuthProviderInfos.Keycloak\n                    .serverUrl!}/protocol/openid-connect/auth?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Keycloak.clientId\n                )}&scope=openid&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.Keycloak.redirectUri\n                )}`;\n                break;\n            }\n            case OAuthProvider.TGForums: {\n                url = `https://tgstation13.org/phpBB/app.php/tgapi/oauth/auth?scope=user&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.TGForums.clientId\n                )}&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.TGForums.redirectUri\n                )}`;\n                break;\n            }\n            case OAuthProvider.InvisionCommunity: {\n                url = `${this.context.serverInfo.oAuthProviderInfos.InvisionCommunity\n                    .serverUrl!}/oauth/authorize/?response_type=code&client_id=${e(\n                    this.context.serverInfo.oAuthProviderInfos.InvisionCommunity.clientId\n                )}&scope=profile&state=${e(state)}&redirect_uri=${e(\n                    this.context.serverInfo.oAuthProviderInfos.InvisionCommunity.redirectUri\n                )}`;\n                break;\n            }\n        }\n\n        const oauthdata = JSON.parse(\n            window.sessionStorage.getItem(\"oauth\") ?? \"{}\"\n        ) as OAuthStateStorage;\n        oauthdata[state] = {\n            provider: provider,\n            url: this.props.location.pathname\n        };\n\n        window.sessionStorage.setItem(\"oauth\", JSON.stringify(oauthdata));\n\n        window.location.href = url;\n\n        return new Promise(resolve => resolve());\n    }\n\n    private async submit(event: FormEvent<HTMLFormElement>) {\n        event.preventDefault();\n        this.setState({\n            busy: true\n        });\n        const response = await ServerClient.login({\n            type: CredentialsType.Password,\n            userName: this.state.username,\n            password: this.state.password\n        });\n        if (response.code == StatusCode.ERROR) {\n            this.setState({\n                busy: false\n            });\n            this.addError(response.error);\n        }\n    }\n}\nLogin.contextType = GeneralContext;\nexport default withRouter(Login);\n","import { TypedEmitter } from \"tiny-typed-emitter/lib\";\n\nimport LoginHooks from \"../ApiClient/util/LoginHooks\";\nimport {\n    AppCategories,\n    AppRoute,\n    AppRoutes,\n    UnpopulatedAppCategories,\n    UnpopulatedAppCategory\n} from \"./routes\";\n\ninterface IEvents {\n    refresh: (routes: Array<AppRoute>) => void; //auth\n    refreshAll: (routes: Array<AppRoute>) => void; //noauth+auth\n}\n\n//helper class to process AppRoutes\nclass RouteController extends TypedEmitter<IEvents> {\n    private refreshing = false;\n\n    public constructor() {\n        super();\n        window.rtcontroller = this;\n        this.refreshRoutes = this.refreshRoutes.bind(this);\n\n        LoginHooks.addHook(this.refreshRoutes);\n        this.refreshRoutes().catch(console.error);\n\n        //process categories\n        console.time(\"Category mapping\");\n        const catmap = new Map<string, UnpopulatedAppCategory>();\n\n        for (const [name, val] of Object.entries(UnpopulatedAppCategories)) {\n            val.routes = [];\n            //null asserted the name because that one is everywhere, even if the rest is partial\n            catmap.set(val.name!, val);\n            //@ts-expect-error typescript cannot infer that the name is a key of UnpopulatedAppCategories\n            AppCategories[name] = val;\n        }\n\n        for (const route of Object.values(AppRoutes)) {\n            if (!route.category) continue;\n\n            const cat = catmap.get(route.category);\n            if (!cat) {\n                console.error(\"Route has invalid category\", route);\n                continue;\n            }\n\n            //this is guaranteed to be an array as its set in the loop above\n            cat.routes!.push(route);\n\n            if (route.catleader) {\n                if (cat.leader) {\n                    console.error(\"Category has two leaders\", cat.leader, route);\n                    continue;\n                }\n                cat.leader = route;\n            }\n        }\n        console.log(\"Categories mapped\", catmap);\n        console.timeEnd(\"Category mapping\");\n    }\n\n    public async refreshRoutes() {\n        if (this.refreshing) {\n            console.log(\"Already refreshing\");\n            return;\n        } //no need to refresh twice\n\n        this.refreshing = true;\n\n        const work = []; //    we get all hidden routes no matter the authentification without waiting for the refresh\n        const routes = this.getImmediateRoutes(false);\n\n        for (const route of routes) {\n            route.cachedAuth = undefined;\n            if (route.isAuthorized) {\n                work.push(\n                    route.isAuthorized().then(auth => {\n                        route.cachedAuth = auth;\n                    })\n                );\n            } else {\n                route.cachedAuth = true;\n            }\n        }\n\n        await Promise.all(work); //wait for all the authorized calls to complete\n\n        this.emit(\"refresh\", this.getImmediateRoutes(true));\n        const routesNoAuth = this.getImmediateRoutes(false);\n        this.emit(\"refreshAll\", routesNoAuth);\n        this.refreshing = false;\n\n        console.log(\"Routes refreshed\", routesNoAuth);\n        return await this.getRoutes();\n    }\n\n    private wait4refresh() {\n        return new Promise<void>(resolve => {\n            if (!this.refreshing) {\n                resolve();\n                return;\n            }\n            this.on(\"refresh\", () => {\n                resolve();\n            });\n        });\n    }\n\n    public async getRoutes(auth = true): Promise<AppRoute[]> {\n        await this.wait4refresh();\n\n        return this.getImmediateRoutes(auth);\n    }\n\n    public getImmediateRoutes(auth = true) {\n        const results: Array<AppRoute> = [];\n\n        for (const val of Object.values(AppRoutes)) {\n            //we check for isauthorized here without calling because routes that lack the function are public\n            if (val.isAuthorized && !val.cachedAuth && auth) continue; //if not authorized and we only show authorized routes\n\n            results.push(val);\n        }\n\n        return results;\n    }\n}\n\nexport default new RouteController();\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\n\nimport { AdministrationRights, InstanceManagerRights } from \"../ApiClient/generatedcode/generated\";\nimport InternalError, { ErrorCode } from \"../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../ApiClient/UserClient\";\nimport CredentialsProvider from \"../ApiClient/util/CredentialsProvider\";\nimport { resolvePermissionSet } from \"./misc\";\n\nexport interface AppRoute {\n    ///Base parameters\n    //must be unique, also is the id of the route name message\n    name: string;\n    //must be unique, url to access\n    route: string;\n    //link to link to when linking to the route, defaults to the \"route\"\n    link?: string;\n    //filename in components/view that the route should display\n    file: string;\n\n    ///Path parameters\n    //If subpaths should route here\n    loose: boolean;\n    //If subpaths should light up the navbar button\n    navbarLoose: boolean;\n\n    ///Authentication\n    //if we can route to it even on the login page\n    loginless?: boolean;\n    //function to tell if we are authorized\n    isAuthorized?: () => Promise<boolean>;\n    //result of isAuthorized() after RouteController runs it, can be used by components but only set by RouteController\n    cachedAuth?: boolean;\n\n    ///Visibility\n    //if this shows up on the navbar\n    visibleNavbar: boolean;\n    //serves two purposes, first one is to give it an icon, the second one is to not display it if the icon is undefined\n    homeIcon?: IconProp;\n\n    ///Categories\n    //name of the category it belongs to\n    category?: string;\n    //if this is the main button in the category\n    catleader?: boolean;\n\n    ///Misc\n    //Should we not wrap this component in a <Container>?\n    noContainer?: boolean;\n}\n\nfunction adminRight(right: AdministrationRights) {\n    return async (): Promise<boolean> => {\n        if (!CredentialsProvider.hasToken()) return false;\n        const response = await UserClient.getCurrentUser();\n\n        if (response.code == StatusCode.OK) {\n            return !!(resolvePermissionSet(response.payload).administrationRights & right);\n        }\n        return false;\n    };\n}\n\nfunction instanceManagerRight(right: InstanceManagerRights) {\n    return async (): Promise<boolean> => {\n        if (!CredentialsProvider.hasToken()) return false;\n        const response = await UserClient.getCurrentUser();\n\n        if (response.code == StatusCode.OK) {\n            return !!(resolvePermissionSet(response.payload).instanceManagerRights & right);\n        }\n        return false;\n    };\n}\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesAppRoute = <T>(et: { [K in keyof T]: AppRoute }) => et;\n\nconst AppRoutes = asElementTypesAppRoute({\n    home: {\n        name: \"routes.home\",\n        route: \"/\",\n        file: \"Home\",\n\n        loose: false,\n        navbarLoose: false,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"home\",\n        catleader: true\n    },\n    instancecreate: {\n        name: \"routes.instancecreate\",\n        route: \"/instances/create\",\n        file: \"Instance/Create\",\n\n        loose: false,\n        navbarLoose: false,\n\n        isAuthorized: instanceManagerRight(InstanceManagerRights.Create),\n\n        visibleNavbar: false,\n\n        category: \"instance\",\n        catleader: false\n    },\n    instancelist: {\n        name: \"routes.instancelist\",\n        route: \"/instances/\",\n        file: \"Instance/List\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: instanceManagerRight(InstanceManagerRights.List | InstanceManagerRights.Read),\n\n        visibleNavbar: true,\n        homeIcon: \"hdd\",\n\n        category: \"instance\",\n        catleader: true\n    },\n    instanceedit: {\n        name: \"routes.instanceedit\",\n        route: \"/instances/edit/:id(\\\\d+)/:tab?/\",\n        file: \"Instance/InstanceEdit\",\n\n        get link(): string {\n            return RouteData.selectedinstanceid !== undefined\n                ? `/instances/edit/${RouteData.selectedinstanceid}/${\n                      RouteData.selectedinstanceedittab !== undefined\n                          ? `${RouteData.selectedinstanceedittab}/`\n                          : \"\"\n                  }`\n                : (AppRoutes.instancelist.link ?? AppRoutes.instancelist.route);\n        },\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"instance\"\n    },\n    instancejobs: {\n        name: \"routes.instancejobs\",\n        route: \"/instances/jobs/\",\n        file: \"Instance/Jobs\",\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"instance\"\n    },\n    userlist: {\n        name: \"routes.usermanager\",\n        route: \"/users/\",\n        file: \"User/List\",\n\n        loose: false,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: \"user\",\n\n        category: \"user\",\n        catleader: true\n    },\n    useredit: {\n        name: \"routes.useredit\",\n        route: \"/users/edit/user/:id(\\\\d+)/:tab?/\",\n\n        //whole lot of bullshit just to make it that if you have an id, link to the edit page, otherwise link to the list page, and if you link to the user page, put the tab in\n        get link(): string {\n            return RouteData.selecteduserid !== undefined\n                ? `/users/edit/user/${RouteData.selecteduserid}/${\n                      RouteData.selectedusertab !== undefined ? `${RouteData.selectedusertab}/` : \"\"\n                  }`\n                : (AppRoutes.userlist.link ?? AppRoutes.userlist.route);\n        },\n        file: \"User/Edit\",\n\n        loose: true,\n        navbarLoose: true,\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"user\"\n    },\n    usercreate: {\n        name: \"routes.usercreate\",\n        route: \"/users/create/\",\n\n        link: \"/users/create/\",\n        file: \"User/Create\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.WriteUsers),\n\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"user\"\n    },\n    admin: {\n        name: \"routes.admin\",\n        route: \"/admin/\",\n        file: \"Administration\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(\n            AdministrationRights.ChangeVersion |\n                AdministrationRights.DownloadLogs |\n                AdministrationRights.UploadVersion\n        ),\n\n        visibleNavbar: true,\n        homeIcon: \"tools\",\n\n        category: \"admin\",\n        catleader: true\n    },\n    admin_update: {\n        name: \"routes.admin.update\",\n        route: \"/admin/update/:all?/\",\n        file: \"Admin/Update\",\n\n        link: \"/admin/update/\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(\n            AdministrationRights.ChangeVersion | AdministrationRights.UploadVersion\n        ),\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"admin\"\n    },\n    admin_logs: {\n        name: \"routes.admin.logs\",\n        route: \"/admin/logs/:name?/\",\n        link: \"/admin/logs/\",\n        file: \"Admin/Logs\",\n\n        loose: false,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.DownloadLogs),\n        visibleNavbar: true,\n        homeIcon: undefined,\n\n        category: \"admin\",\n\n        noContainer: true\n    },\n    passwd: {\n        name: \"routes.passwd\",\n        route: \"/users/passwd/:id(\\\\d+)?/\",\n        link: \"/users/passwd/\",\n        file: \"ChangePassword\",\n\n        loose: true,\n        navbarLoose: true,\n\n        isAuthorized: adminRight(AdministrationRights.EditOwnPassword),\n\n        visibleNavbar: false,\n        homeIcon: \"key\"\n    },\n    config: {\n        name: \"routes.config\",\n        route: \"/config/\",\n        file: \"Configuration\",\n\n        loose: true,\n        navbarLoose: true,\n\n        loginless: true,\n\n        visibleNavbar: false,\n        homeIcon: \"cogs\"\n    },\n    setup: {\n        name: \"routes.setup\",\n        route: \"/setup/\",\n        file: \"Setup\",\n\n        loose: true,\n        navbarLoose: true,\n\n        loginless: true,\n\n        visibleNavbar: false\n    },\n    oAuth: {\n        name: \"routes.oauth\",\n        route: \"/oauth/:provider?/\",\n        file: \"Login\",\n\n        loose: true,\n        navbarLoose: false,\n\n        loginless: true,\n\n        visibleNavbar: false\n    },\n    info: {\n        name: \"routes.info\",\n        route: \"/info\",\n        file: \"Info\",\n\n        loose: false,\n        navbarLoose: false,\n\n        loginless: true,\n\n        visibleNavbar: true,\n        homeIcon: \"info-circle\",\n\n        category: undefined,\n        catleader: false\n    }\n});\n\nexport { AppRoutes };\n\n//https://stackoverflow.com/questions/54598322/how-to-make-typescript-infer-the-keys-of-an-object-but-define-type-of-its-value\n//Infer the keys but restrict the values to a type\nconst asElementTypesCategory = <T>(et: { [K in keyof T]: UnpopulatedAppCategory }) => et;\n\nexport type UnpopulatedAppCategory = Partial<AppCategory>;\n\nexport interface AppCategory {\n    name: string; //doesnt really matter, kinda bullshit\n    routes: AppRoute[];\n    leader: AppRoute;\n}\n\nexport const UnpopulatedAppCategories = asElementTypesCategory({\n    home: {\n        name: \"home\"\n    },\n    instance: {\n        name: \"instance\"\n    },\n    user: {\n        name: \"user\"\n    },\n    admin: {\n        name: \"admin\"\n    }\n});\n\n// @ts-expect-error This is populated in the constructor after its populated\nexport const AppCategories: { [K in keyof typeof UnpopulatedAppCategories]: AppCategory } = {};\n\nexport const RouteData = {\n    selecteduserid: undefined as undefined | number,\n    selectedusertab: undefined as undefined | string,\n\n    selectedinstanceid: undefined as undefined | number,\n    selectedinstanceedittab: undefined as undefined | string,\n\n    instancelistpage: undefined as undefined | number,\n    loglistpage: undefined as undefined | number,\n    byondlistpage: undefined as undefined | number,\n    userlistpage: undefined as undefined | number,\n    jobhistorypage: new Map<number, number>(),\n\n    oautherrors: [] as InternalError<ErrorCode>[]\n};\n","var map = {\n\t\"./Admin/Logs\": [\n\t\t8153,\n\t\t8785,\n\t\t8153\n\t],\n\t\"./Admin/Logs.tsx\": [\n\t\t8153,\n\t\t8785,\n\t\t8153\n\t],\n\t\"./Admin/Update\": [\n\t\t784,\n\t\t8785,\n\t\t1323,\n\t\t6670,\n\t\t5331,\n\t\t784\n\t],\n\t\"./Admin/Update.tsx\": [\n\t\t784,\n\t\t8785,\n\t\t1323,\n\t\t6670,\n\t\t5331,\n\t\t784\n\t],\n\t\"./Administration\": [\n\t\t1266,\n\t\t8785,\n\t\t1266\n\t],\n\t\"./Administration.tsx\": [\n\t\t1266,\n\t\t8785,\n\t\t1266\n\t],\n\t\"./ChangePassword\": [\n\t\t6643,\n\t\t6643\n\t],\n\t\"./ChangePassword.tsx\": [\n\t\t6643,\n\t\t6643\n\t],\n\t\"./Configuration\": [\n\t\t3536,\n\t\t8325,\n\t\t3536\n\t],\n\t\"./Configuration.tsx\": [\n\t\t3536,\n\t\t8325,\n\t\t3536\n\t],\n\t\"./Home\": [\n\t\t997,\n\t\t997\n\t],\n\t\"./Home.tsx\": [\n\t\t997,\n\t\t997\n\t],\n\t\"./Info\": [\n\t\t2852,\n\t\t8785,\n\t\t2852\n\t],\n\t\"./Info.tsx\": [\n\t\t2852,\n\t\t8785,\n\t\t2852\n\t],\n\t\"./Instance/Create\": [\n\t\t6822,\n\t\t9013,\n\t\t1930,\n\t\t6105,\n\t\t8143,\n\t\t4366,\n\t\t1323,\n\t\t6670,\n\t\t6822\n\t],\n\t\"./Instance/Create.tsx\": [\n\t\t6822,\n\t\t9013,\n\t\t1930,\n\t\t6105,\n\t\t8143,\n\t\t4366,\n\t\t1323,\n\t\t6670,\n\t\t6822\n\t],\n\t\"./Instance/Edit/ChatBots\": [\n\t\t3763,\n\t\t4614,\n\t\t8785,\n\t\t3763,\n\t\t5727\n\t],\n\t\"./Instance/Edit/ChatBots.tsx\": [\n\t\t3763,\n\t\t4614,\n\t\t8785,\n\t\t3763,\n\t\t5727\n\t],\n\t\"./Instance/Edit/Config\": [\n\t\t2153,\n\t\t8785,\n\t\t2153\n\t],\n\t\"./Instance/Edit/Config.tsx\": [\n\t\t2153,\n\t\t8785,\n\t\t2153\n\t],\n\t\"./Instance/Edit/Deployment\": [\n\t\t5998,\n\t\t9013,\n\t\t1930,\n\t\t8785,\n\t\t1323,\n\t\t4717,\n\t\t9600,\n\t\t8463\n\t],\n\t\"./Instance/Edit/Deployment.tsx\": [\n\t\t5998,\n\t\t9013,\n\t\t1930,\n\t\t8785,\n\t\t1323,\n\t\t4717,\n\t\t9600,\n\t\t8463\n\t],\n\t\"./Instance/Edit/Engine\": [\n\t\t4717,\n\t\t9013,\n\t\t8785,\n\t\t1323,\n\t\t4717,\n\t\t6983\n\t],\n\t\"./Instance/Edit/Engine.tsx\": [\n\t\t4717,\n\t\t9013,\n\t\t8785,\n\t\t1323,\n\t\t4717,\n\t\t6983\n\t],\n\t\"./Instance/Edit/Files\": [\n\t\t1606,\n\t\t6105,\n\t\t8785,\n\t\t1606,\n\t\t5318\n\t],\n\t\"./Instance/Edit/Files.tsx\": [\n\t\t1606,\n\t\t6105,\n\t\t8785,\n\t\t1606,\n\t\t5318\n\t],\n\t\"./Instance/Edit/InstancePermissions\": [\n\t\t9496,\n\t\t1903,\n\t\t8785,\n\t\t9496,\n\t\t8284\n\t],\n\t\"./Instance/Edit/InstancePermissions.tsx\": [\n\t\t9496,\n\t\t1903,\n\t\t8785,\n\t\t9496,\n\t\t8284\n\t],\n\t\"./Instance/Edit/JobHistory\": [\n\t\t9272,\n\t\t8785,\n\t\t9272\n\t],\n\t\"./Instance/Edit/JobHistory.tsx\": [\n\t\t9272,\n\t\t8785,\n\t\t9272\n\t],\n\t\"./Instance/Edit/Repository\": [\n\t\t3649,\n\t\t1930,\n\t\t8143,\n\t\t8785,\n\t\t1323,\n\t\t6805,\n\t\t3649,\n\t\t2396\n\t],\n\t\"./Instance/Edit/Repository.tsx\": [\n\t\t3649,\n\t\t1930,\n\t\t8143,\n\t\t8785,\n\t\t1323,\n\t\t6805,\n\t\t3649,\n\t\t2396\n\t],\n\t\"./Instance/Edit/Server\": [\n\t\t8018,\n\t\t9013,\n\t\t4366,\n\t\t8785,\n\t\t1323,\n\t\t4717,\n\t\t9600,\n\t\t8018,\n\t\t5846\n\t],\n\t\"./Instance/Edit/Server.tsx\": [\n\t\t8018,\n\t\t9013,\n\t\t4366,\n\t\t8785,\n\t\t1323,\n\t\t4717,\n\t\t9600,\n\t\t8018,\n\t\t5846\n\t],\n\t\"./Instance/InstanceEdit\": [\n\t\t9248,\n\t\t9013,\n\t\t1930,\n\t\t6105,\n\t\t8143,\n\t\t4366,\n\t\t1903,\n\t\t4614,\n\t\t8785,\n\t\t1323,\n\t\t6805,\n\t\t9642,\n\t\t4717,\n\t\t9600,\n\t\t3649,\n\t\t3763,\n\t\t1606,\n\t\t9496,\n\t\t8018,\n\t\t6867\n\t],\n\t\"./Instance/InstanceEdit.tsx\": [\n\t\t9248,\n\t\t9013,\n\t\t1930,\n\t\t6105,\n\t\t8143,\n\t\t4366,\n\t\t1903,\n\t\t4614,\n\t\t8785,\n\t\t1323,\n\t\t6805,\n\t\t9642,\n\t\t4717,\n\t\t9600,\n\t\t3649,\n\t\t3763,\n\t\t1606,\n\t\t9496,\n\t\t8018,\n\t\t6867\n\t],\n\t\"./Instance/Jobs\": [\n\t\t2554,\n\t\t2554\n\t],\n\t\"./Instance/Jobs.tsx\": [\n\t\t2554,\n\t\t2554\n\t],\n\t\"./Instance/List\": [\n\t\t9538,\n\t\t8785,\n\t\t9538\n\t],\n\t\"./Instance/List.tsx\": [\n\t\t9538,\n\t\t8785,\n\t\t9538\n\t],\n\t\"./Login\": [\n\t\t1241\n\t],\n\t\"./Login.tsx\": [\n\t\t1241\n\t],\n\t\"./Setup\": [\n\t\t3773,\n\t\t3773\n\t],\n\t\"./Setup.tsx\": [\n\t\t3773,\n\t\t3773\n\t],\n\t\"./User/Create\": [\n\t\t3890,\n\t\t3890\n\t],\n\t\"./User/Create.tsx\": [\n\t\t3890,\n\t\t3890\n\t],\n\t\"./User/Edit\": [\n\t\t7148,\n\t\t1903,\n\t\t8785,\n\t\t7148\n\t],\n\t\"./User/Edit.tsx\": [\n\t\t7148,\n\t\t1903,\n\t\t8785,\n\t\t7148\n\t],\n\t\"./User/List\": [\n\t\t7458,\n\t\t8785,\n\t\t7458\n\t],\n\t\"./User/List.tsx\": [\n\t\t7458,\n\t\t8785,\n\t\t7458\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function() { return Object.keys(map); };\nwebpackAsyncContext.id = 2212;\nmodule.exports = webpackAsyncContext;"],"names":["AppNavbar","React","constructor","props","super","this","logoutClick","bind","loginSuccess","logout","refresh","state","routes","categories","AppCategories","updateAvailable","checkShowServerUpdateIcon","ServerClient","wait4Init","userResponse","UserClient","getCurrentUser","code","StatusCode","ERROR","user","payload","permissionSet","resolvePermissionSet","hasAdminRight","AdministrationRights","ChangeVersion","response","AdminClient","getAdminInfo","OK","latestVersion","SemVer","currentVersion","context","serverInfo","version","compare","setState","componentDidMount","LoginHooks","on","RouteController","getRoutes","componentWillUnmount","removeListener","render","Navbar","className","expand","loggedIn","undefined","collapseOnSelect","variant","bg","Brand","onClick","history","push","AppRoutes","home","link","route","reload","renderVersion","Toggle","Collapse","style","minWidth","Nav","Object","values","map","cat","leader","cachedAuth","length","Item","key","name","Link","active","matchesPath","location","pathname","navbarLoose","FormattedMessage","id","NavDropdown","title","filter","value","val","catleader","visibleNavbar","OverlayTrigger","placement","overlay","Tooltip","_extends","FontAwesomeIcon","admin_update","icon","faExclamationCircle","renderUser","Dropdown","type","Menu","alignRight","info","config","passwd","emit","replace","Button","contextType","GeneralContext","withRouter","Logo","memeSelector","onToggle","showing","Math","round","random","width","height","src","ReportIssue","window","open","faExclamationTriangle","ErrorBoundary","componentDidUpdate","prevProps","error","errorInfo","componentDidCatch","Container","Card","border","Header","Body","Title","message","Text","as","VERSION","MODE","componentStack","children","Reload","Component","clear","match","path","LoadSpin","page","Loading","text","NotFound","loadable","fallback","Router","refreshListener","components","Map","getImmediateRoutes","forEach","set","file","loading","URLSearchParams","search","get","listen","listener","URLSearch","replaceState","document","oauthstate","JSON","parse","sessionStorage","getItem","setErrorAndEnd","InternalError","ErrorCode","LOGIN_BAD_OAUTH","jsError","Error","url","login","CredentialsType","OAuth","provider","token","removeItem","RouteData","oautherrors","category","selectCategory","Switch","loginless","Route","exact","loose","Comp","AccessDenied","noContainer","ErrorAlert","APP_FAIL","Login","loggedOut","InnerApp","Pkg","addEventListener","event","ctrlKey","shiftKey","CredentialsProvider","BrowserRouter","basename","publicPath","URL","href","DEFAULT_BASEPATH","passdownCat","Alert","Heading","Array","from","errors","idx","onClose","deleteError","toString","JobsList","GenericAlert","goBack","popup","handleClose","dismissible","handleOpen","Modal","centered","show","onHide","size","closeButton","desc","DescType","LOCALE","ClickToSelect","API_VERSION","extendedInfo","Footer","addError","setErrors","prevState","displayErrors","err","index","prev","newarr","body","JobError","setOpen","useState","job","errorCode","TGSErrorCode","description","exceptionDetails","JobCard","createddate","Date","startedAt","createddiff","getTime","now","stoppeddiff","stoppedAt","cancelled","Toast","maxWidth","ToastHeader","ToastBody","stage","toLocaleString","ref","triggerHandler","FormattedRelativeTime","numeric","updateIntervalInSeconds","startedBy","cancelledBy","ProgressBar","animated","label","progress","striped","canCancel","padding","onCancel","widgetRef","currentTimeout","handleUpdate","jobs","JobsController","jobsByInstance","nextRetrySeconds","ownerrors","instances","current","scrollTop","clearTimeout","nextRetry","getSeconds","setTimeout","accessibleInstances","cancelJob","fastmode","clearJob","widget","nested","display","totalJobs","configOptions","jobswidgetdisplay","jobsWidgetOptions","NEVER","ALWAYS","position","top","bottom","right","left","pointerEvents","zIndex","Rnd","default","x","documentElement","clientWidth","min","y","clientHeight","minHeight","bounds","seconds","sort","a","b","instanceid","jobMap","xFinishedEnabled","instanceHeaderStyle","marginTop","marginLeft","amount","faTimes","e","defaultProps","submit","console","log","busy","validated","username","password","credentials","tryLoginDefault","redirectSetup","hasToken","providers","OAuthProvider","GitHub","faGithub","Discord","faDiscord","TGForums","alt","Keycloak","InvisionCommunity","faInvision","providersTheme","Col","lg","md","Form","onSubmit","Group","controlId","Label","Control","placeholder","onChange","target","required","block","oAuthProviderInfos","keys","ptheme","background","startOAuth","stateArray","Uint8Array","crypto","getRandomValues","dec","padStart","join","encodeURIComponent","clientId","redirectUri","serverUrl","oauthdata","setItem","stringify","Promise","resolve","preventDefault","Password","userName","TypedEmitter","refreshing","rtcontroller","refreshRoutes","addHook","catch","time","catmap","entries","UnpopulatedAppCategories","timeEnd","work","isAuthorized","then","auth","all","routesNoAuth","wait4refresh","results","adminRight","async","administrationRights","instanceManagerRight","instanceManagerRights","homeIcon","instancecreate","InstanceManagerRights","Create","instancelist","List","Read","instanceedit","selectedinstanceid","selectedinstanceedittab","instancejobs","userlist","useredit","selecteduserid","selectedusertab","usercreate","WriteUsers","admin","DownloadLogs","UploadVersion","admin_logs","EditOwnPassword","setup","oAuth","instance","instancelistpage","loglistpage","byondlistpage","userlistpage","jobhistorypage","webpackAsyncContext","req","__webpack_require__","o","ids","slice","module","exports"],"sourceRoot":""}