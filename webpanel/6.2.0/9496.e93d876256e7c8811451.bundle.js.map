{"version":3,"file":"9496.e93d876256e7c8811451.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/InstancePermissions.tsx"],"sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { Alert, Col, Form, InputGroup, Tab, Tabs } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\n\nimport {\n    AdministrationRights,\n    ChatBotRights,\n    ConfigurationRights,\n    DreamDaemonRights,\n    DreamMakerRights,\n    EngineRights,\n    InstanceManagerRights,\n    InstancePermissionSetResponse,\n    InstancePermissionSetRights,\n    InstanceResponse,\n    RepositoryRights,\n    UserGroup,\n    UserResponse\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport InstanceClient from \"../../../../ApiClient/InstanceClient\";\nimport InstancePermissionSetClient from \"../../../../ApiClient/InstancePermissionSetClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport UserClient from \"../../../../ApiClient/UserClient\";\nimport UserGroupClient from \"../../../../ApiClient/UserGroupClient\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport {\n    hasAdminRight,\n    hasInstanceManagerRight,\n    hasInstancePermRight,\n    resolvePermissionSet\n} from \"../../../../utils/misc\";\nimport { AppRoutes, RouteData } from \"../../../../utils/routes\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport InputField, { AnyEnum, FieldType } from \"../../../utils/InputField\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\n\ntype IProps = RouteComponentProps;\n\ninterface Permission {\n    readonly bitflag: number;\n    readonly currentVal: boolean;\n}\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    loading: boolean;\n    loadingPerms: boolean;\n    instanceNeedsReload: boolean;\n    tab: string;\n    users?: UserResponse[] | null;\n    groups?: UserGroup[] | null;\n    instancePermissionSets?: InstancePermissionSetResponse[];\n    selectedPermissionSetId: number;\n    userPermissions: InstancePermissionSetResponse;\n    currentPermissions: InstancePermissionSetResponse | null;\n    permsinstancepermissionset: Record<string, Permission>;\n    permsrepository: Record<string, Permission>;\n    permsengine: Record<string, Permission>;\n    permsdreammaker: Record<string, Permission>;\n    permsdreamdaemon: Record<string, Permission>;\n    permschatbots: Record<string, Permission>;\n    permsconfiguration: Record<string, Permission>;\n}\n\nclass InstancePermissions extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.loadCurrentPermissions = this.loadCurrentPermissions.bind(this);\n        this.createPermissionSetForCurrent = this.createPermissionSetForCurrent.bind(this);\n        this.grantPermissions = this.grantPermissions.bind(this);\n\n        this.state = {\n            errors: [],\n            loading: true,\n            loadingPerms: true,\n            instanceNeedsReload: false,\n            tab: \"instancepermissionsetperms\",\n            userPermissions: {\n                permissionSetId: 0,\n                instancePermissionSetRights: 0,\n                repositoryRights: 0,\n                engineRights: 0,\n                dreamMakerRights: 0,\n                dreamDaemonRights: 0,\n                chatBotRights: 0,\n                configurationRights: 0\n            }, // updated correctly in DidMount using context\n            currentPermissions: null,\n            selectedPermissionSetId: 0,\n            permsinstancepermissionset: {},\n            permsrepository: {},\n            permsengine: {},\n            permsdreammaker: {},\n            permsdreamdaemon: {},\n            permschatbots: {},\n            permsconfiguration: {}\n        };\n    }\n\n    private loadEnums(newPermissionSet: InstancePermissionSetResponse): void {\n        this.setState({\n            currentPermissions: newPermissionSet\n        });\n\n        const loadEnum = <\n            T extends Record<string, string | number>,\n            U extends keyof typeof newPermissionSet,\n            V extends keyof typeof this.state\n        >(\n            permEnum: T,\n            permSourceField: U,\n            permTargetField: V\n        ) => {\n            Object.entries(permEnum).forEach(([k, v]) => {\n                /* enums are objects that are reverse mapped, for example, an enum with a = 1 and b = 2 would look like this:\n                 * {\n                 *   \"a\": 1,\n                 *   \"b\": 2,\n                 *   1: \"a\",\n                 *   2: \"b\"\n                 * }\n                 * so we need to drop everything that doesnt resolve to a string because otherwise we end up with twice the values\n                 */\n                if (!isNaN(parseInt(k))) return;\n\n                const key = k.toLowerCase();\n                const val = v as number;\n\n                //we dont care about nothing\n                if (key == \"none\") return;\n\n                const currentVal = !!(newPermissionSet[permSourceField] & val);\n                this.setState(\n                    prevState =>\n                        ({\n                            [permTargetField]: {\n                                ...(prevState[permTargetField] as Record<string, Permission>),\n                                [key]: {\n                                    currentVal: currentVal,\n                                    bitflag: val\n                                }\n                            }\n                        }) as unknown as IState\n                );\n            });\n        };\n\n        loadEnum(\n            InstancePermissionSetRights,\n            \"instancePermissionSetRights\",\n            \"permsinstancepermissionset\"\n        );\n        loadEnum(RepositoryRights, \"repositoryRights\", \"permsrepository\");\n        loadEnum(EngineRights, \"engineRights\", \"permsengine\");\n        loadEnum(DreamMakerRights, \"dreamMakerRights\", \"permsdreammaker\");\n        loadEnum(DreamDaemonRights, \"dreamDaemonRights\", \"permsdreamdaemon\");\n        loadEnum(ChatBotRights, \"chatBotRights\", \"permschatbots\");\n        loadEnum(ConfigurationRights, \"configurationRights\", \"permsconfiguration\");\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    private async loadCurrentPermissions(selectedPermissionSetId: number) {\n        this.setState({\n            loadingPerms: true\n        });\n\n        if (selectedPermissionSetId === resolvePermissionSet(this.context.user).id) {\n            // This can hit the cache and seem \"too\" fast.\n            // slow it down a little\n            const sanicSpeedLimit = new Promise(r => setTimeout(r, 200));\n            const response = await InstancePermissionSetClient.getCurrentInstancePermissionSet(\n                this.context.instance.id,\n                true\n            );\n            await sanicSpeedLimit;\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    userPermissions: response.payload\n                });\n\n                this.loadEnums(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n        } else if (\n            hasInstancePermRight(\n                this.context.instancePermissionSet,\n                InstancePermissionSetRights.Read\n            )\n        ) {\n            const response = await InstancePermissionSetClient.getByPermissionSetId(\n                this.context.instance.id,\n                selectedPermissionSetId\n            );\n            if (response.code === StatusCode.OK) {\n                this.loadEnums(response.payload);\n            } else if (response.error.code == ErrorCode.NO_DB_ENTITY) {\n                // null it out, meaning it can be created\n                this.setState({\n                    currentPermissions: null\n                });\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        this.setState({\n            loadingPerms: false\n        });\n    }\n\n    private async loadUsersAndGroups(): Promise<void> {\n        const permissionSet = resolvePermissionSet(this.context.user);\n\n        if (!hasAdminRight(permissionSet, AdministrationRights.ReadUsers)) {\n            // leave as null so we know to use local data to parse\n            this.setState({\n                groups: null,\n                users: null\n            });\n            return;\n        }\n\n        let loadedFromRemote = false;\n\n        // load all users\n        const usersResponsePromise = UserClient.listUsers({\n            page: 1,\n            pageSize: 100\n        });\n        const groupsResponse = await UserGroupClient.listGroups({\n            page: 1,\n            pageSize: 100\n        });\n\n        loadedFromRemote = true;\n        if (groupsResponse.code === StatusCode.OK) {\n            this.setState({\n                groups: groupsResponse.payload.content\n            });\n        } else {\n            this.addError(groupsResponse.error);\n            loadedFromRemote = false;\n        }\n\n        // only add in users whose permission sets aren't covered by groups\n        const usersResponse = await usersResponsePromise;\n        if (usersResponse.code === StatusCode.OK) {\n            this.setState({\n                users: usersResponse.payload.content.filter(userResponse => !userResponse.group)\n            });\n        } else {\n            this.addError(usersResponse.error);\n            loadedFromRemote = false;\n        }\n\n        if (!loadedFromRemote) {\n            if (this.context.user.group) {\n                // best we can do\n                this.setState({\n                    groups: [this.context.user.group],\n                    users: []\n                });\n            } else {\n                this.setState({\n                    groups: [],\n                    users: [this.context.user]\n                });\n            }\n        }\n    }\n\n    private async loadAllPermissionSets(): Promise<void> {\n        let loadedPermissionSets = false;\n        if (\n            hasInstancePermRight(\n                this.context.instancePermissionSet,\n                InstancePermissionSetRights.Read\n            )\n        ) {\n            const response = await InstancePermissionSetClient.listInstancePermissionSets(\n                this.context.instance.id,\n                {\n                    page: 1,\n                    pageSize: 100\n                }\n            );\n            if (response.code === StatusCode.OK) {\n                this.setState({\n                    instancePermissionSets: response.payload.content\n                });\n                loadedPermissionSets = true;\n            } else {\n                this.addError(response.error);\n            }\n        }\n\n        if (!loadedPermissionSets) {\n            this.setState({\n                instancePermissionSets: [this.context.instancePermissionSet]\n            });\n        }\n    }\n\n    private async createPermissionSetForCurrent(): Promise<void> {\n        const response = await InstancePermissionSetClient.createInstancePermissionSet(\n            this.context.instance.id,\n            {\n                permissionSetId: this.state.selectedPermissionSetId\n            }\n        );\n\n        if (response.code != StatusCode.OK) {\n            this.addError(response.error);\n        } else {\n            this.setState({\n                currentPermissions: response.payload\n            });\n        }\n    }\n\n    private async grantPermissions(): Promise<void> {\n        // permissions checked on input\n        const instanceedit = await InstanceClient.grantPermissions({\n            id: this.context.instance.id\n        } as unknown as InstanceResponse);\n\n        if (instanceedit.code != StatusCode.OK) {\n            this.addError(instanceedit.error);\n        } else {\n            await this.loadCurrentPermissions(this.state.selectedPermissionSetId);\n        }\n    }\n\n    private async deletePermissionSet(): Promise<void> {\n        if (\n            !confirm(\n                \"Are you sure you want to delete this permission set? The selected user/group will lose access to the instance.\"\n            )\n        ) {\n            return;\n        }\n\n        const response = await InstancePermissionSetClient.deleteInstancePermissionSet(\n            this.context.instance.id,\n            this.state.selectedPermissionSetId\n        );\n\n        // no entity is good enough for us\n        if (response.code != StatusCode.OK && response.error.code != ErrorCode.NO_DB_ENTITY) {\n            this.addError(response.error);\n        } else if (\n            this.state.selectedPermissionSetId === resolvePermissionSet(this.context.user).id\n        ) {\n            // kick 'em out\n            RouteData.selectedinstanceid = undefined;\n            this.props.history.push(AppRoutes.instancelist.link ?? AppRoutes.instancelist.route);\n        } else {\n            this.setState({\n                currentPermissions: null\n            });\n        }\n    }\n\n    public async componentDidMount(): Promise<void> {\n        const currentPermissionSetId = resolvePermissionSet(this.context.user).id!;\n        this.setState({\n            selectedPermissionSetId: currentPermissionSetId,\n            userPermissions: this.context.instancePermissionSet\n        });\n\n        const prom = this.loadCurrentPermissions(currentPermissionSetId);\n        const prom2 = this.loadAllPermissionSets();\n        await this.loadUsersAndGroups();\n        await prom;\n        await prom2;\n\n        this.setState({\n            loading: false\n        });\n    }\n\n    public async componentWillUnmount(): Promise<void> {\n        if (this.state.instanceNeedsReload) {\n            await this.context.reloadInstance();\n        }\n    }\n\n    public render(): React.ReactNode {\n        if (this.state.loading) {\n            return <Loading text=\"loading.instance.perms\" />;\n        }\n\n        const ownersMap = new Map<string, number>();\n        const ownersList: AnyEnum = {};\n\n        if (this.state.users && this.state.groups) {\n            this.state.users?.forEach(user => {\n                const key = `User: ${user.name}${user.id === this.context.user.id ? \" (You)\" : \"\"}`;\n                ownersMap.set(key, user.permissionSet!.id!);\n                ownersList[key] = user.permissionSet!.id!;\n            });\n            this.state.groups?.forEach(group => {\n                const key = `Group: ${group.name}${\n                    group.id === this.context.user.group?.id ? \" (Your Group)\" : \"\"\n                }`;\n                ownersMap.set(key, group.permissionSet.id!);\n                ownersList[key] = group.permissionSet.id!;\n            });\n        } else {\n            if (this.context.user.group) {\n                const key = `Group: ${this.context.user.group.name} (Your Group)`;\n                ownersMap.set(key, this.context.user.group.permissionSet.id!);\n                ownersList[key] = this.context.user.group.permissionSet.id!;\n            } else {\n                const key = `User: ${this.context.user.name} (You)`;\n                ownersMap.set(key, this.context.user.permissionSet!.id!);\n                ownersList[key] = this.context.user.permissionSet!.id!;\n            }\n\n            this.state.instancePermissionSets?.forEach(instancePermissionSet => {\n                if (\n                    instancePermissionSet.permissionSetId ===\n                    resolvePermissionSet(this.context.user).id\n                ) {\n                    return;\n                }\n\n                const key = `Permission Set ${instancePermissionSet.permissionSetId}`;\n                ownersMap.set(key, instancePermissionSet.permissionSetId);\n                ownersList[key] = instancePermissionSet.permissionSetId;\n            });\n        }\n\n        return (\n            <div className=\"text-center\">\n                <h1>\n                    <FormattedMessage id=\"view.instance.perms\" />\n                </h1>\n                <DebugJsonViewer obj={this.state} />\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n                <InputField\n                    name=\"fields.instance.perms.owner\"\n                    type={FieldType.Enum}\n                    enum={ownersList}\n                    noLocalize\n                    defaultValue={this.state.selectedPermissionSetId}\n                    disabled={\n                        this.context.instancePermissionSet.instancePermissionSetRights ===\n                        InstancePermissionSetRights.None\n                    }\n                    onChange={newPermissionSetId => {\n                        this.setState({\n                            selectedPermissionSetId: newPermissionSetId\n                        });\n                        void this.loadCurrentPermissions(newPermissionSetId);\n                    }}\n                />\n                <hr />\n                {this.renderPermissionEditor()}\n            </div>\n        );\n    }\n\n    private renderPermissionEditor(): React.ReactNode {\n        if (this.state.loadingPerms) {\n            return <Loading text=\"loading.perms\" />;\n        }\n\n        let canGrant = false;\n        let post = <React.Fragment />;\n        const currentPermissionSet = resolvePermissionSet(this.context.user);\n        if (\n            currentPermissionSet.id === this.state.selectedPermissionSetId &&\n            hasInstanceManagerRight(currentPermissionSet, InstanceManagerRights.GrantPermissions) &&\n            (!this.state.currentPermissions ||\n                !hasInstancePermRight(\n                    this.state.currentPermissions,\n                    InstancePermissionSetRights.Write\n                ))\n        ) {\n            canGrant = true;\n            post = (\n                <React.Fragment>\n                    <hr />\n                    <h5>\n                        <FormattedMessage id=\"view.instance.perms.grant.desc\" />\n                    </h5>\n                    <Button variant=\"success\" onClick={() => void this.grantPermissions()}>\n                        <FormattedMessage id=\"view.instance.perms.grant\" />\n                    </Button>\n                </React.Fragment>\n            );\n        }\n\n        if (!this.state.currentPermissions) {\n            const canCreate = hasInstancePermRight(\n                this.state.userPermissions,\n                InstancePermissionSetRights.Create\n            );\n\n            return (\n                <div className=\"text-center mt-2\">\n                    <h3>\n                        <FormattedMessage id=\"view.instance.perms.missing\" />\n                    </h3>\n                    {canGrant ? (\n                        <React.Fragment /> // Realistically, this should never trigger\n                    ) : (\n                        <React.Fragment>\n                            <br />\n                            <OverlayTrigger\n                                placement=\"top\"\n                                overlay={props => (\n                                    <Tooltip id=\"create-ips-tooltop\" {...props}>\n                                        <FormattedMessage id=\"view.instance.perms.create\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    variant=\"success\"\n                                    disabled={!canCreate}\n                                    onClick={() => void this.createPermissionSetForCurrent()}>\n                                    <FormattedMessage id=\"view.instance.perms.create\" />\n                                </Button>\n                            </OverlayTrigger>\n                        </React.Fragment>\n                    )}\n                </div>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {this.renderEditorTabs()}\n                {post}\n            </React.Fragment>\n        );\n    }\n\n    private renderEditorTabs(): React.ReactNode {\n        const canEdit = hasInstancePermRight(\n            this.state.userPermissions,\n            InstancePermissionSetRights.Write\n        );\n\n        return (\n            <React.Fragment>\n                {canEdit ? (\n                    <React.Fragment />\n                ) : (\n                    <Alert className=\"clearfix\" variant=\"error\">\n                        <FormattedMessage id=\"perms.instancepermissionset.cantedit\" />\n                    </Alert>\n                )}\n                <Tabs\n                    activeKey={this.state.tab}\n                    onSelect={newkey => {\n                        if (newkey) {\n                            this.setState({\n                                tab: newkey\n                            });\n                        }\n                    }}\n                    id=\"permission-tabs\"\n                    className=\"justify-content-center mb-3 mt-4 flex-column flex-md-row\">\n                    <Tab\n                        eventKey=\"instancepermissionsetperms\"\n                        title={<FormattedMessage id=\"perms.instancepermissionset\" />}>\n                        {this.renderPerms(\n                            \"permsinstancepermissionset\",\n                            \"instancepermissionset\",\n                            canEdit\n                        )}\n                    </Tab>\n                    <Tab\n                        eventKey=\"repositoryperms\"\n                        title={<FormattedMessage id=\"perms.repository\" />}>\n                        {this.renderPerms(\"permsrepository\", \"repository\", canEdit)}\n                    </Tab>\n                    <Tab eventKey=\"engineperms\" title={<FormattedMessage id=\"perms.engine\" />}>\n                        {this.renderPerms(\"permsengine\", \"engine\", canEdit)}\n                    </Tab>\n                    <Tab\n                        eventKey=\"dreammakerperms\"\n                        title={<FormattedMessage id=\"perms.dreammaker\" />}>\n                        {this.renderPerms(\"permsdreammaker\", \"dreammaker\", canEdit)}\n                    </Tab>\n                    <Tab\n                        eventKey=\"dreamdaemonperms\"\n                        title={<FormattedMessage id=\"perms.dreamdaemon\" />}>\n                        {this.renderPerms(\"permsdreamdaemon\", \"dreamdaemon\", canEdit)}\n                    </Tab>\n                    <Tab eventKey=\"chatbotsperms\" title={<FormattedMessage id=\"perms.chatbots\" />}>\n                        {this.renderPerms(\"permschatbots\", \"chatbots\", canEdit)}\n                    </Tab>\n                    <Tab\n                        eventKey=\"configurationperms\"\n                        title={<FormattedMessage id=\"perms.configuration\" />}>\n                        {this.renderPerms(\"permsconfiguration\", \"configuration\", canEdit)}\n                    </Tab>\n                </Tabs>\n                {this.state.tab === \"instancepermissionsetperms\" && canEdit ? (\n                    <React.Fragment>\n                        <br />\n                        <Button variant=\"danger\" onClick={() => void this.deletePermissionSet()}>\n                            <FormattedMessage id=\"view.instance.perms.delete\" />\n                        </Button>\n                    </React.Fragment>\n                ) : (\n                    <React.Fragment />\n                )}\n            </React.Fragment>\n        );\n    }\n\n    private renderPerms(\n        enumname:\n            | \"permsinstancepermissionset\"\n            | \"permsrepository\"\n            | \"permsengine\"\n            | \"permsdreammaker\"\n            | \"permsdreamdaemon\"\n            | \"permschatbots\"\n            | \"permsconfiguration\",\n        permprefix: string,\n        canEdit: boolean\n    ): React.ReactNode {\n        const inputs: Record<\n            string,\n            { input: React.RefObject<HTMLInputElement>; field: React.RefObject<HTMLDivElement> }\n        > = {};\n        const setBold = (\n            inputRef: React.RefObject<HTMLInputElement>,\n            fieldRef: React.RefObject<HTMLDivElement>,\n            defaultVal: boolean\n        ) => {\n            if (!inputRef.current || !fieldRef.current) return;\n            if (inputRef.current.checked !== defaultVal) {\n                fieldRef.current.classList.add(\"font-weight-bold\");\n            } else {\n                fieldRef.current.classList.remove(\"font-weight-bold\");\n            }\n        };\n        const setAll = (val: boolean): (() => void) => {\n            return () => {\n                for (const [permname, refs] of Object.entries(inputs)) {\n                    if (!refs.input.current) return;\n\n                    refs.input.current.checked = val;\n                    setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n                }\n            };\n        };\n        const resetAll = () => {\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                refs.input.current.checked = this.state[enumname][permname].currentVal;\n                setBold(refs.input, refs.field, this.state[enumname][permname].currentVal);\n            }\n        };\n        const save = async () => {\n            this.setState({\n                loadingPerms: true\n            });\n\n            let bitflag = 0;\n\n            for (const [permname, refs] of Object.entries(inputs)) {\n                if (!refs.input.current) continue;\n\n                bitflag += refs.input.current.checked ? this.state[enumname][permname].bitflag : 0;\n            }\n\n            if (!this.state.currentPermissions) {\n                this.addError(\n                    new InternalError(ErrorCode.APP_FAIL, {\n                        jsError: Error(\"this.state.user is null in user edit save\")\n                    })\n                );\n                return;\n            }\n\n            let rightsType: string;\n            switch (enumname) {\n                case \"permsinstancepermissionset\":\n                    rightsType = \"InstancePermissionSetRights\";\n                    break;\n                case \"permsrepository\":\n                    rightsType = \"RepositoryRights\";\n                    break;\n                case \"permsengine\":\n                    rightsType = \"EngineRights\";\n                    break;\n                case \"permsdreammaker\":\n                    rightsType = \"DreamMakerRights\";\n                    break;\n                case \"permsdreamdaemon\":\n                    rightsType = \"DreamDaemonRights\";\n                    break;\n                case \"permschatbots\":\n                    rightsType = \"ChatBotRights\";\n                    break;\n                case \"permsconfiguration\":\n                    rightsType = \"ConfigurationRights\";\n                    break;\n            }\n\n            const newset = Object.assign(Object.assign({}, this.state.currentPermissions), {\n                [rightsType]: bitflag\n            } as\n                | { InstancePermissionSetRights: InstancePermissionSetRights }\n                | { RepositoryRights: RepositoryRights }\n                | { EngineRights: EngineRights }\n                | { DreamMakerRights: DreamMakerRights }\n                | { DreamDaemonRights: DreamDaemonRights }\n                | { ChatBotRights: ChatBotRights }\n                | { ConfigurationRights: ConfigurationRights });\n\n            const response = await InstancePermissionSetClient.updateInstancePermissionSet(\n                this.context.instance.id,\n                newset\n            );\n\n            if (response.code == StatusCode.OK) {\n                if (newset.permissionSetId === this.state.userPermissions?.permissionSetId) {\n                    this.setState({\n                        userPermissions: response.payload,\n                        instanceNeedsReload: true\n                    });\n                }\n\n                this.loadEnums(response.payload);\n            } else {\n                this.addError(response.error);\n            }\n\n            this.setState({\n                loadingPerms: false\n            });\n        };\n\n        return (\n            <React.Fragment>\n                {canEdit ? (\n                    <React.Fragment>\n                        <h5>\n                            <FormattedMessage id=\"generic.setall\" />\n                        </h5>\n                        <Button onClick={setAll(true)}>\n                            <FormattedMessage id=\"generic.true\" />\n                        </Button>{\" \"}\n                        <Button onClick={setAll(false)}>\n                            <FormattedMessage id=\"generic.false\" />\n                        </Button>{\" \"}\n                        <Button onClick={resetAll}>\n                            <FormattedMessage id=\"generic.reset\" />\n                        </Button>\n                    </React.Fragment>\n                ) : (\n                    \"\"\n                )}\n                <Col md={8} lg={7} xl={6} className=\"mx-auto\">\n                    <hr />\n                    {Object.entries(this.state[enumname]).map(([perm, value]) => {\n                        const inputRef = React.createRef<HTMLInputElement>();\n                        const fieldRef = React.createRef<HTMLDivElement>();\n                        inputs[perm] = { input: inputRef, field: fieldRef };\n                        return (\n                            <InputGroup\n                                key={`${enumname}.${perm}`}\n                                as=\"label\"\n                                htmlFor={perm}\n                                className=\"mb-0\">\n                                <InputGroup.Prepend className=\"flex-grow-1 overflow-auto\">\n                                    <OverlayTrigger\n                                        overlay={\n                                            <Tooltip id={`perms.${permprefix}.${perm}.desc`}>\n                                                <FormattedMessage\n                                                    id={`perms.${permprefix}.${perm}.desc`}\n                                                />\n                                            </Tooltip>\n                                        }>\n                                        {({ ref, ...triggerHandler }) => (\n                                            <InputGroup.Text className=\"flex-fill\" ref={fieldRef}>\n                                                <div {...triggerHandler}>\n                                                    <FormattedMessage\n                                                        id={`perms.${permprefix}.${perm}`}\n                                                    />\n                                                </div>\n                                                <div className=\"ml-auto d-flex align-items-center\">\n                                                    <Form.Check\n                                                        inline\n                                                        type=\"switch\"\n                                                        custom\n                                                        id={`${enumname}.${perm}`}\n                                                        className=\"d-flex justify-content-center align-content-center mx-2\"\n                                                        label=\"\"\n                                                        ref={inputRef}\n                                                        disabled={!canEdit}\n                                                        defaultChecked={value.currentVal}\n                                                        onChange={() => {\n                                                            setBold(\n                                                                inputRef,\n                                                                fieldRef,\n                                                                value.currentVal\n                                                            );\n                                                        }}\n                                                    />\n                                                    <div\n                                                        {...triggerHandler}\n                                                        ref={ref as React.Ref<HTMLDivElement>}>\n                                                        <FontAwesomeIcon fixedWidth icon=\"info\" />\n                                                    </div>\n                                                </div>\n                                            </InputGroup.Text>\n                                        )}\n                                    </OverlayTrigger>\n                                </InputGroup.Prepend>\n                            </InputGroup>\n                        );\n                    })}\n                    <hr />\n                </Col>\n                {canEdit ? (\n                    <Button onClick={() => void save()}>\n                        <FormattedMessage id=\"generic.savetab\" />\n                    </Button>\n                ) : (\n                    \"\"\n                )}\n            </React.Fragment>\n        );\n    }\n}\n\nInstancePermissions.contextType = InstanceEditContext;\nexport default withRouter(InstancePermissions);\n"],"names":["InstancePermissions","React","constructor","props","super","this","loadCurrentPermissions","bind","createPermissionSetForCurrent","grantPermissions","state","errors","loading","loadingPerms","instanceNeedsReload","tab","userPermissions","permissionSetId","instancePermissionSetRights","repositoryRights","engineRights","dreamMakerRights","dreamDaemonRights","chatBotRights","configurationRights","currentPermissions","selectedPermissionSetId","permsinstancepermissionset","permsrepository","permsengine","permsdreammaker","permsdreamdaemon","permschatbots","permsconfiguration","loadEnums","newPermissionSet","setState","loadEnum","permEnum","permSourceField","permTargetField","Object","entries","forEach","k","v","isNaN","parseInt","key","toLowerCase","val","currentVal","prevState","bitflag","InstancePermissionSetRights","RepositoryRights","EngineRights","DreamMakerRights","DreamDaemonRights","ChatBotRights","ConfigurationRights","addError","error","Array","from","push","resolvePermissionSet","context","user","id","sanicSpeedLimit","Promise","r","setTimeout","response","InstancePermissionSetClient","getCurrentInstancePermissionSet","instance","code","StatusCode","OK","payload","hasInstancePermRight","instancePermissionSet","Read","getByPermissionSetId","ErrorCode","NO_DB_ENTITY","loadUsersAndGroups","permissionSet","hasAdminRight","AdministrationRights","ReadUsers","groups","users","loadedFromRemote","usersResponsePromise","UserClient","listUsers","page","pageSize","groupsResponse","UserGroupClient","listGroups","content","usersResponse","filter","userResponse","group","loadAllPermissionSets","loadedPermissionSets","listInstancePermissionSets","instancePermissionSets","createInstancePermissionSet","instanceedit","InstanceClient","deletePermissionSet","confirm","deleteInstancePermissionSet","RouteData","selectedinstanceid","undefined","history","AppRoutes","instancelist","link","route","componentDidMount","currentPermissionSetId","prom","prom2","componentWillUnmount","reloadInstance","render","Loading","text","ownersMap","Map","ownersList","name","set","className","FormattedMessage","DebugJsonViewer","obj","map","err","index","ErrorAlert","onClose","prev","newarr","InputField","type","FieldType","Enum","enum","noLocalize","defaultValue","disabled","None","onChange","newPermissionSetId","renderPermissionEditor","canGrant","post","currentPermissionSet","hasInstanceManagerRight","InstanceManagerRights","GrantPermissions","Write","Button","variant","onClick","canCreate","Create","OverlayTrigger","placement","overlay","Tooltip","_extends","renderEditorTabs","canEdit","Alert","Tabs","activeKey","onSelect","newkey","Tab","eventKey","title","renderPerms","enumname","permprefix","inputs","setBold","inputRef","fieldRef","defaultVal","current","checked","classList","add","remove","setAll","permname","refs","input","field","save","async","rightsType","InternalError","APP_FAIL","jsError","Error","newset","assign","updateInstancePermissionSet","resetAll","Col","md","lg","xl","perm","value","InputGroup","as","htmlFor","Prepend","ref","triggerHandler","Text","Form","Check","inline","custom","label","defaultChecked","FontAwesomeIcon","fixedWidth","icon","contextType","InstanceEditContext","withRouter"],"sourceRoot":""}