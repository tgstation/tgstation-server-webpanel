{"version":3,"file":"7255.de01d4625d310070300c.bundle.js","mappings":"4bAIA,MAAMA,EAAqBC,EAAAA,MAAW,IAAM,iCAc7B,MAAMC,UAAgBD,EAAAA,UAQ1BE,MAAAA,GACH,OACIF,EAAAA,cAACG,EAAAA,SAAQ,CAACC,SAAUC,KAAKC,iBACrBN,EAAAA,cAACD,EAAkB,KAAEM,KAAKC,iBAGtC,CAEQA,aAAAA,GACJ,MAAM,QACFC,EAAO,UACPC,EAAS,OACTC,EAAM,UACNC,EAAS,MACTC,EAAK,UACLC,EAAS,KACTC,EAAI,SACJC,KACGC,GACHV,KAAKW,MACHC,EAA8B,CAChCN,MAAO,GAAGA,IAAQC,IAClBM,OAAQ,GAAGP,IAAQC,KAGvB,OACIZ,EAAAA,cAAA,OAAKU,UAAWD,EAAS,cAAgB,IACrCT,EAAAA,cAACmB,EAAAA,EAAOC,EAAA,CACJb,QAASA,GAAoB,YAC7BG,UAAWD,EAAS,mBAAmBC,GAAa,KAAOA,EAC3DW,MAAOJ,EACPT,UAAWA,GAAwB,UAC/BO,IAEPF,EAAOR,KAAKW,MAAMM,OAAST,EAAOb,EAAAA,cAACuB,EAAAA,EAAgB,CAACC,GAAIX,IAAW,GACnEC,EAGb,EA9CiBb,EACHwB,aAAe,CACzBjB,UAAW,SACXG,MAAO,KACPC,UAAW,OACXH,QAAQ,E","sources":["webpack://tgstation-server-control-panel/./src/components/utils/Loading.tsx"],"sourcesContent":["import React, { Suspense } from \"react\";\nimport Spinner, { SpinnerProps } from \"react-bootstrap/Spinner\";\nimport { FormattedMessage } from \"react-intl\";\n\nconst CssTransitionGroup = React.lazy(() => import(\"./CssTransitionGroup\"));\n\ntype IProps = SpinnerProps & {\n    animation: \"border\" | \"grow\";\n    center: boolean;\n    width: number;\n    widthUnit: string;\n    className?: string;\n    text?: string;\n    noIntl?: boolean;\n};\n\ntype IState = object;\n\nexport default class Loading extends React.Component<IProps, IState> {\n    public static defaultProps = {\n        animation: \"border\",\n        width: \"50\",\n        widthUnit: \"vmin\",\n        center: true\n    };\n\n    public render(): React.ReactNode {\n        return (\n            <Suspense fallback={this.renderSpinner()}>\n                <CssTransitionGroup>{this.renderSpinner()}</CssTransitionGroup>\n            </Suspense>\n        );\n    }\n\n    private renderSpinner(): NonNullable<React.ReactNode> {\n        const {\n            variant,\n            animation,\n            center,\n            className,\n            width,\n            widthUnit,\n            text,\n            children,\n            ...otherprops\n        } = this.props;\n        const styles: React.CSSProperties = {\n            width: `${width}${widthUnit}`,\n            height: `${width}${widthUnit}`\n        } as React.CSSProperties;\n\n        return (\n            <div className={center ? \"text-center\" : \"\"}>\n                <Spinner\n                    variant={variant ? variant : \"secondary\"}\n                    className={center ? `d-block mx-auto ${className ?? \"\"}` : className}\n                    style={styles}\n                    animation={animation ? animation : \"border\"}\n                    {...otherprops}\n                />\n                {text ? this.props.noIntl ? text : <FormattedMessage id={text} /> : \"\"}\n                {children}\n            </div>\n        );\n    }\n}\n"],"names":["CssTransitionGroup","React","Loading","render","Suspense","fallback","this","renderSpinner","variant","animation","center","className","width","widthUnit","text","children","otherprops","props","styles","height","Spinner","_extends","style","noIntl","FormattedMessage","id","defaultProps"],"sourceRoot":""}