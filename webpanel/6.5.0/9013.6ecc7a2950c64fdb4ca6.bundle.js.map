{"version":3,"file":"9013.6ecc7a2950c64fdb4ca6.bundle.js","mappings":"sNAiBA,QAAoB,cAA2BA,EAAAA,EAC3C,sBAAaC,CACTC,GAIA,IAAIC,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAIC,qBAAqB,CAC9DC,QAAS,CACLC,SAAUR,EAASS,aAG/B,CAAE,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OACS,MADDT,EAASe,OAEF,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASjB,EAASkB,OAIf,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,mBACV,CAAEC,cAAetB,GACjBA,IAKpB,CAEA,qBAAauB,CACTxB,GACA,KAAEyB,EAAO,EAAC,SAAEC,EAAWC,EAAAA,GAAcC,aAAaC,QAIlD,IAAI5B,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAIyB,qBACzC,CACIL,KAAMA,EACNC,SAAUA,GAEd,CACInB,QAAS,CACLC,SAAUR,EAASS,aAInC,CAAE,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OACS,MADDT,EAASe,OAEF,IAAIL,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASjB,EAASkB,OAIf,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,mBACV,CAAEC,cAAetB,GACjBA,IAKpB,CAEA,mBAAa8B,CACT/B,EACAgC,GAIA,IAAI/B,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAI4B,uBACzC,CACID,iBAEJ,CACIzB,QAAS,CACLC,SAAUR,EAASS,aAInC,CAAE,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQT,EAASe,QACb,KAAK,IAAK,CACN,MAAMkB,EAAejC,EAASkB,KAC9B,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASgB,GAEjB,CACA,KAAK,IACD,OAAO,IAAIvB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GAAcC,EAAAA,GAAUc,mBAAoB,CACnDC,aAAcnC,EAASkB,SAGnC,KAAK,IACD,OAAO,IAAIR,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUgB,yBACV,CACID,aAAcnC,EAASkB,MAE3BlB,KAIZ,QACI,OAAO,IAAIU,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,mBACV,CAAEC,cAAetB,GACjBA,KAKpB,CAEA,kBAAaqC,CACTtC,EACAgC,EACAO,GAIA,IAAItC,QAFEC,EAAAA,EAAaC,YAGnB,IACIF,QAAiBC,EAAAA,EAAaE,UAAWC,IAAImC,uBACzC,CACIR,gBACAS,kBAAmBF,GAEvB,CACIhC,QAAS,CACLC,SAAUR,EAASS,aAInC,CAAE,MAAOC,GACL,OAAO,IAAIC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAOL,GAEf,CAEA,OAAQT,EAASe,QACb,KAAK,IACL,KAAK,IAAK,CACN,MAAMkB,EAAejC,EAASkB,KAC9B,GAAIe,EAAaQ,WAAY,CACzB,GAAIH,EAAM,CACN,MAAMI,QAAkBC,EAAAA,EAAeC,OACnCX,EAAaQ,WACbH,GAEJ,OAAII,EAAU/B,OAASC,EAAAA,EAAWI,GACvB,IAAIN,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASgB,IAGN,IAAIvB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO4B,EAAU5B,OAG7B,CACI,OAAO,IAAIJ,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GAAcC,EAAAA,GAAUyB,SAAU,CACzCC,QAASC,MACL,0FAKpB,CAEA,OAAO,IAAIrC,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWI,GACjBC,QAASgB,GAEjB,CACA,QACI,OAAO,IAAIvB,EAAAA,EAAe,CACtBC,KAAMC,EAAAA,EAAWC,MACjBC,MAAO,IAAIK,EAAAA,GACPC,EAAAA,GAAUC,mBACV,CAAEC,cAAetB,GACjBA,KAKpB,E","sources":["webpack://tgstation-server-control-panel/./src/ApiClient/EngineClient.ts"],"sourcesContent":["import { ApiClient } from \"./_base\";\nimport {\n    EngineInstallResponse,\n    EngineResponse,\n    EngineVersion,\n    ErrorMessageResponse,\n    JobResponse,\n    PaginatedEngineResponse\n} from \"./generatedcode/generated\";\nimport InternalError, { ErrorCode, GenericErrors } from \"./models/InternalComms/InternalError\";\nimport InternalStatus, { StatusCode } from \"./models/InternalComms/InternalStatus\";\nimport ServerClient from \"./ServerClient\";\nimport TransferClient, { UploadErrors } from \"./TransferClient\";\nimport configOptions from \"./util/config\";\n\nexport type DeleteErrors = GenericErrors | ErrorCode.ENGINE_VERSION_NOT_FOUND;\n\nexport default new (class EngineClient extends ApiClient {\n    public async getActiveVersion(\n        instance: number\n    ): Promise<InternalStatus<EngineResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.engineControllerRead({\n                headers: {\n                    Instance: instance.toString()\n                }\n            });\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as EngineResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async listAllVersions(\n        instance: number,\n        { page = 1, pageSize = configOptions.itemsperpage.value as number }\n    ): Promise<InternalStatus<PaginatedEngineResponse, GenericErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.engineControllerList(\n                {\n                    page: page,\n                    pageSize: pageSize\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200: {\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: response.data as PaginatedEngineResponse\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async deleteVersion(\n        instance: number,\n        engineVersion: EngineVersion\n    ): Promise<InternalStatus<JobResponse, DeleteErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.engineControllerDelete(\n                {\n                    engineVersion\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 202: {\n                const responseData = response.data as JobResponse;\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: responseData\n                });\n            }\n            case 409:\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(ErrorCode.HTTP_DATA_INEGRITY, {\n                        errorMessage: response.data as ErrorMessageResponse\n                    })\n                });\n            case 410: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.ENGINE_VERSION_NOT_FOUND,\n                        {\n                            errorMessage: response.data as ErrorMessageResponse\n                        },\n                        response\n                    )\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n\n    public async switchActive(\n        instance: number,\n        engineVersion: EngineVersion,\n        file?: ArrayBuffer\n    ): Promise<InternalStatus<EngineInstallResponse, UploadErrors>> {\n        await ServerClient.wait4Init();\n\n        let response;\n        try {\n            response = await ServerClient.apiClient!.api.engineControllerUpdate(\n                {\n                    engineVersion,\n                    uploadCustomZip: !!file\n                },\n                {\n                    headers: {\n                        Instance: instance.toString()\n                    }\n                }\n            );\n        } catch (stat) {\n            return new InternalStatus({\n                code: StatusCode.ERROR,\n                error: stat as InternalError<GenericErrors>\n            });\n        }\n\n        switch (response.status) {\n            case 200:\n            case 202: {\n                const responseData = response.data as EngineInstallResponse;\n                if (responseData.fileTicket) {\n                    if (file) {\n                        const response2 = await TransferClient.Upload(\n                            responseData.fileTicket,\n                            file\n                        );\n                        if (response2.code === StatusCode.OK) {\n                            return new InternalStatus({\n                                code: StatusCode.OK,\n                                payload: responseData\n                            });\n                        } else {\n                            return new InternalStatus({\n                                code: StatusCode.ERROR,\n                                error: response2.error\n                            });\n                        }\n                    } else {\n                        return new InternalStatus({\n                            code: StatusCode.ERROR,\n                            error: new InternalError(ErrorCode.APP_FAIL, {\n                                jsError: Error(\n                                    \"switchActive is uploading a custom zip without actually having a zip file to upload\"\n                                )\n                            })\n                        });\n                    }\n                }\n\n                return new InternalStatus({\n                    code: StatusCode.OK,\n                    payload: responseData\n                });\n            }\n            default: {\n                return new InternalStatus({\n                    code: StatusCode.ERROR,\n                    error: new InternalError(\n                        ErrorCode.UNHANDLED_RESPONSE,\n                        { axiosResponse: response },\n                        response\n                    )\n                });\n            }\n        }\n    }\n})();\n"],"names":["ApiClient","getActiveVersion","instance","response","ServerClient","wait4Init","apiClient","api","engineControllerRead","headers","Instance","toString","stat","InternalStatus","code","StatusCode","ERROR","error","status","OK","payload","data","InternalError","ErrorCode","UNHANDLED_RESPONSE","axiosResponse","listAllVersions","page","pageSize","configOptions","itemsperpage","value","engineControllerList","deleteVersion","engineVersion","engineControllerDelete","responseData","HTTP_DATA_INEGRITY","errorMessage","ENGINE_VERSION_NOT_FOUND","switchActive","file","engineControllerUpdate","uploadCustomZip","fileTicket","response2","TransferClient","Upload","APP_FAIL","jsError","Error"],"sourceRoot":""}