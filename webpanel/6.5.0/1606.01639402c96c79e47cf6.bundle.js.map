{"version":3,"file":"1606.01639402c96c79e47cf6.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/DownloadCard.tsx","webpack://tgstation-server-control-panel/./src/components/utils/WIPNotice.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Files.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Alert, Collapse, ProgressBar } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { ProgressEvent } from \"../../ApiClient/TransferClient\";\n\nexport interface IDownloadProps {\n    filename: string;\n    progress: ProgressEvent;\n    onClose: () => void;\n}\n\ninterface IState {\n    animatedOpen: boolean;\n    closeTriggered: boolean;\n}\n\nexport class DownloadCard extends React.Component<IDownloadProps, IState> {\n    public constructor(props: IDownloadProps) {\n        super(props);\n        this.state = {\n            animatedOpen: false,\n            closeTriggered: false\n        };\n    }\n\n    public componentDidMount(): void {\n        this.setState({\n            animatedOpen: true\n        });\n\n        if (this.isCompleted()) {\n            this.close();\n        }\n    }\n\n    public componentDidUpdate(): void {\n        if (this.isCompleted()) {\n            this.close();\n        }\n    }\n\n    private isCompleted(props?: Readonly<IDownloadProps>): boolean {\n        props ??= this.props;\n        const completed =\n            props.progress.loaded === props.progress.total || props.progress.total === 0;\n        return completed;\n    }\n\n    private close(): void {\n        if (this.state.closeTriggered) {\n            return;\n        }\n        this.setState({\n            closeTriggered: true\n        });\n\n        setTimeout(() => {\n            this.setState({\n                animatedOpen: false\n            });\n            setTimeout(this.props.onClose, 1000);\n        }, 3000);\n    }\n\n    public render(): React.ReactNode {\n        const completed =\n            this.props.progress.loaded === this.props.progress.total ||\n            this.props.progress.total === 0;\n        return (\n            <Collapse in={this.state.animatedOpen} dimension=\"height\">\n                <div>\n                    <Alert\n                        className=\"clearfix\"\n                        variant={completed ? \"success\" : \"primary\"}\n                        transition>\n                        <FormattedMessage\n                            id={completed ? \"generic.downloaded\" : \"generic.downloading\"}\n                            values={{ file: this.props.filename }}\n                        />\n                        <hr />\n                        <ProgressBar\n                            min={0}\n                            now={Math.max(1, this.props.progress.loaded)}\n                            max={Math.max(1, this.props.progress.total ?? 1)}\n                            variant={completed ? \"success\" : \"warning\"}\n                            animated={!completed}\n                        />\n                    </Alert>\n                </div>\n            </Collapse>\n        );\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport { MODE, VERSION } from \"../../definitions/constants\";\n\nexport default class WIPNotice extends React.Component {\n    public render(): ReactNode {\n        return (\n            <Card className=\"bg-transparent\" border=\"info\">\n                <Card.Header className=\"bg-info text-dark font-weight-bold\">\n                    <FormattedMessage id=\"generic.wip\" />\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        <FormattedMessage id=\"generic.wip.desc\" />\n                        <a href=\"https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\">\n                            https://github.com/tgstation/Tgstation.Server.ControlPanel/releases/latest\n                        </a>\n                    </Card.Title>\n                    <Card.Text as={\"pre\"} className=\"bg-transparent text-info\">\n                        <code>\n                            {`Version: ${VERSION}\\nWebpanel Mode: ${MODE}\\nCurrent route: ${window.location.toString()}`}\n                        </code>\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n","import {\r\n    faDownload,\r\n    faFile,\r\n    faFileAlt,\r\n    faFolderMinus,\r\n    faFolderPlus,\r\n    faTimes\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { downloadZip } from \"client-zip\";\r\nimport React from \"react\";\r\nimport { Button, ButtonGroup, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from \"react-intl\";\r\n\r\nimport ConfigurationFileClient from \"../../../../ApiClient/ConfigurationFileClient\";\r\nimport {\r\n    ConfigurationFileResponse,\r\n    ConfigurationRights,\r\n    ConfigurationType\r\n} from \"../../../../ApiClient/generatedcode/generated\";\r\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\r\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\r\nimport TransferClient, { ProgressEvent } from \"../../../../ApiClient/TransferClient\";\r\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\r\nimport { hasFilesRight } from \"../../../../utils/misc\";\r\nimport { DownloadCard, IDownloadProps } from \"../../../utils/DownloadCard\";\r\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\r\nimport GenericAlert from \"../../../utils/GenericAlert\";\r\nimport { FieldType } from \"../../../utils/InputField\";\r\nimport InputForm from \"../../../utils/InputForm\";\r\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\r\nimport Loading from \"../../../utils/Loading\";\r\nimport WIPNotice from \"../../../utils/WIPNotice\";\r\n\r\n// https://stackoverflow.com/questions/24007073/open-links-made-by-createobjecturl-in-ie11/45732897#45732897\r\nconst downloadFileUsingBlob = (fileName: string, fileData: Blob) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-explicit-any\r\n    const unknownNav = window.navigator as any;\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\r\n    if (unknownNav && unknownNav.msSaveOrOpenBlob) {\r\n        // for IE\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n        unknownNav.msSaveOrOpenBlob(fileData, fileName);\r\n    } else {\r\n        // for Non-IE (chrome, firefox etc.)\r\n        const a = document.createElement(\"a\");\r\n        document.body.appendChild(a);\r\n        const fileUrl = URL.createObjectURL(fileData);\r\n        a.href = fileUrl;\r\n        a.download = fileName;\r\n        a.click();\r\n        URL.revokeObjectURL(a.href);\r\n        a.remove();\r\n    }\r\n};\r\n\r\ninterface CreateEntitySettings {\r\n    entityName: string;\r\n    isDirectory: boolean;\r\n    replace?: boolean;\r\n}\r\n\r\nclass DirectoryTree {\r\n    public parent: DirectoryTree | null;\r\n    public children: DirectoryTree[];\r\n    public fileResponse: ConfigurationFileResponse;\r\n    public totalFiles: number | undefined;\r\n    public fullyLoaded = false;\r\n\r\n    public constructor(fileResponse: ConfigurationFileResponse, parent?: DirectoryTree) {\r\n        this.fileResponse = fileResponse;\r\n        this.parent = parent ?? null;\r\n        if (!fileResponse.isDirectory) this.fullyLoaded = true;\r\n        this.children = [];\r\n    }\r\n}\r\n\r\ntype IProps = WrappedComponentProps;\r\n\r\ninterface IState {\r\n    errors: Array<InternalError<ErrorCode> | undefined>;\r\n    rootDirectory: DirectoryTree | null;\r\n    loading: boolean;\r\n    selectedFile: DirectoryTree | null;\r\n    selectedCreateNode: DirectoryTree | null;\r\n    downloads: (IDownloadProps | null)[];\r\n}\r\n\r\nclass Files extends React.Component<IProps, IState> {\r\n    public declare context: InstanceEditContext;\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            errors: [],\r\n            rootDirectory: null,\r\n            loading: true,\r\n            selectedFile: null,\r\n            selectedCreateNode: null,\r\n            downloads: []\r\n        };\r\n\r\n        this.createEntity = this.createEntity.bind(this);\r\n        this.selectFile = this.selectFile.bind(this);\r\n        this.shortAsyncAction = this.shortAsyncAction.bind(this);\r\n        this.deleteFile = this.deleteFile.bind(this);\r\n        this.loadDirectory = this.loadDirectory.bind(this);\r\n        this.clearDirectory = this.clearDirectory.bind(this);\r\n    }\r\n\r\n    private addError(error: InternalError<ErrorCode>): void {\r\n        this.setState(prevState => {\r\n            const errors = Array.from(prevState.errors);\r\n            errors.push(error);\r\n            return {\r\n                errors\r\n            };\r\n        });\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        void this.loadRootDir();\r\n    }\r\n\r\n    private async loadRootDir() {\r\n        if (hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.List)) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n            const mockResponse = {\r\n                path: \"/\",\r\n                isDirectory: true,\r\n                fileTicket: \"\"\r\n            };\r\n            const rootDirectory = new DirectoryTree(mockResponse);\r\n            await this.loadDirectory(rootDirectory);\r\n\r\n            this.setState({\r\n                rootDirectory: rootDirectory,\r\n                loading: false\r\n            });\r\n        } else {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        }\r\n    }\r\n\r\n    private async shortAsyncAction(action: () => Promise<void>): Promise<void> {\r\n        const actionPromise = action();\r\n\r\n        // only set state to loading if it's taking more than 750ms\r\n        let tookTooLong = false;\r\n        const tooLongPromise = new Promise(r => setTimeout(r, 750)).then(() => {\r\n            tookTooLong = true;\r\n        });\r\n\r\n        await Promise.race([actionPromise, tooLongPromise]);\r\n\r\n        if (tookTooLong) {\r\n            this.setState({\r\n                loading: true\r\n            });\r\n\r\n            await actionPromise;\r\n\r\n            this.setState({\r\n                loading: false\r\n            });\r\n        } else this.forceUpdate();\r\n    }\r\n\r\n    private async deleteDirectory(dir: DirectoryTree): Promise<void> {\r\n        const response = await ConfigurationFileClient.deleteDirectory(this.context.instance.id, {\r\n            path: dir.fileResponse.path\r\n        });\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            if (dir.parent != null) {\r\n                const parentIndex = dir.parent.children.indexOf(dir);\r\n                dir.parent.children.splice(parentIndex, 1);\r\n                this.forceUpdate();\r\n            }\r\n        } else {\r\n            this.addError(response.error);\r\n        }\r\n    }\r\n\r\n    private async loadDirectory(directory: DirectoryTree): Promise<void> {\r\n        if (hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.List)) {\r\n            this.clearDirectory(directory);\r\n\r\n            const path =\r\n                directory.fileResponse.path[0] === \"\\\\\" || directory.fileResponse.path[0] === \"/\"\r\n                    ? directory.fileResponse.path.slice(1)\r\n                    : directory.fileResponse.path;\r\n            let maxPages = 1;\r\n            for (let page = 1; page <= maxPages; ++page) {\r\n                const response = await ConfigurationFileClient.getDirectory(\r\n                    this.context.instance.id,\r\n                    path,\r\n                    {\r\n                        page\r\n                    }\r\n                );\r\n                if (response.code === StatusCode.OK) {\r\n                    maxPages = response.payload.totalPages;\r\n                    if (maxPages <= page) directory.fullyLoaded = true;\r\n                    const newChildren = response.payload.content.map(\r\n                        c => new DirectoryTree(c, directory)\r\n                    );\r\n                    for (const c of newChildren) {\r\n                        directory.children.push(c);\r\n                    }\r\n                } else {\r\n                    this.addError(response.error);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private async selectFile(file: DirectoryTree): Promise<void> {\r\n        if (this.state.selectedFile === file) {\r\n            this.setState({\r\n                selectedFile: null\r\n            });\r\n            return;\r\n        }\r\n\r\n        let doctoredPath = file.fileResponse.path;\r\n        while (doctoredPath.startsWith(\"/\")) doctoredPath = doctoredPath.substring(1);\r\n\r\n        if (!file.fileResponse.isDirectory) {\r\n            const response = await ConfigurationFileClient.getConfigFile(\r\n                this.context.instance.id,\r\n                doctoredPath,\r\n                null\r\n            );\r\n\r\n            const success = response.code === StatusCode.OK;\r\n            if (success) {\r\n                file.fileResponse = response.payload;\r\n            } else {\r\n                this.addError(response.error);\r\n                file.fileResponse.lastReadHash = null;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            selectedFile: file,\r\n            selectedCreateNode: null\r\n        });\r\n    }\r\n\r\n    private async deleteFile(): Promise<void> {\r\n        const selectedFile = this.state.selectedFile!;\r\n        const response = await ConfigurationFileClient.writeConfigFile(\r\n            this.context.instance.id,\r\n            {\r\n                path: selectedFile.fileResponse.path,\r\n                lastReadHash: selectedFile.fileResponse.lastReadHash\r\n            },\r\n            new Uint8Array()\r\n        );\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            const parentDirectory = selectedFile.parent!;\r\n            const parentIndex = parentDirectory.children.indexOf(selectedFile);\r\n            parentDirectory.children.splice(parentIndex, 1);\r\n            this.setState({\r\n                selectedFile: null\r\n            });\r\n        } else this.addError(response.error);\r\n    }\r\n\r\n    private async downloadDirectory(directory: DirectoryTree): Promise<void> {\r\n        if (\r\n            !confirm(\r\n                this.props.intl.formatMessage(\r\n                    { id: \"view.instance.files.zip.confirm\" },\r\n                    { path: directory.fileResponse.path }\r\n                )\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        const enumerateDirectory = async (\r\n            dir: ConfigurationFileResponse\r\n        ): Promise<ConfigurationFileResponse[] | null> => {\r\n            let children: ConfigurationFileResponse[] = [];\r\n            let maxPages = 1;\r\n\r\n            const path = dir.path[0] === \"\\\\\" || dir.path[0] === \"/\" ? dir.path.slice(1) : dir.path;\r\n            for (let page = 1; page <= maxPages; ++page) {\r\n                const directoryResponse = await ConfigurationFileClient.getDirectory(\r\n                    this.context.instance.id,\r\n                    path,\r\n                    {\r\n                        page\r\n                    }\r\n                );\r\n                if (directoryResponse.code === StatusCode.OK) {\r\n                    maxPages = directoryResponse.payload.totalPages;\r\n                    children = children.concat(directoryResponse.payload.content);\r\n                } else {\r\n                    this.addError(directoryResponse.error);\r\n                    return null;\r\n                }\r\n            }\r\n\r\n            return children;\r\n        };\r\n\r\n        let errorEncountered = false;\r\n        const downloadSingleFile = async (\r\n            file: ConfigurationFileResponse\r\n        ): Promise<() => Promise<File | null>> => {\r\n            const fileResponse = await ConfigurationFileClient.getConfigFile(\r\n                this.context.instance.id,\r\n                file.path,\r\n                null\r\n            );\r\n\r\n            const pathInZip = file.path.substring(directory.fileResponse.path.length);\r\n            if (fileResponse.code === StatusCode.OK) {\r\n                const phase2 = async (): Promise<File | null> => {\r\n                    const contents = await TransferClient.Download(\r\n                        fileResponse.payload.fileTicket,\r\n                        this.allocateDownload(pathInZip)\r\n                    );\r\n\r\n                    if (contents.code != StatusCode.OK) {\r\n                        this.addError(contents.error);\r\n                        return null;\r\n                    }\r\n\r\n                    const download = contents.payload;\r\n                    const file = new File([download], pathInZip);\r\n                    return file;\r\n                };\r\n\r\n                return phase2;\r\n            }\r\n\r\n            this.addError(fileResponse.error);\r\n            errorEncountered = true;\r\n            return () => Promise.resolve(null);\r\n        };\r\n\r\n        let directoriesToEnumerate: ConfigurationFileResponse[] = [directory.fileResponse];\r\n\r\n        const fileDownloads: Promise<File | null>[] = [];\r\n\r\n        while (directoriesToEnumerate.length > 0) {\r\n            const tasks: Promise<ConfigurationFileResponse[] | null>[] = [];\r\n            for (const directory of directoriesToEnumerate) {\r\n                const task = enumerateDirectory(directory);\r\n                await task;\r\n                tasks.push(task);\r\n            }\r\n\r\n            directoriesToEnumerate = [];\r\n\r\n            if (errorEncountered) {\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n                return;\r\n            }\r\n\r\n            for (const task of tasks) {\r\n                const dirInfo = await task;\r\n                if (dirInfo == null) {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                for (const directoryEntry of dirInfo) {\r\n                    if (directoryEntry.isDirectory) {\r\n                        directoriesToEnumerate.push(directoryEntry);\r\n                    } else {\r\n                        const innerPromiseFunc = await downloadSingleFile(directoryEntry);\r\n                        fileDownloads.push(innerPromiseFunc());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        await Promise.all(fileDownloads);\r\n        if (errorEncountered) {\r\n            this.setState({\r\n                loading: false\r\n            });\r\n            return;\r\n        }\r\n\r\n        const downloadFiles: File[] = [];\r\n        for (const fileDownload of fileDownloads) {\r\n            downloadFiles.push((await fileDownload)!);\r\n        }\r\n\r\n        const zipBlob = await downloadZip(downloadFiles).blob();\r\n\r\n        const index = Math.max(\r\n            directory.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            directory.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n\r\n        const fileName = directory.fileResponse.path.slice(index + 1) + \".zip\";\r\n        downloadFileUsingBlob(fileName, zipBlob);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private async downloadFile(): Promise<void> {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n\r\n        const selectedFile = this.state.selectedFile!;\r\n        const index = Math.max(\r\n            selectedFile.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            selectedFile.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const fileName = selectedFile.fileResponse.path.slice(index + 1);\r\n        const response = await ConfigurationFileClient.getConfigFile(\r\n            this.context.instance.id,\r\n            selectedFile.fileResponse.path,\r\n            this.allocateDownload(fileName)\r\n        );\r\n\r\n        if (response.code === StatusCode.OK) {\r\n            downloadFileUsingBlob(fileName, response.payload.content!);\r\n        } else this.addError(response.error);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private async createEntity(\r\n        settings: CreateEntitySettings,\r\n        parent: DirectoryTree\r\n    ): Promise<void> {\r\n        let fileData: ArrayBuffer;\r\n        if (settings.isDirectory) {\r\n            fileData = new Uint8Array();\r\n        } else {\r\n            const inputPromise = new Promise<File | null>(resolve => {\r\n                const input = document.createElement(\"input\");\r\n                input.type = \"file\";\r\n                input.onchange = e => {\r\n                    const files = (e.target as HTMLInputElement)?.files;\r\n                    if (files) resolve(files[0]);\r\n                    else resolve(null);\r\n                };\r\n                input.click();\r\n            });\r\n\r\n            const localFile = await inputPromise;\r\n            if (!localFile) return;\r\n\r\n            // https://stackoverflow.com/questions/423376/how-to-get-the-file-name-from-a-full-path-using-javascript\r\n            fileData = await localFile.arrayBuffer();\r\n        }\r\n\r\n        this.setState({ loading: true });\r\n\r\n        let remoteFilePath = parent.fileResponse.path;\r\n        if (!settings.replace) remoteFilePath += \"/\" + settings.entityName;\r\n        else remoteFilePath = \"/\" + remoteFilePath;\r\n        if (remoteFilePath.startsWith(\"//\")) remoteFilePath = remoteFilePath.substring(1);\r\n        if (settings.isDirectory) remoteFilePath += \"/webpanel.dir.create.tmp\";\r\n\r\n        const response = await ConfigurationFileClient.writeConfigFile(\r\n            this.context.instance.id,\r\n            {\r\n                path: remoteFilePath,\r\n                lastReadHash: settings.replace ? parent.fileResponse.lastReadHash : null\r\n            },\r\n            fileData\r\n        );\r\n\r\n        if (response.code !== StatusCode.OK) {\r\n            this.addError(response.error);\r\n        } else if (settings.replace) {\r\n            parent.fileResponse = response.payload;\r\n        }\r\n\r\n        if (!settings.replace) {\r\n            parent.fullyLoaded = false;\r\n            await this.loadDirectory(parent);\r\n        }\r\n\r\n        let normalizedRemotePath = remoteFilePath.replace(\"\\\\\", \"/\");\r\n        if (normalizedRemotePath.startsWith(\"/\"))\r\n            normalizedRemotePath = normalizedRemotePath.substring(1);\r\n        const newFileNode =\r\n            parent.children.find(child =>\r\n                normalizedRemotePath.startsWith(child.fileResponse.path.replace(\"\\\\\", \"/\"))\r\n            ) ?? null;\r\n\r\n        if (newFileNode)\r\n            if (settings.isDirectory) {\r\n                await this.loadDirectory(newFileNode);\r\n                this.setState({\r\n                    selectedCreateNode: null,\r\n                    selectedFile: null\r\n                });\r\n            } else await this.selectFile(newFileNode);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    }\r\n\r\n    private clearDirectory(directory: DirectoryTree): void {\r\n        // reload the directory\r\n        directory.fullyLoaded = false;\r\n        directory.children.forEach(child => {\r\n            if (child === this.state.selectedFile)\r\n                this.setState({\r\n                    selectedFile: null\r\n                });\r\n            else if (child === this.state.selectedCreateNode)\r\n                this.setState({\r\n                    selectedCreateNode: null\r\n                });\r\n            if (child.fileResponse.isDirectory) this.clearDirectory(child);\r\n        });\r\n\r\n        directory.children = [];\r\n    }\r\n\r\n    private allocateDownload(filename: string) {\r\n        const indexPromise = new Promise<number>(resolve => {\r\n            this.setState(prevState => {\r\n                const newDownloads = [...prevState.downloads];\r\n                resolve(newDownloads.push(null) - 1);\r\n                return {\r\n                    downloads: newDownloads\r\n                };\r\n            });\r\n        });\r\n        let latest = 0;\r\n        return (progress: ProgressEvent) => {\r\n            const ticket = ++latest;\r\n            void indexPromise.then(index => {\r\n                if (latest !== ticket) {\r\n                    return;\r\n                }\r\n\r\n                this.setState(prevState => {\r\n                    const newDownloads = [...prevState.downloads];\r\n                    newDownloads[index] = {\r\n                        filename,\r\n                        progress,\r\n                        onClose: () => {\r\n                            this.setState(prevState => {\r\n                                const newDownloads = [...prevState.downloads];\r\n                                newDownloads[index] = null;\r\n                                return {\r\n                                    downloads: newDownloads\r\n                                };\r\n                            });\r\n                        }\r\n                    };\r\n                    return {\r\n                        downloads: newDownloads\r\n                    };\r\n                });\r\n            });\r\n        };\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const downloadsFragment = (\r\n            <React.Fragment>\r\n                {this.state.downloads.map((download, index) => {\r\n                    if (!download) return;\r\n                    return <DownloadCard key={index} {...download} />;\r\n                })}\r\n            </React.Fragment>\r\n        );\r\n\r\n        if (this.state.loading) {\r\n            return (\r\n                <React.Fragment>\r\n                    {downloadsFragment}\r\n                    <Loading text=\"loading.instance.files\" />\r\n                </React.Fragment>\r\n            );\r\n        }\r\n\r\n        const instanceConfigMode = this.context.instance.configurationType;\r\n\r\n        if (instanceConfigMode === ConfigurationType.Disallowed) {\r\n            return (\r\n                <div className=\"text-center\">\r\n                    <GenericAlert title=\"view.instance.files.disallowed\" />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const canListDirectories = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.List\r\n        );\r\n\r\n        const canWrite = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Write\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <DebugJsonViewer obj={this.state} />\r\n                <h2 className=\"text-center\">\r\n                    <FormattedMessage id=\"view.instance.files.file_browser\" />\r\n                </h2>\r\n                {this.state.errors.map((err, index) => {\r\n                    if (!err) return;\r\n                    return (\r\n                        <ErrorAlert\r\n                            key={index}\r\n                            error={err}\r\n                            onClose={() =>\r\n                                this.setState(prev => {\r\n                                    const newarr = Array.from(prev.errors);\r\n                                    newarr[index] = undefined;\r\n                                    return {\r\n                                        errors: newarr\r\n                                    };\r\n                                })\r\n                            }\r\n                        />\r\n                    );\r\n                })}\r\n                {downloadsFragment}\r\n                <div className=\"d-flex flex-row\">\r\n                    {canListDirectories ? (\r\n                        <div\r\n                            className=\"text-left\"\r\n                            style={{\r\n                                paddingRight: \"16px\",\r\n                                maxHeight: \"800px\",\r\n                                minWidth: \"200px\",\r\n                                overflowY: \"scroll\"\r\n                            }}>\r\n                            {this.renderDirectory(this.state.rootDirectory!)}\r\n                        </div>\r\n                    ) : (\r\n                        <div\r\n                            style={{\r\n                                maxWidth: \"200px\"\r\n                            }}>\r\n                            <GenericAlert title=\"view.instance.files.disallowed.directory\" />\r\n                        </div>\r\n                    )}\r\n                    <div\r\n                        className=\"flex-fill flex-column text-center align-self-center\"\r\n                        style={{ padding: \"16px\" }}>\r\n                        {!canWrite ? (\r\n                            <GenericAlert title=\"view.instance.files.disallowed.write\" />\r\n                        ) : (\r\n                            <React.Fragment />\r\n                        )}\r\n                        {this.state.selectedCreateNode ? (\r\n                            this.renderCreate()\r\n                        ) : this.state.selectedFile ? (\r\n                            this.renderSelectedFile()\r\n                        ) : canListDirectories ? (\r\n                            <h4>\r\n                                <FormattedMessage id=\"view.instance.files.select_item\" />\r\n                            </h4>\r\n                        ) : (\r\n                            this.renderBrowserlessForms()\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderDirectory(dir: DirectoryTree): React.ReactNode {\r\n        const index = Math.max(\r\n            dir.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            dir.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const selected = dir === this.state.selectedFile;\r\n        if (!dir.fileResponse.isDirectory) {\r\n            const fileName = dir.fileResponse.path.slice(index + 1);\r\n            return (\r\n                <li className=\"browser-li\">\r\n                    <Button\r\n                        variant={selected ? \"secondary\" : \"primary\"}\r\n                        onClick={() => void this.shortAsyncAction(() => this.selectFile(dir))}\r\n                        className=\"nowrap\">\r\n                        <FontAwesomeIcon icon={faFileAlt} />\r\n                        &nbsp;{fileName}\r\n                    </Button>\r\n                </li>\r\n            );\r\n        }\r\n\r\n        const directoryName =\r\n            dir == this.state.rootDirectory\r\n                ? \"Configuration\"\r\n                : dir.fileResponse.path.slice(index + 1);\r\n\r\n        return (\r\n            <div className=\"mb-2\">\r\n                <ButtonGroup>\r\n                    <Button\r\n                        variant={!dir.fullyLoaded ? \"secondary\" : \"primary\"}\r\n                        onClick={() => {\r\n                            if (dir.fullyLoaded) {\r\n                                this.clearDirectory(dir);\r\n                                this.forceUpdate();\r\n                            } else {\r\n                                void this.shortAsyncAction(() => this.loadDirectory(dir));\r\n                            }\r\n                        }}>\r\n                        <FontAwesomeIcon icon={dir.fullyLoaded ? faFolderMinus : faFolderPlus} />\r\n                    </Button>\r\n                    <Button\r\n                        className=\"nowrap\"\r\n                        variant={selected ? \"secondary\" : \"primary\"}\r\n                        onClick={() => void this.shortAsyncAction(() => this.selectFile(dir))}>\r\n                        {directoryName}\r\n                    </Button>\r\n                </ButtonGroup>\r\n                <ul className=\"browser-ul\">\r\n                    {dir.children.map(subDir => (\r\n                        <li key={subDir.fileResponse.path}>{this.renderDirectory(subDir)}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderCreate(): React.ReactNode {\r\n        const fields = {\r\n            entityName: {\r\n                type: FieldType.String as FieldType.String,\r\n                name: \"fields.instance.files.create.name\",\r\n                tooltip: \"fields.instance.files.create.name.tip\",\r\n                defaultValue: \"\"\r\n            },\r\n            isDirectory: {\r\n                type: FieldType.Boolean as FieldType.Boolean,\r\n                name: \"fields.instance.files.create.directory\",\r\n                defaultValue: false\r\n            }\r\n        };\r\n\r\n        const createNode = this.state.selectedCreateNode!;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h5>\r\n                    {createNode.fileResponse.path}\r\n                    {createNode.parent ? \"/\" : \"\"}\r\n                </h5>\r\n                <h5>\r\n                    <FormattedMessage id=\"view.instance.files.create\" />\r\n                </h5>\r\n                <hr />\r\n                <InputForm\r\n                    fields={fields}\r\n                    onSave={(fields: CreateEntitySettings) =>\r\n                        void this.createEntity(fields, createNode)\r\n                    }\r\n                    saveMessageId=\"fields.instance.files.create\"\r\n                />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderSelectedFile(): React.ReactNode {\r\n        const canRead = hasFilesRight(this.context.instancePermissionSet, ConfigurationRights.Read);\r\n        const canWrite = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Write\r\n        );\r\n\r\n        const fileDirectoryTree = this.state.selectedFile!;\r\n        const index = Math.max(\r\n            fileDirectoryTree.fileResponse.path.lastIndexOf(\"\\\\\"),\r\n            fileDirectoryTree.fileResponse.path.lastIndexOf(\"/\")\r\n        );\r\n        const fileName = fileDirectoryTree.fileResponse.path.slice(index + 1);\r\n\r\n        const fileIsNotRefreshed =\r\n            !fileDirectoryTree.fileResponse.isDirectory &&\r\n            !fileDirectoryTree.fileResponse.lastReadHash;\r\n\r\n        const directoryName =\r\n            fileDirectoryTree == this.state.rootDirectory\r\n                ? \"Configuration\"\r\n                : fileDirectoryTree.fileResponse.path.slice(index + 1);\r\n        const selectedCreateNode = this.state.selectedCreateNode === fileDirectoryTree;\r\n\r\n        const canDeleteDirectories = hasFilesRight(\r\n            this.context.instancePermissionSet,\r\n            ConfigurationRights.Delete\r\n        );\r\n\r\n        let headerText = fileDirectoryTree.fileResponse.path.replaceAll(\"\\\\\", \"/\");\r\n        if (!headerText.startsWith(\"/\")) headerText = \"/\" + headerText;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <h5>{headerText}</h5>\r\n                <hr />\r\n                <div className=\"mb-3\">\r\n                    {!fileDirectoryTree.fileResponse.isDirectory ? (\r\n                        <React.Fragment>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-download-location-tooltip\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.download.location\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canRead}\r\n                                    onClick={() => void this.downloadFile()}>\r\n                                    <FormattedMessage id=\"view.instance.files.download\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={!canWrite || !fileIsNotRefreshed ? false : undefined}\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-not-refreshed-tooltip\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.replace.stale\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"warning\"\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canWrite || fileIsNotRefreshed}\r\n                                    onClick={() =>\r\n                                        void this.createEntity(\r\n                                            {\r\n                                                entityName: fileName,\r\n                                                isDirectory: false,\r\n                                                replace: true\r\n                                            },\r\n                                            fileDirectoryTree\r\n                                        )\r\n                                    }>\r\n                                    <FormattedMessage id=\"view.instance.files.replace\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={!canWrite || !fileIsNotRefreshed ? false : undefined}\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"file-not-refreshed-tooltip-delete\" {...props}>\r\n                                        <FormattedMessage id=\"view.instance.files.replace.stale\" />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    className=\"mx-2\"\r\n                                    disabled={!canWrite || fileIsNotRefreshed}\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            confirm(\r\n                                                this.props.intl.formatMessage(\r\n                                                    { id: \"view.instance.files.delete.confirm\" },\r\n                                                    { path: fileDirectoryTree.fileResponse.path }\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                            void this.shortAsyncAction(() => this.deleteFile());\r\n                                    }}>\r\n                                    <FormattedMessage id=\"view.instance.files.delete\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </React.Fragment>\r\n                    ) : (\r\n                        <React.Fragment>\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                className=\"mx-2 nowrap\"\r\n                                onClick={() => void this.downloadDirectory(fileDirectoryTree)}>\r\n                                <FontAwesomeIcon icon={faDownload} />\r\n                                &nbsp;\r\n                                <FormattedMessage id=\"view.instance.files.download.directory\" />\r\n                            </Button>\r\n                            <Button\r\n                                variant={selectedCreateNode ? \"secondary\" : \"primary\"}\r\n                                className=\"mx-2 nowrap\"\r\n                                onClick={() => {\r\n                                    if (this.state.selectedCreateNode != fileDirectoryTree) {\r\n                                        this.setState({\r\n                                            selectedCreateNode: fileDirectoryTree\r\n                                        });\r\n                                    }\r\n                                }}>\r\n                                <FontAwesomeIcon icon={faFile} />\r\n                                &nbsp;\r\n                                <FormattedMessage id=\"view.instance.files.create\" />\r\n                            </Button>\r\n                            <OverlayTrigger\r\n                                placement=\"top\"\r\n                                show={\r\n                                    canDeleteDirectories &&\r\n                                    fileDirectoryTree.fullyLoaded &&\r\n                                    fileDirectoryTree.children.length === 0\r\n                                        ? false\r\n                                        : undefined\r\n                                }\r\n                                overlay={props => (\r\n                                    <Tooltip id=\"cant-delete-dir-tooltip\" {...props}>\r\n                                        <FormattedMessage\r\n                                            id={\r\n                                                !fileDirectoryTree.fullyLoaded\r\n                                                    ? \"view.instance.files.delete.directory.populated.unloaded\"\r\n                                                    : canDeleteDirectories\r\n                                                      ? \"view.instance.files.delete.directory.populated\"\r\n                                                      : \"view.instance.files.disallowed.directory.delete\"\r\n                                            }\r\n                                        />\r\n                                    </Tooltip>\r\n                                )}>\r\n                                <Button\r\n                                    variant=\"danger\"\r\n                                    className=\"mx-2 nowrap\"\r\n                                    disabled={\r\n                                        !fileDirectoryTree.fullyLoaded ||\r\n                                        !canDeleteDirectories ||\r\n                                        fileDirectoryTree.children.length > 0 ||\r\n                                        fileDirectoryTree == this.state.rootDirectory\r\n                                    }\r\n                                    onClick={() => {\r\n                                        if (\r\n                                            confirm(\r\n                                                this.props.intl.formatMessage(\r\n                                                    {\r\n                                                        id: \"view.instance.files.delete.directory.confirm\"\r\n                                                    },\r\n                                                    { directoryName }\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                            void this.shortAsyncAction(() =>\r\n                                                this.deleteDirectory(fileDirectoryTree)\r\n                                            );\r\n                                    }}>\r\n                                    <FontAwesomeIcon icon={faTimes} />\r\n                                    &nbsp;\r\n                                    <FormattedMessage id=\"view.instance.files.delete.directory\" />\r\n                                </Button>\r\n                            </OverlayTrigger>\r\n                        </React.Fragment>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    private renderBrowserlessForms(): React.ReactNode {\r\n        return <WIPNotice />;\r\n    }\r\n}\r\n\r\nFiles.contextType = InstanceEditContext;\r\nexport default injectIntl(Files);\r\n"],"names":["DownloadCard","React","constructor","props","super","this","state","animatedOpen","closeTriggered","componentDidMount","setState","isCompleted","close","componentDidUpdate","progress","loaded","total","setTimeout","onClose","render","completed","Collapse","in","dimension","Alert","className","variant","transition","FormattedMessage","id","values","file","filename","ProgressBar","min","now","Math","max","animated","WIPNotice","Card","border","Header","Body","Title","href","Text","as","VERSION","MODE","window","location","toString","downloadFileUsingBlob","fileName","fileData","unknownNav","navigator","msSaveOrOpenBlob","a","document","createElement","body","appendChild","fileUrl","URL","createObjectURL","download","click","revokeObjectURL","remove","DirectoryTree","fileResponse","parent","children","totalFiles","fullyLoaded","isDirectory","Files","errors","rootDirectory","loading","selectedFile","selectedCreateNode","downloads","createEntity","bind","selectFile","shortAsyncAction","deleteFile","loadDirectory","clearDirectory","addError","error","prevState","Array","from","push","loadRootDir","hasFilesRight","context","instancePermissionSet","ConfigurationRights","List","path","fileTicket","action","actionPromise","tookTooLong","tooLongPromise","Promise","r","then","race","forceUpdate","deleteDirectory","dir","response","ConfigurationFileClient","instance","code","StatusCode","OK","parentIndex","indexOf","splice","directory","slice","maxPages","page","getDirectory","payload","totalPages","newChildren","content","map","c","doctoredPath","startsWith","substring","getConfigFile","lastReadHash","writeConfigFile","Uint8Array","parentDirectory","downloadDirectory","confirm","intl","formatMessage","enumerateDirectory","async","directoryResponse","concat","errorEncountered","downloadSingleFile","pathInZip","length","contents","TransferClient","Download","allocateDownload","File","resolve","directoriesToEnumerate","fileDownloads","tasks","task","dirInfo","directoryEntry","innerPromiseFunc","all","downloadFiles","fileDownload","zipBlob","downloadZip","blob","index","lastIndexOf","downloadFile","settings","inputPromise","input","type","onchange","e","files","target","localFile","arrayBuffer","remoteFilePath","replace","entityName","normalizedRemotePath","newFileNode","find","child","forEach","indexPromise","newDownloads","latest","ticket","downloadsFragment","_extends","key","Loading","text","configurationType","ConfigurationType","Disallowed","GenericAlert","title","canListDirectories","canWrite","Write","DebugJsonViewer","obj","err","ErrorAlert","prev","newarr","undefined","style","paddingRight","maxHeight","minWidth","overflowY","renderDirectory","maxWidth","padding","renderCreate","renderSelectedFile","renderBrowserlessForms","selected","Button","onClick","FontAwesomeIcon","icon","faFileAlt","directoryName","ButtonGroup","faFolderMinus","faFolderPlus","subDir","fields","FieldType","String","name","tooltip","defaultValue","Boolean","createNode","InputForm","onSave","saveMessageId","canRead","Read","fileDirectoryTree","fileIsNotRefreshed","canDeleteDirectories","Delete","headerText","replaceAll","faDownload","faFile","OverlayTrigger","placement","show","overlay","Tooltip","disabled","faTimes","contextType","InstanceEditContext","injectIntl"],"sourceRoot":""}