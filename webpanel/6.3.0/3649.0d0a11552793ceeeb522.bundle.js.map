{"version":3,"file":"3649.0d0a11552793ceeeb522.bundle.js","mappings":"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","sources":["webpack://tgstation-server-control-panel/./src/components/utils/SimpleTooltip.tsx","webpack://tgstation-server-control-panel/./src/components/utils/TestMergeRow.tsx","webpack://tgstation-server-control-panel/./src/components/views/Instance/Edit/Repository.tsx"],"sourcesContent":["import React from \"react\";\nimport { OverlayTrigger } from \"react-bootstrap\";\nimport Tooltip from \"react-bootstrap/Tooltip\";\nimport { FormattedMessage } from \"react-intl\";\n\ntype IProps = {\n    tooltipid: string;\n    children: JSX.Element;\n    show: boolean | undefined;\n};\n\nexport default function SimpleToolTip(props: IProps): JSX.Element {\n    return (\n        <OverlayTrigger\n            show={props.show}\n            overlay={\n                <Tooltip id={props.tooltipid}>\n                    <FormattedMessage id={props.tooltipid} />\n                </Tooltip>\n            }>\n            {props.children}\n        </OverlayTrigger>\n    );\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport { Collapse } from \"react-bootstrap\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { FormattedMessage } from \"react-intl\";\nimport SelectSearch, { fuzzySearch, SelectedOptionValue } from \"react-select-search\";\n\nimport {\n    RepositoryResponse,\n    RepositoryRights,\n    TestMerge\n} from \"../../ApiClient/generatedcode/generated\";\nimport InternalError from \"../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../ApiClient/models/InternalComms/InternalStatus\";\nimport { InstanceEditContext } from \"../../contexts/InstanceEditContext\";\nimport GithubClient, { Commit, PullRequest } from \"../../utils/GithubClient\";\nimport { hasRepoRight } from \"../../utils/misc\";\nimport InputField, { FieldType } from \"./InputField\";\nimport Loading from \"./Loading\";\nimport SimpleToolTip from \"./SimpleTooltip\";\n\ninterface IProps {\n    pr: PullRequest;\n    testmergeinfo?: TestMerge;\n    repoInfo: RepositoryResponse;\n    finalState: [commit: string, comment: string] | false;\n    onRemove: () => unknown;\n    onSelectCommit: (commit: string, comment: string | null) => unknown;\n    onError: (error: InternalError) => unknown;\n}\n\nexport default function TestMergeRow({\n    pr,\n    testmergeinfo,\n    repoInfo,\n    finalState,\n    onRemove,\n    onSelectCommit,\n    onError\n}: IProps): JSX.Element {\n    const [showDetails, _setShowDetails] = useState(false);\n    const setShowDetails = (_newVal: ((prevState: boolean) => boolean) | boolean) => {\n        _setShowDetails(prevState => {\n            let newVal;\n            if (typeof _newVal === \"boolean\") {\n                newVal = _newVal;\n            } else {\n                newVal = _newVal(prevState);\n            }\n            if (newVal) void loadCommits();\n            return newVal;\n        });\n    };\n    const [showModal, setShowModal] = useState(false);\n    const [selectedCommit, setSelectedCommit] = useState<string>(pr.head);\n    const [comment, setComment] = useState(finalState ? finalState[1] : \"\");\n    const [commits, setCommits] = useState<Map<string, Commit> | null>(null);\n    const [extraCommit, setExtraCommit] = useState<Commit | null>(null);\n    const instanceEditContext = useContext(InstanceEditContext);\n\n    const loadCommits = useCallback(\n        async (force?: boolean) => {\n            if (commits && !force) return;\n\n            const response = await GithubClient.getPRCommits({\n                //Repo info should be set if we are here\n                owner: repoInfo.remoteRepositoryOwner!,\n                repo: repoInfo.remoteRepositoryName!,\n                pr: pr,\n                wantedCommit: testmergeinfo?.targetCommitSha\n            });\n            if (response.code === StatusCode.ERROR) {\n                onError(response.error);\n            } else {\n                const commitMap = new Map();\n                response.payload[0].forEach(commit => commitMap.set(commit.sha, commit));\n                setCommits(commitMap);\n                setExtraCommit(response.payload[1] ?? null);\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [\n            repoInfo.remoteRepositoryOwner,\n            repoInfo.remoteRepositoryName,\n            pr.head,\n            testmergeinfo?.targetCommitSha\n        ]\n    );\n    useEffect(() => (showDetails ? void loadCommits() : void 0), [showDetails, loadCommits]);\n    useEffect(() => (showModal ? void loadCommits() : void 0), [showModal, loadCommits]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => setShowDetails(false), [finalState]);\n    useEffect(() => setComment(finalState ? finalState[1] : \"\"), [finalState]);\n\n    const colorMap: Record<typeof pr.state, string> = {\n        closed: \"#c93c37\",\n        merged: \"#8256d0\",\n        open: \"#347d39\"\n    };\n    let activeCommit: Commit | undefined = undefined;\n    if (testmergeinfo) {\n        if (commits?.has(testmergeinfo.targetCommitSha)) {\n            activeCommit = commits?.get(testmergeinfo.targetCommitSha);\n        } else if (extraCommit?.sha === testmergeinfo.targetCommitSha) {\n            activeCommit = extraCommit;\n        }\n    }\n    const commitOptions = [...(commits ?? []).values()].map(commit => ({\n        name: commit.name,\n        value: commit.sha,\n        current: commit.sha === testmergeinfo?.targetCommitSha,\n        latest: commit.sha === pr.head,\n        disabled: false\n    }));\n    if (extraCommit) {\n        commitOptions.push({\n            name: \"...\",\n            value: \"\",\n            current: false,\n            latest: false,\n            disabled: true\n        });\n        commitOptions.push({\n            name: extraCommit.name,\n            value: extraCommit.sha,\n            current: extraCommit.sha === testmergeinfo?.targetCommitSha,\n            latest: extraCommit.sha === pr.head,\n            disabled: false\n        });\n    }\n    const canAdd = hasRepoRight(\n        instanceEditContext.instancePermissionSet,\n        RepositoryRights.MergePullRequest\n    );\n    const canReset =\n        (hasRepoRight(instanceEditContext.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(\n                instanceEditContext.instancePermissionSet,\n                RepositoryRights.UpdateBranch\n            )) ||\n        //Allow updating and removing pending PRs\n        !testmergeinfo;\n\n    return (\n        <>\n            <tr>\n                <td className={\"text-right\" + (finalState ? \" font-weight-bold\" : \"\")}>\n                    #{pr.number}\n                </td>\n                <td>\n                    <Badge\n                        pill\n                        className=\"text-white text-capitalize mr-2\"\n                        style={{ backgroundColor: colorMap[pr.state] }}>\n                        {pr.state}\n                    </Badge>\n                    {pr.testmergelabel ? (\n                        <Badge pill className=\"text-white text-capitalize mr-2\" variant=\"primary\">\n                            <FormattedMessage id=\"view.instance.repo.testmergelabel\" />\n                        </Badge>\n                    ) : null}\n                    {pr.conflictlabel ? (\n                        <Badge pill className=\"text-white text-capitalize mr-2\" variant=\"danger\">\n                            <FormattedMessage id=\"view.instance.repo.conflictlabel\" />\n                        </Badge>\n                    ) : null}\n                </td>\n                <td>\n                    <a href={pr.link} target=\"_blank\" rel=\"noreferrer\">\n                        {pr.title}\n                    </a>\n                </td>\n                <td className=\"font-italic\">{pr.author}</td>\n\n                <td>\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-inline-block text-nowrap\">\n                            {finalState ? (\n                                <>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canReset ? false : undefined}>\n                                        <Button\n                                            variant=\"danger\"\n                                            className=\"mx-1\"\n                                            onClick={onRemove}\n                                            disabled={!canReset}>\n                                            <FontAwesomeIcon icon=\"minus\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    <SimpleToolTip\n                                        tooltipid=\"generic.no_perm\"\n                                        show={canAdd && canReset ? false : undefined}>\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={e =>\n                                                e.shiftKey\n                                                    ? onSelectCommit(\n                                                          pr.head,\n                                                          testmergeinfo?.comment ?? null\n                                                      )\n                                                    : setShowModal(true)\n                                            }\n                                            variant={finalState[0] === pr.head ? \"primary\" : \"info\"}\n                                            //To update, you have to reset and reapply the TM so you need both\n                                            disabled={!canAdd || !canReset}>\n                                            <FontAwesomeIcon icon=\"sync\" fixedWidth />\n                                        </Button>\n                                    </SimpleToolTip>\n                                    {testmergeinfo ? (\n                                        <Button\n                                            className=\"mx-1\"\n                                            onClick={() => setShowDetails(val => !val)}\n                                            active={showDetails}>\n                                            <FontAwesomeIcon icon=\"info\" fixedWidth />\n                                        </Button>\n                                    ) : null}\n                                </>\n                            ) : (\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        variant=\"success\"\n                                        className=\"mx-1\"\n                                        disabled={!canAdd}\n                                        onClick={e =>\n                                            e.shiftKey\n                                                ? onSelectCommit(pr.head, null)\n                                                : setShowModal(true)\n                                        }>\n                                        <FontAwesomeIcon icon=\"plus\" fixedWidth />\n                                    </Button>\n                                </SimpleToolTip>\n                            )}\n                        </div>\n                    </div>\n                </td>\n            </tr>\n\n            <tr>\n                <td className=\"py-0 border-top-0\" />\n                <td colSpan={4} className=\"py-0 border-top-0\">\n                    {testmergeinfo ? (\n                        <Collapse in={showDetails}>\n                            <div>\n                                <div className=\"py-3\">\n                                    <table className=\"reset-table\">\n                                        <tbody>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.by\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.mergedBy.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.comment\" />\n                                                    </span>\n                                                </td>\n                                                <td>{testmergeinfo.comment}</td>\n                                            </tr>\n                                            <tr>\n                                                <td className=\"text-nowrap\">\n                                                    <span className=\"p-2\">\n                                                        <FormattedMessage id=\"view.instance.repo.tm.commit\" />\n                                                    </span>\n                                                </td>\n                                                <td>\n                                                    {activeCommit ? (\n                                                        <>\n                                                            {activeCommit.name}\n                                                            <a\n                                                                className=\"ml-1\"\n                                                                href={activeCommit.url}\n                                                                target=\"_blank\"\n                                                                rel=\"noreferrer\">\n                                                                (\n                                                                {testmergeinfo.targetCommitSha.substring(\n                                                                    0,\n                                                                    7\n                                                                )}\n                                                                )\n                                                            </a>\n                                                        </>\n                                                    ) : (\n                                                        testmergeinfo.targetCommitSha.substring(\n                                                            0,\n                                                            7\n                                                        )\n                                                    )}\n                                                </td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                </div>\n                            </div>\n                        </Collapse>\n                    ) : null}\n                </td>\n            </tr>\n            <Modal show={showModal} onHide={() => setShowModal(false)} centered size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.title\" />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <h5>\n                        <a\n                            href={pr.link}\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            className=\"text-decoration-none\">\n                            {pr.title}\n                        </a>\n                    </h5>\n                    <FormattedMessage id=\"view.instance.repo.tm.modal.label\" />\n                    {commits ? (\n                        <SelectSearch\n                            filterOptions={fuzzySearch}\n                            search\n                            options={commitOptions}\n                            value={selectedCommit ?? activeCommit?.sha}\n                            autoComplete=\"on\"\n                            //@ts-expect-error error in the library, it's the wrong type\n                            renderOption={(\n                                props,\n                                option: SelectedOptionValue & { current: boolean; latest: boolean },\n                                snapshot,\n                                className\n                            ) => (\n                                //@ts-expect-error error in the library, it's the wrong type\n                                <button\n                                    type=\"button\"\n                                    className={\n                                        className + (option.disabled ? \" font-weight-bold\" : \"\")\n                                    }\n                                    {...props}>\n                                    <Badge>{(option.value as string).substring(0, 7)}</Badge>\n                                    {option.current ? (\n                                        <Badge variant=\"primary\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.testmerged\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.latest ? (\n                                        <Badge variant=\"success\" pill className=\"mr-1\">\n                                            <FormattedMessage id=\"generic.latest\" />\n                                        </Badge>\n                                    ) : null}\n                                    {option.name}\n                                </button>\n                            )}\n                            onChange={value => setSelectedCommit(value as unknown as string)}\n                        />\n                    ) : (\n                        <Loading text=\"loading.repo.commits\" width={5} widthUnit=\"rem\" />\n                    )}\n                    <InputField\n                        name=\"view.instance.repo.tm.modal.comment\"\n                        type={FieldType.String}\n                        onChange={newComment => setComment(newComment)}\n                        defaultValue={testmergeinfo?.comment ?? \"\"}\n                    />\n                    <span className=\"text-muted font-italic mt-4 d-inline-block\">\n                        <FormattedMessage id=\"view.instance.repo.tm.modal.tip\" />\n                    </span>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={() => setShowModal(false)}>\n                        <FormattedMessage id=\"generic.close\" />\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            if (selectedCommit) onSelectCommit(selectedCommit, comment);\n                            setShowModal(false);\n                        }}>\n                        <FormattedMessage id=\"generic.save\" />\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n    );\n}\n","import React from \"react\";\nimport { Button, ButtonGroup, Card, Modal, OverlayTrigger, Table, Tooltip } from \"react-bootstrap\";\nimport { FormattedMessage } from \"react-intl\";\n\nimport DreamMakerClient from \"../../../../ApiClient/DreamMakerClient\";\nimport {\n    DreamMakerRights,\n    ErrorCode as TGSErrorCode,\n    JobResponse,\n    RemoteGitProvider,\n    RepositoryCreateRequest,\n    RepositoryResponse,\n    RepositoryRights,\n    RepositoryUpdateRequest,\n    TestMerge,\n    TestMergeParameters\n} from \"../../../../ApiClient/generatedcode/generated\";\nimport JobsClient from \"../../../../ApiClient/JobsClient\";\nimport InternalError, { ErrorCode } from \"../../../../ApiClient/models/InternalComms/InternalError\";\nimport { StatusCode } from \"../../../../ApiClient/models/InternalComms/InternalStatus\";\nimport RepositoryClient from \"../../../../ApiClient/RepositoryClient\";\nimport configOptions from \"../../../../ApiClient/util/config\";\nimport JobsController from \"../../../../ApiClient/util/JobsController\";\nimport { InstanceEditContext } from \"../../../../contexts/InstanceEditContext\";\nimport GithubClient, { PullRequest } from \"../../../../utils/GithubClient\";\nimport { hasDreamMakerRight, hasRepoRight } from \"../../../../utils/misc\";\nimport ErrorAlert from \"../../../utils/ErrorAlert\";\nimport GenericAlert from \"../../../utils/GenericAlert\";\nimport InputField, { FieldType } from \"../../../utils/InputField\";\nimport InputForm from \"../../../utils/InputForm\";\nimport { DebugJsonViewer } from \"../../../utils/JsonViewer\";\nimport Loading from \"../../../utils/Loading\";\nimport SimpleToolTip from \"../../../utils/SimpleTooltip\";\nimport TestMergeRow from \"../../../utils/TestMergeRow\";\n\nenum PRState {\n    reapply = \"reapply\",\n    added = \"added\",\n    removed = \"removed\",\n    updated = \"updated\",\n    rename = \"renamed\"\n}\n\nenum ResetType {\n    None,\n    Local,\n    Remote\n}\n\nenum CredentialsType {\n    None,\n    Password,\n    Token,\n    PrivateKey\n}\n\ntype IProps = object;\n\ninterface IState {\n    errors: Array<InternalError<ErrorCode> | undefined>;\n    repositoryInfo: RepositoryResponse | null;\n    writableCredentials: IWritableCredentials | null;\n    credMode: CredentialsType;\n    showCredsModal: boolean;\n    loading: boolean;\n    cloning: boolean;\n    repoBusy: boolean;\n    unableToHookClone: boolean;\n    loadingPRs: boolean;\n    gitHubPRs: PullRequest[] | null;\n    manualPRs: Set<number>;\n    resetType: ResetType;\n    desiredState: Map<number, [current: boolean, sha: string, comment: string | null] | null>;\n    showDeleteModal: boolean;\n    showRecloneModal: boolean;\n    manualPR: number;\n    lastManualPR: number;\n    deployAfter: boolean;\n}\n\ninterface IWritableCredentials {\n    accessUser: string;\n    accessToken: string;\n}\n\nclass Repository extends React.Component<IProps, IState> {\n    public declare context: InstanceEditContext;\n\n    public constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            errors: [],\n            repositoryInfo: null,\n            writableCredentials: null,\n            credMode: CredentialsType.PrivateKey,\n            showCredsModal: false,\n            loading: true,\n            cloning: false,\n            unableToHookClone: false,\n            gitHubPRs: null,\n            manualPRs: new Set<number>(),\n            resetType: ResetType.Remote,\n            desiredState: new Map<\n                number,\n                [current: boolean, sha: string, comment: string | null] | null\n            >(),\n            showDeleteModal: false,\n            showRecloneModal: false,\n            manualPR: 0,\n            lastManualPR: 0,\n            deployAfter: false,\n            repoBusy: false,\n            loadingPRs: false\n        };\n\n        this.fetchRepositoryInfo = this.fetchRepositoryInfo.bind(this);\n    }\n\n    private addError(error: InternalError<ErrorCode>): void {\n        this.setState(prevState => {\n            const errors = Array.from(prevState.errors);\n            errors.push(error);\n            return {\n                errors\n            };\n        });\n    }\n\n    public async componentDidMount(): Promise<void> {\n        this.setState({\n            deployAfter: hasDreamMakerRight(\n                this.context.instancePermissionSet,\n                DreamMakerRights.Compile\n            )\n        });\n        await this.fetchRepositoryInfo(undefined, true);\n    }\n\n    private async fetchRepositoryInfo(\n        cloneJob?: JobResponse,\n        resetDesiredState?: boolean\n    ): Promise<void> {\n        if (!hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read)) {\n            this.setState({\n                loading: false,\n                cloning: false\n            });\n            this.reloadDesiredState(null, resetDesiredState ?? false, false);\n            this.setState({\n                repositoryInfo: null,\n                credMode: CredentialsType.PrivateKey\n            });\n        }\n\n        const response = await RepositoryClient.getRepository(this.context.instance.id);\n\n        this.setState({\n            cloning: false,\n            repoBusy: false\n        });\n        if (response.code === StatusCode.ERROR) {\n            if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoCloning\n            ) {\n                this.setState({\n                    cloning: true,\n                    unableToHookClone: false\n                });\n                if (cloneJob) {\n                    JobsController.registerCallback(cloneJob.id, this.fetchRepositoryInfo);\n                } else {\n                    const response2 = await JobsClient.listActiveJobs(this.context.instance.id, {\n                        page: 1,\n                        pageSize: 100\n                    });\n                    if (response2.code === StatusCode.OK) {\n                        const cloneJob = response2.payload.content\n                            .sort((a, b) => b.id - a.id)\n                            .find(\n                                job =>\n                                    job.description.includes(\"Clone\") &&\n                                    job.description.includes(\"repository\")\n                            );\n                        if (cloneJob) {\n                            JobsController.registerCallback(cloneJob.id, this.fetchRepositoryInfo);\n                        } else {\n                            this.setState({\n                                unableToHookClone: true\n                            });\n                        }\n                    } else {\n                        this.addError(response2.error);\n                        this.setState({\n                            unableToHookClone: true\n                        });\n                    }\n                }\n            } else if (\n                response.error.code === ErrorCode.HTTP_DATA_INEGRITY &&\n                response.error.originalErrorMessage?.errorCode === TGSErrorCode.RepoBusy\n            ) {\n                this.setState({\n                    repoBusy: true\n                });\n            } else {\n                this.addError(response.error);\n            }\n        } else {\n            this.reloadPRs(response.payload, resetDesiredState);\n            //response.payload.remoteGitProvider = RemoteGitProvider.GitLab;\n            this.setState({\n                repositoryInfo: response.payload,\n                credMode: CredentialsType.PrivateKey\n            });\n        }\n        this.setState({ loading: false });\n    }\n\n    private reloadPRs(repositoryInfo: RepositoryResponse, resetDesiredState?: boolean) {\n        if (\n            repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub &&\n            repositoryInfo.remoteRepositoryName &&\n            repositoryInfo.remoteRepositoryOwner\n        ) {\n            this.setState({\n                loadingPRs: true\n            });\n            GithubClient.getPRs({\n                repo: repositoryInfo.remoteRepositoryName,\n                owner: repositoryInfo.remoteRepositoryOwner,\n                wantedPRs: repositoryInfo.revisionInformation?.activeTestMerges.map(tm => tm.number)\n            })\n                .then(prs => {\n                    this.setState({\n                        loadingPRs: false\n                    });\n                    if (prs.code === StatusCode.ERROR) {\n                        this.addError(prs.error);\n                    } else {\n                        this.setState({\n                            gitHubPRs: prs.payload\n                        });\n                        if (resetDesiredState)\n                            this.reloadDesiredState(repositoryInfo, true, false, prs.payload);\n                    }\n                })\n                .catch(e => {\n                    this.setState({\n                        loadingPRs: false\n                    });\n                    this.addError(new InternalError(ErrorCode.APP_FAIL, { jsError: e as Error }));\n                });\n        }\n    }\n\n    private async applyTestmerges(noBranch: boolean): Promise<void> {\n        const editOptions: RepositoryUpdateRequest = {};\n        const repositoryInfo = this.state.repositoryInfo;\n        const willReset = this.state.resetType !== ResetType.None;\n\n        if (this.state.resetType === ResetType.Local) {\n            editOptions.checkoutSha = repositoryInfo?.revisionInformation?.originCommitSha;\n        } else if (this.state.resetType === ResetType.Remote) {\n            editOptions.updateFromOrigin = true;\n            editOptions.reference = repositoryInfo?.reference;\n        }\n\n        if (repositoryInfo && repositoryInfo?.remoteGitProvider === RemoteGitProvider.GitHub) {\n            const testMergeArray: TestMergeParameters[] = [];\n            [...this.state.desiredState.entries()].forEach(([number, prDesiredState]) => {\n                if (!prDesiredState) return;\n                const [current, commit, comment] = prDesiredState;\n                //If we aren't resetting, ignore PRs we didn't touch\n                if (current && !(willReset || noBranch)) return;\n\n                testMergeArray.push({\n                    number: number,\n                    targetCommitSha: commit,\n                    comment\n                });\n            });\n            if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n        }\n        const testMergeArray = editOptions.newTestMerges ?? [];\n        this.state.manualPRs.forEach(pr =>\n            testMergeArray.push({\n                number: pr\n            })\n        );\n        if (testMergeArray.length) editOptions.newTestMerges = testMergeArray;\n\n        this.setState({\n            loading: true\n        });\n        const response = await RepositoryClient.editRepository(\n            this.context.instance.id,\n            editOptions\n        );\n        this.setState({\n            loading: false\n        });\n        if (response.code === StatusCode.OK) {\n            if (response.payload.activeJob) {\n                this.setState({\n                    loading: true\n                });\n                JobsController.fastmode = 5;\n                JobsController.registerCallback(response.payload.activeJob.id, job => {\n                    return this.fetchRepositoryInfo(\n                        job,\n                        job.errorCode === undefined && job.exceptionDetails === undefined\n                    );\n                });\n                JobsController.registerJob(response.payload.activeJob, this.context.instance.id);\n                if (this.state.deployAfter) {\n                    const jobId = response.payload.activeJob.id;\n                    const deployinterval = setInterval(() => {\n                        const targetJob = JobsController.jobs.get(jobId);\n                        if (typeof targetJob?.progress === \"number\" || targetJob?.stoppedAt) {\n                            void DreamMakerClient.startCompile(this.context.instance.id).then(\n                                response => {\n                                    if (response.code === StatusCode.ERROR) {\n                                        this.addError(response.error);\n                                    }\n                                }\n                            );\n                            clearInterval(deployinterval);\n                        }\n                    }, 5000);\n                }\n            } else {\n                await this.fetchRepositoryInfo();\n            }\n        } else {\n            this.addError(response.error);\n        }\n    }\n\n    private reloadDesiredState(\n        repoinfo: RepositoryResponse | null,\n        reset: boolean,\n        harderReset: boolean,\n        gitHubPRs?: PullRequest[] | null\n    ) {\n        gitHubPRs = gitHubPRs ?? this.state.gitHubPRs;\n        if (reset) {\n            this.setState(prevState => {\n                return {\n                    resetType: harderReset ? ResetType.None : prevState.resetType,\n                    manualPRs: new Set<number>()\n                };\n            });\n        }\n\n        if (!repoinfo) return;\n\n        this.setState(prevState => {\n            const desiredState = prevState.desiredState;\n            const newDesiredState = new Map(!reset ? desiredState : []);\n            let updatingTMs = false;\n            const regularReset = reset && !harderReset;\n            repoinfo.revisionInformation?.activeTestMerges.forEach(pr => {\n                const currentDesiredState = newDesiredState.get(pr.number);\n                if (!reset) {\n                    //We want the PR gone, don't retestmerge it\n                    if (!currentDesiredState) return;\n                    //We want the PR updated to a specific commit, don't mess with it\n                    if (currentDesiredState && !currentDesiredState[0]) return;\n                }\n\n                const gitHubPR = gitHubPRs?.find(\n                    potentialGitHubPR => pr.number === potentialGitHubPR.number\n                );\n\n                const defaultDesiredState = gitHubPR?.state === \"merged\" ? false : true;\n                if (regularReset && !defaultDesiredState) {\n                    newDesiredState.set(pr.number, null);\n                    updatingTMs = true;\n                } else {\n                    const newHead = (regularReset ? gitHubPR?.head : null) ?? pr.targetCommitSha;\n                    if (regularReset && newHead !== pr.targetCommitSha) {\n                        updatingTMs = true;\n                    }\n                    newDesiredState.set(pr.number, [true, newHead, pr.comment ?? \"\"]);\n                }\n            });\n\n            const resetType = updatingTMs\n                ? repoinfo.reference === \"(no branch)\"\n                    ? ResetType.Local\n                    : ResetType.Remote\n                : prevState.resetType;\n            return {\n                resetType,\n                desiredState: newDesiredState\n            };\n        });\n    }\n\n    public render(): React.ReactNode {\n        return (\n            <div className=\"text-center\">\n                <DebugJsonViewer obj={this.state} />\n                {this.renderErrors()}\n                {/*Just like... hope its cloned if you don't have read access*/}\n\n                {this.state.cloning ? (\n                    <Loading text=\"loading.repo.cloning\" />\n                ) : this.state.repositoryInfo && !this.state.repositoryInfo.origin ? (\n                    this.renderPreClone()\n                ) : (\n                    <React.Fragment>\n                        <h3>\n                            <FormattedMessage id=\"view.instance.repo.repoinfo\" />\n                        </h3>\n                        {this.state.repoBusy ? (\n                            <Loading text=\"loading.repo.busy\" />\n                        ) : (\n                            <React.Fragment>\n                                {this.renderRepoInformation()}\n                                <hr />\n                                {this.renderSettings()}\n                                <hr />\n                                {this.renderTestMerges()}\n                                <hr />\n                                {this.renderReclone()}\n                                <hr />\n                                {this.renderDelete()}\n                            </React.Fragment>\n                        )}\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n\n    private renderErrors(): React.ReactNode {\n        return (\n            <React.Fragment>\n                {this.state.errors.map((err, index) => {\n                    if (!err) return;\n                    return (\n                        <ErrorAlert\n                            key={index}\n                            error={err}\n                            onClose={() =>\n                                this.setState(prev => {\n                                    const newarr = Array.from(prev.errors);\n                                    newarr[index] = undefined;\n                                    return {\n                                        errors: newarr\n                                    };\n                                })\n                            }\n                        />\n                    );\n                })}\n            </React.Fragment>\n        );\n    }\n\n    private renderRepoInformation(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n        if (!repositoryInfo) return <GenericAlert title=\"view.instance.repo.norepoinfo\" />;\n\n        return (\n            <table className=\"mx-auto text-left\">\n                <tbody>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.origin\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.origin}</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.owner\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.remoteRepositoryOwner}</td>\n                    </tr>\n                    <tr>\n                        <td>\n                            <span className=\"mr-3\">\n                                <FormattedMessage id=\"view.instance.repo.info.name\" />\n                            </span>\n                        </td>\n                        <td>{repositoryInfo.remoteRepositoryName}</td>\n                    </tr>\n                </tbody>\n            </table>\n        );\n    }\n\n    private renderPreClone(): React.ReactNode {\n        const cloneFields = {\n            origin: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.url\"\n            },\n            reference: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.ref\",\n                defaultValue: \"\"\n            },\n            updateSubmodules: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.enablesubmodules\",\n                defaultValue: true\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <h3>\n                    <FormattedMessage id=\"view.instance.repo.clone\" />\n                </h3>\n                {this.renderCredsModal()}\n                <InputForm\n                    fields={cloneFields}\n                    hideDisabled={\n                        !hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read)\n                    }\n                    onSave={async result => {\n                        const repoCloneRequest: RepositoryCreateRequest = {\n                            ...result\n                        };\n\n                        if (result.reference == \"\") repoCloneRequest.reference = null;\n                        if (this.state.writableCredentials) {\n                            repoCloneRequest.accessUser = this.state.writableCredentials.accessUser;\n                            repoCloneRequest.accessToken =\n                                this.state.writableCredentials.accessToken;\n                        }\n\n                        const response = await RepositoryClient.cloneRepository(\n                            this.context.instance.id,\n                            repoCloneRequest\n                        );\n                        if (response.code === StatusCode.OK) {\n                            this.setState({ writableCredentials: null });\n                            await this.fetchRepositoryInfo(response.payload.activeJob ?? undefined);\n                        } else {\n                            this.addError(response.error);\n                        }\n                    }}\n                    includeAll\n                    alwaysAllowSave={!!this.state.writableCredentials}\n                    saveMessageId=\"generic.clone\"\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderSettings(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n        const editFields = {\n            originCheckoutSha: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.origincheckoutsha\",\n                disabled: true,\n                defaultValue: repositoryInfo\n                    ? repositoryInfo.revisionInformation?.originCommitSha\n                    : \"\",\n                tooltip: \"fields.instance.repository.origincheckoutsha.desc\"\n            },\n            checkoutSha: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.checkoutsha\",\n                defaultValue: repositoryInfo ? repositoryInfo.revisionInformation?.commitSha : \"\",\n                tooltip: \"fields.instance.repository.checkoutsha.desc\",\n                disabled: !hasRepoRight(this.context.instancePermissionSet, RepositoryRights.SetSha)\n            },\n            reference: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.reference\",\n                defaultValue: repositoryInfo ? repositoryInfo.reference : \"\",\n                tooltip: \"fields.instance.repository.reference.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.SetReference\n                )\n            },\n            committerName: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.committerName\",\n                defaultValue: repositoryInfo ? repositoryInfo.committerName : \"\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCommitter\n                )\n            },\n            committerEmail: {\n                type: FieldType.String as FieldType.String,\n                name: \"fields.instance.repository.committerEmail\",\n                defaultValue: repositoryInfo ? repositoryInfo.committerEmail : \"\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeCommitter\n                )\n            },\n            pushTestMergeCommits: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.pushTestMergeCommits\",\n                defaultValue: repositoryInfo ? repositoryInfo.pushTestMergeCommits : false,\n                tooltip: \"fields.instance.repository.pushTestMergeCommits.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            createGitHubDeployments: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.createGitHubDeployments\",\n                defaultValue: repositoryInfo ? repositoryInfo.createGitHubDeployments : false,\n                tooltip: \"fields.instance.repository.createGitHubDeployments.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            showTestMergeCommitters: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.showTestMergeCommitters\",\n                defaultValue: repositoryInfo ? repositoryInfo.showTestMergeCommitters : false,\n                tooltip: \"fields.instance.repository.showTestMergeCommitters.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            autoUpdatesKeepTestMerges: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.autoUpdatesKeepTestMerges\",\n                defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesKeepTestMerges : false,\n                tooltip: \"fields.instance.repository.autoUpdatesKeepTestMerges.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeAutoUpdateSettings\n                )\n            },\n            autoUpdatesSynchronize: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.autoUpdatesSynchronize\",\n                defaultValue: repositoryInfo ? repositoryInfo.autoUpdatesSynchronize : false,\n                tooltip: \"fields.instance.repository.autoUpdatesSynchronize.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeAutoUpdateSettings\n                )\n            },\n            postTestMergeComment: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.postTestMergeComment\",\n                defaultValue: repositoryInfo ? repositoryInfo.postTestMergeComment : false,\n                tooltip: \"fields.instance.repository.postTestMergeComment.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeTestMergeCommits\n                )\n            },\n            updateSubmodules: {\n                type: FieldType.Boolean as FieldType.Boolean,\n                name: \"fields.instance.repository.updateSubmodules\",\n                defaultValue: repositoryInfo ? repositoryInfo.updateSubmodules : false,\n                tooltip: \"fields.instance.repository.updateSubmodules.desc\",\n                disabled: !hasRepoRight(\n                    this.context.instancePermissionSet,\n                    RepositoryRights.ChangeSubmoduleUpdate\n                )\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <h3>\n                    <FormattedMessage id=\"view.instance.repo.reposettings\" />\n                </h3>\n                {this.renderCredsModal()}\n                <InputForm\n                    fields={editFields}\n                    onSave={async result => {\n                        this.setState({ loading: true, writableCredentials: null });\n                        const repoUpdateRequest: RepositoryUpdateRequest = { ...result };\n                        if (this.state.writableCredentials) {\n                            repoUpdateRequest.accessUser =\n                                this.state.writableCredentials.accessUser;\n                            repoUpdateRequest.accessToken =\n                                this.state.writableCredentials.accessToken;\n                        }\n\n                        const response = await RepositoryClient.editRepository(\n                            this.context.instance.id,\n                            repoUpdateRequest\n                        );\n                        this.setState({ loading: false });\n                        if (response.code === StatusCode.OK) {\n                            if (response.payload.activeJob) {\n                                this.setState({ loading: true });\n                                JobsController.fastmode = 5;\n                                JobsController.registerCallback(response.payload.activeJob.id, () =>\n                                    this.fetchRepositoryInfo(undefined, true)\n                                );\n                                JobsController.registerJob(\n                                    response.payload.activeJob,\n                                    this.context.instance.id\n                                );\n                            } else {\n                                await this.fetchRepositoryInfo();\n                            }\n                        } else {\n                            this.addError(response.error);\n                        }\n                    }}\n                    alwaysAllowSave={!!this.state.writableCredentials}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderCredDetails(): React.ReactNode {\n        const credMode = this.state.credMode;\n        const writableCredentials = this.state.writableCredentials;\n        const repoInfo = this.state.repositoryInfo;\n\n        const [credModeName] = Object.entries(CredentialsType)\n            //filters out reverse mapping\n            .find(([, value]) => value == credMode)!;\n\n        const localeId = `fields.instance.repository.creds.mode.${credModeName}`;\n\n        const baseFields = {\n            username: {\n                type: FieldType.String as FieldType.String,\n                name: localeId + \".username\",\n                tooltip: localeId + \".username.desc\",\n                defaultValue: writableCredentials?.accessUser ?? repoInfo?.accessUser ?? \"\"\n            }\n        };\n\n        const regularFields = {\n            ...baseFields,\n            token: {\n                type: FieldType.Password as FieldType.Password,\n                name: localeId + \".token\",\n                tooltip: localeId + \".token.desc\",\n                defaultValue: writableCredentials?.accessToken ?? \"\"\n            }\n        };\n\n        const privateKeyFields = {\n            ...baseFields,\n            clientId: {\n                type: FieldType.String as FieldType.String,\n                name: localeId + \".id\",\n                tooltip: localeId + \".id.desc\"\n            },\n            privateKey: {\n                type: FieldType.TextArea as FieldType.TextArea,\n                name: localeId + \".pk\",\n                tooltip: localeId + \".pk.desc\"\n            }\n        };\n\n        return (\n            <React.Fragment>\n                <div\n                    style={{\n                        display: credMode != CredentialsType.PrivateKey ? \"none\" : undefined\n                    }}>\n                    <InputForm\n                        fields={privateKeyFields}\n                        onSave={result => {\n                            const username = result.username?.trim();\n                            const clientId = result.clientId?.trim();\n                            const privateKey = result.privateKey?.trim();\n\n                            if (!username?.length || !clientId?.length || !privateKey?.length) {\n                                alert(\"Please enter a username, client/app ID, and private key!\");\n                                return;\n                            }\n\n                            const tgsEncodedAppPrivateKey = `TGS_PK_${clientId}:${btoa(privateKey)}`;\n\n                            this.setState({\n                                writableCredentials: {\n                                    accessUser: username,\n                                    accessToken: tgsEncodedAppPrivateKey\n                                },\n                                showCredsModal: false\n                            });\n                        }}\n                    />\n                </div>\n                <div\n                    style={{\n                        display: credMode == CredentialsType.PrivateKey ? \"none\" : undefined\n                    }}>\n                    <InputForm\n                        fields={regularFields}\n                        onSave={result => {\n                            const username = result.username?.trim();\n                            const token = result.token?.trim();\n\n                            if (!username?.length || !token?.length) {\n                                alert(\n                                    `Please enter both a username and a ${credMode == CredentialsType.Password ? \"password\" : \"token\"}!`\n                                );\n                                return;\n                            }\n\n                            this.setState({\n                                writableCredentials: {\n                                    accessUser: username,\n                                    accessToken: token\n                                },\n                                showCredsModal: false\n                            });\n                        }}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private renderCredsModal(): React.ReactNode {\n        const canCreds = hasRepoRight(\n            this.context.instancePermissionSet,\n            RepositoryRights.ChangeCredentials\n        );\n        const editButton = (\n            <Button disabled={!canCreds} onClick={() => this.setState({ showCredsModal: true })}>\n                <FormattedMessage id=\"generic.edit\" />\n            </Button>\n        );\n        const credMode = this.state.credMode;\n\n        return (\n            <React.Fragment>\n                <Modal\n                    show={this.state.showCredsModal}\n                    onHide={() => this.setState({ showCredsModal: false })}\n                    centered\n                    size=\"lg\">\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id=\"view.instance.repo.creds.modal.title\" />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <InputField\n                            name=\"fields.instance.repository.creds.mode\"\n                            type={FieldType.Enum}\n                            enum={CredentialsType}\n                            defaultValue={credMode}\n                            onChange={newCredentialsType =>\n                                this.setState({ credMode: newCredentialsType })\n                            }\n                        />\n                        {credMode != CredentialsType.None ? (\n                            this.renderCredDetails()\n                        ) : (\n                            <Modal.Footer>\n                                <Button\n                                    className=\"text-center\"\n                                    variant=\"danger\"\n                                    onClick={() =>\n                                        this.setState({\n                                            showCredsModal: false,\n                                            writableCredentials: {\n                                                accessUser: \"\",\n                                                accessToken: \"\"\n                                            }\n                                        })\n                                    }>\n                                    <FormattedMessage id=\"generic.save\" />\n                                </Button>\n                                <Button\n                                    className=\"text-center\"\n                                    onClick={() =>\n                                        this.setState({\n                                            showCredsModal: false,\n                                            writableCredentials: null\n                                        })\n                                    }>\n                                    <FormattedMessage id=\"generic.reset\" />\n                                </Button>\n                            </Modal.Footer>\n                        )}\n                        {credMode != CredentialsType.None ? (\n                            <Modal.Footer>\n                                <Button\n                                    className=\"text-center\"\n                                    onClick={() =>\n                                        this.setState({\n                                            showCredsModal: false,\n                                            writableCredentials: null\n                                        })\n                                    }>\n                                    <FormattedMessage id=\"generic.reset\" />\n                                </Button>\n                            </Modal.Footer>\n                        ) : null}\n                    </Modal.Body>\n                </Modal>\n                <div className=\"d-flex mt-5\">\n                    <InputField\n                        name=\"view.instance.repo.creds\"\n                        tooltip=\"view.instance.repo.creds.desc\"\n                        type={FieldType.String}\n                        defaultValue={\n                            (this.state.writableCredentials\n                                ? this.state.writableCredentials.accessUser\n                                : this.state.repositoryInfo?.accessUser) || \"(Unset)\"\n                        }\n                        onChange={() => {}}\n                        disabled\n                        hideReadOnly\n                        additionalAppend={editButton}\n                        forceChanged={!!this.state.writableCredentials}\n                    />\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    private renderTestMerges(): React.ReactNode {\n        const repositoryInfo = this.state.repositoryInfo;\n\n        const canDeploy = hasDreamMakerRight(\n            this.context.instancePermissionSet,\n            DreamMakerRights.Compile\n        );\n        const canAdd = hasRepoRight(\n            this.context.instancePermissionSet,\n            RepositoryRights.MergePullRequest\n        );\n        const canUpdate =\n            hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Read) &&\n            hasRepoRight(this.context.instancePermissionSet, RepositoryRights.UpdateBranch);\n\n        const testmergedPRs = new Map<number, TestMerge>();\n        if (repositoryInfo) {\n            repositoryInfo.revisionInformation?.activeTestMerges.forEach(pr =>\n                testmergedPRs.set(pr.number, pr)\n            );\n        }\n        const sortedPRs =\n            this.state.gitHubPRs?.sort((a, b) => {\n                if (testmergedPRs.has(a.number) !== testmergedPRs.has(b.number)) {\n                    return testmergedPRs.has(a.number) ? -1 : 1;\n                }\n                if (a.testmergelabel !== b.testmergelabel) {\n                    return a.testmergelabel ? -1 : 1;\n                }\n                if (a.conflictlabel !== b.conflictlabel) {\n                    return a.conflictlabel ? 1 : -1;\n                }\n                return a.number - b.number;\n            }) ?? [];\n        const filteredPendingActions = sortedPRs\n            .map(pr => {\n                const desiredPRState = this.state.desiredState.get(pr.number);\n                const tmInfo = !repositoryInfo\n                    ? undefined\n                    : repositoryInfo?.revisionInformation?.activeTestMerges.find(\n                          activePR => activePR.number === pr.number\n                      );\n\n                if (desiredPRState) {\n                    if (!tmInfo) {\n                        return [PRState.added, pr];\n                    } else if (tmInfo.targetCommitSha !== desiredPRState[1]) {\n                        return [PRState.updated, pr];\n                    } else if ((tmInfo.comment ?? \"\") !== desiredPRState[2]) {\n                        return [PRState.rename, pr];\n                    } else {\n                        return [PRState.reapply, pr];\n                    }\n                }\n                if (!this.state.desiredState.get(pr.number)) {\n                    if (!tmInfo) return null;\n\n                    return [PRState.removed, pr];\n                }\n                return null;\n            })\n            .filter(value => value !== null) as [PRState, PullRequest][];\n        const sortedPendingActions = filteredPendingActions.sort((a, b) => {\n            const order = [PRState.removed, PRState.reapply, PRState.added, PRState.updated];\n            for (const state of order) {\n                if (\n                    // @ts-expect-error again, ts doesn't want people to use xor on booleans, and I disagree\n                    (a[0] === state) ^\n                    (b[0] === state)\n                ) {\n                    return a[0] === state ? -1 : 1;\n                }\n            }\n            return 0;\n        });\n        const noBranch = !repositoryInfo ? false : repositoryInfo.reference === \"(no branch)\";\n        const forceReset = filteredPendingActions.some(\n            action => action[0] != PRState.added && action[0] != PRState.reapply\n        );\n\n        //PRs we haven't touched, only used to display prs to reapply after reset\n        const noPendingChanges =\n            filteredPendingActions.filter(([state]) => state !== PRState.reapply).length === 0 &&\n            this.state.resetType === ResetType.None &&\n            !this.state.manualPRs.size;\n\n        if (repositoryInfo && repositoryInfo.remoteGitProvider == RemoteGitProvider.Unknown)\n            return <GenericAlert title=\"view.instance.repo.testmerges.badprovider\" />;\n\n        return (\n            <div className=\"mx-5\">\n                <Card className=\"mb-5\">\n                    <Card.Header>\n                        <FormattedMessage id=\"view.instance.repo.pending.title\" />\n                    </Card.Header>\n                    <Card.Body className=\"text-left\">\n                        <ul>\n                            {noPendingChanges ? (\n                                <li className=\"font-weight-lighter font-italic\">\n                                    <FormattedMessage id=\"view.instance.repo.pending.none\" />\n                                </li>\n                            ) : (\n                                <React.Fragment>\n                                    {repositoryInfo && noBranch ? (\n                                        <li>\n                                            <FormattedMessage\n                                                id=\"view.instance.repo.pending.reset.nobranch\"\n                                                values={{\n                                                    commit: repositoryInfo.revisionInformation?.originCommitSha.substring(\n                                                        0,\n                                                        7\n                                                    )\n                                                }}\n                                            />\n                                        </li>\n                                    ) : this.state.resetType === ResetType.Remote ? (\n                                        <li>\n                                            <FormattedMessage id=\"view.instance.repo.pending.update\" />\n                                        </li>\n                                    ) : this.state.resetType === ResetType.Local ? (\n                                        <li>\n                                            <FormattedMessage id=\"view.instance.repo.pending.reset\" />\n                                        </li>\n                                    ) : null}\n                                    {repositoryInfo &&\n                                    repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub\n                                        ? sortedPendingActions.map(([state, pr]) => {\n                                              const prDesiredState = this.state.desiredState.get(\n                                                  pr.number\n                                              );\n\n                                              if (\n                                                  state === PRState.reapply &&\n                                                  !(\n                                                      this.state.resetType !== ResetType.None ||\n                                                      noBranch\n                                                  )\n                                              )\n                                                  return null;\n\n                                              let targetCommit = prDesiredState\n                                                  ? prDesiredState[1].substring(0, 7)\n                                                  : null;\n\n                                              const gitHubPR = this.state.gitHubPRs?.find(\n                                                  gitHubPR => pr.number === gitHubPR.number\n                                              );\n\n                                              if (\n                                                  !targetCommit ||\n                                                  gitHubPR?.head.startsWith(targetCommit)\n                                              )\n                                                  targetCommit = `HEAD (${(\n                                                      targetCommit ?? gitHubPR!.head\n                                                  ).substring(0, 7)})`;\n\n                                              return (\n                                                  <li key={pr.number}>\n                                                      <FormattedMessage\n                                                          id={`view.instance.repo.pending.${state}`}\n                                                          values={{\n                                                              number: pr.number,\n                                                              commit: targetCommit,\n                                                              title: pr.title\n                                                          }}\n                                                      />\n                                                  </li>\n                                              );\n                                          })\n                                        : null}\n                                    {[...this.state.manualPRs.values()].map(pr => (\n                                        <li key={pr}>\n                                            <FormattedMessage\n                                                id={`view.instance.repo.pending.added.manual`}\n                                                values={{\n                                                    number: pr\n                                                }}\n                                            />\n                                        </li>\n                                    ))}\n                                    {this.state.deployAfter ? (\n                                        <li key=\"deploy\">\n                                            <FormattedMessage\n                                                id={`view.instance.repo.pending.deploy`}\n                                            />\n                                        </li>\n                                    ) : null}\n                                </React.Fragment>\n                            )}\n                        </ul>\n                        <ButtonGroup size=\"lg\" className=\"mb-2 text-center\">\n                            <Button\n                                disabled={noBranch || !canUpdate}\n                                onClick={() => this.setState({ resetType: ResetType.Remote })}\n                                variant={\n                                    this.state.resetType === ResetType.Remote\n                                        ? \"secondary\"\n                                        : \"primary\"\n                                }>\n                                <FormattedMessage id=\"view.instance.repo.update.remote\" />\n                            </Button>\n                            <OverlayTrigger\n                                placement=\"top\"\n                                overlay={props => (\n                                    <Tooltip id=\"repo-local-reset-tip\" {...props}>\n                                        <FormattedMessage id=\"view.instance.repo.update.local.tip\" />\n                                    </Tooltip>\n                                )}>\n                                <Button\n                                    onClick={() => this.setState({ resetType: ResetType.Local })}\n                                    variant={\n                                        this.state.resetType === ResetType.Local\n                                            ? \"secondary\"\n                                            : \"primary\"\n                                    }>\n                                    <FormattedMessage id=\"view.instance.repo.update.local\" />\n                                </Button>\n                            </OverlayTrigger>\n                            <Button\n                                disabled={forceReset}\n                                onClick={() => this.setState({ resetType: ResetType.None })}\n                                variant={\n                                    this.state.resetType === ResetType.None\n                                        ? \"secondary\"\n                                        : \"primary\"\n                                }>\n                                <FormattedMessage id=\"view.instance.repo.update.none\" />\n                            </Button>\n                        </ButtonGroup>\n                        {(configOptions.manualpr.value as boolean) ||\n                        !repositoryInfo ||\n                        !this.state.gitHubPRs ||\n                        repositoryInfo.remoteGitProvider === RemoteGitProvider.GitLab ? (\n                            <div className=\"d-flex mt-5\">\n                                <InputField\n                                    name=\"view.instance.repo.manual\"\n                                    tooltip=\"view.instance.repo.manual.desc\"\n                                    type={FieldType.Number}\n                                    min={0}\n                                    defaultValue={this.state.lastManualPR}\n                                    onChange={newPR => this.setState({ manualPR: newPR })}\n                                    disabled={!canAdd}\n                                />\n                                <SimpleToolTip\n                                    tooltipid=\"generic.no_perm\"\n                                    show={canAdd ? false : undefined}>\n                                    <Button\n                                        className=\"nowrap ml-3\"\n                                        disabled={\n                                            this.state.manualPR === this.state.lastManualPR ||\n                                            !canAdd\n                                        }\n                                        onClick={() => {\n                                            this.setState(prevState => {\n                                                return {\n                                                    manualPRs: new Set<number>([\n                                                        ...prevState.manualPRs.values(),\n                                                        this.state.manualPR\n                                                    ]),\n                                                    lastManualPR: this.state.manualPR\n                                                };\n                                            });\n                                        }}>\n                                        <FormattedMessage id=\"view.instance.repo.addmanual\" />\n                                    </Button>\n                                </SimpleToolTip>\n                            </div>\n                        ) : null}\n                        <InputField\n                            name=\"view.instance.repo.deployAfter\"\n                            tooltip=\"view.instance.repo.deployAfter.desc\"\n                            type={FieldType.Boolean}\n                            defaultValue={!canDeploy ? false : this.state.deployAfter}\n                            disabled={!canDeploy}\n                            onChange={newVal => this.setState({ deployAfter: newVal })}\n                        />\n                    </Card.Body>\n                    <Card.Footer>\n                        <Button\n                            variant=\"danger\"\n                            className=\"mx-2\"\n                            disabled={noPendingChanges}\n                            onClick={() => this.reloadDesiredState(repositoryInfo, true, true)}>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            className=\"mx-2\"\n                            disabled={noPendingChanges}\n                            onClick={() => void this.applyTestmerges(noBranch)}>\n                            <FormattedMessage id=\"generic.commit\" />\n                        </Button>\n                    </Card.Footer>\n                </Card>\n                {this.state.loadingPRs ? (\n                    <Loading text=\"loading.repo.prs\" />\n                ) : !repositoryInfo ? (\n                    <GenericAlert title=\"view.instance.repo.noautomerge\" />\n                ) : repositoryInfo &&\n                  repositoryInfo.remoteGitProvider === RemoteGitProvider.GitHub ? (\n                    <React.Fragment>\n                        <h3>\n                            <FormattedMessage id=\"view.instance.repo.testmerges\" />\n                        </h3>\n                        <br />\n                        <Table variant=\"dark\" striped hover className=\"text-left\">\n                            <tbody>\n                                {sortedPRs.map(pr => (\n                                    <TestMergeRow\n                                        key={pr.number}\n                                        testmergeinfo={testmergedPRs.get(pr.number)}\n                                        pr={pr}\n                                        repoInfo={repositoryInfo}\n                                        finalState={\n                                            this.state.desiredState.get(pr.number)\n                                                ? ((\n                                                      this.state.desiredState.get(pr.number) as [\n                                                          boolean,\n                                                          string,\n                                                          string\n                                                      ]\n                                                  ).slice(1) as [string, string])\n                                                : false\n                                        }\n                                        onRemove={() =>\n                                            this.setState(prevState => {\n                                                return {\n                                                    resetType:\n                                                        prevState.resetType === ResetType.None\n                                                            ? ResetType.Remote\n                                                            : prevState.resetType,\n                                                    desiredState: new Map(\n                                                        prevState.desiredState\n                                                    ).set(pr.number, null)\n                                                };\n                                            })\n                                        }\n                                        onSelectCommit={(commit, comment) =>\n                                            this.setState(prevState => {\n                                                return {\n                                                    desiredState: new Map(\n                                                        prevState.desiredState\n                                                    ).set(pr.number, [false, commit, comment])\n                                                };\n                                            })\n                                        }\n                                        onError={error => this.addError(error)}\n                                    />\n                                ))}\n                            </tbody>\n                        </Table>\n                    </React.Fragment>\n                ) : null}\n            </div>\n        );\n    }\n\n    private renderReclone(): React.ReactNode {\n        const canReclone = hasRepoRight(\n            this.context.instancePermissionSet,\n            RepositoryRights.Reclone\n        );\n\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.repo.reclone.title\" />\n                </h4>\n                <span>\n                    <FormattedMessage id=\"view.instance.repo.reclone.desc\" />\n                </span>\n                <br />\n                <Button\n                    variant=\"warning\"\n                    className=\"mt-2\"\n                    disabled={!canReclone}\n                    onClick={() =>\n                        this.setState({\n                            showRecloneModal: true\n                        })\n                    }>\n                    <FormattedMessage id=\"view.instance.repo.reclone\" />\n                </Button>\n                <Modal\n                    show={this.state.showRecloneModal}\n                    onHide={() =>\n                        this.setState({\n                            showRecloneModal: false\n                        })\n                    }\n                    centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id=\"view.instance.repo.reclone.title\" />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <span>\n                            <FormattedMessage id=\"generic.areyousure\" />\n                        </span>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            onClick={() =>\n                                this.setState({\n                                    showRecloneModal: false\n                                })\n                            }>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={() =>\n                                void (async () => {\n                                    this.setState({\n                                        showRecloneModal: false,\n                                        loading: true\n                                    });\n                                    const response = await RepositoryClient.recloneRepository(\n                                        this.context.instance.id\n                                    );\n                                    this.setState({\n                                        loading: false\n                                    });\n                                    if (response.code === StatusCode.OK) {\n                                        if (response.payload.activeJob) {\n                                            this.setState({\n                                                loading: true\n                                            });\n                                            JobsController.fastmode = 5;\n                                            JobsController.registerCallback(\n                                                response.payload.activeJob.id,\n                                                job => {\n                                                    return this.fetchRepositoryInfo(\n                                                        job,\n                                                        job.errorCode === undefined &&\n                                                            job.exceptionDetails === undefined\n                                                    );\n                                                }\n                                            );\n                                            JobsController.registerJob(\n                                                response.payload.activeJob,\n                                                this.context.instance.id\n                                            );\n                                        } else {\n                                            await this.fetchRepositoryInfo();\n                                        }\n                                    } else {\n                                        this.addError(response.error);\n                                    }\n                                })()\n                            }>\n                            <FormattedMessage id=\"view.instance.repo.reclone\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n\n    private renderDelete(): React.ReactNode {\n        const canDelete = hasRepoRight(this.context.instancePermissionSet, RepositoryRights.Delete);\n\n        return (\n            <React.Fragment>\n                <h4>\n                    <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                </h4>\n                <span>\n                    <FormattedMessage id=\"view.instance.repo.delete.desc\" />\n                </span>\n                <br />\n                <Button\n                    variant=\"danger\"\n                    className=\"mt-2\"\n                    disabled={!canDelete}\n                    onClick={() =>\n                        this.setState({\n                            showDeleteModal: true\n                        })\n                    }>\n                    <FormattedMessage id=\"view.instance.repo.delete\" />\n                </Button>\n                <Modal\n                    show={this.state.showDeleteModal}\n                    onHide={() =>\n                        this.setState({\n                            showDeleteModal: false\n                        })\n                    }\n                    centered>\n                    <Modal.Header closeButton>\n                        <Modal.Title>\n                            <FormattedMessage id=\"view.instance.repo.delete.title\" />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <span>\n                            <FormattedMessage id=\"generic.areyousure\" />\n                        </span>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button\n                            onClick={() =>\n                                this.setState({\n                                    showDeleteModal: false\n                                })\n                            }>\n                            <FormattedMessage id=\"generic.cancel\" />\n                        </Button>\n                        <Button\n                            variant=\"danger\"\n                            onClick={() =>\n                                void (async () => {\n                                    this.setState({\n                                        showDeleteModal: false,\n                                        loading: true\n                                    });\n                                    const response = await RepositoryClient.deleteRepository(\n                                        this.context.instance.id\n                                    );\n                                    this.setState({\n                                        loading: false\n                                    });\n                                    if (response.code === StatusCode.OK) {\n                                        if (response.payload.activeJob) {\n                                            this.setState({\n                                                loading: true\n                                            });\n                                            JobsController.fastmode = 5;\n                                            JobsController.registerCallback(\n                                                response.payload.activeJob.id,\n                                                job => {\n                                                    return this.fetchRepositoryInfo(\n                                                        job,\n                                                        job.errorCode === undefined &&\n                                                            job.exceptionDetails === undefined\n                                                    );\n                                                }\n                                            );\n                                            JobsController.registerJob(\n                                                response.payload.activeJob,\n                                                this.context.instance.id\n                                            );\n                                        } else {\n                                            await this.fetchRepositoryInfo();\n                                        }\n                                    } else {\n                                        this.addError(response.error);\n                                    }\n                                })()\n                            }>\n                            <FormattedMessage id=\"view.instance.repo.delete\" />\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n}\n\nRepository.contextType = InstanceEditContext;\nexport default Repository;\n"],"names":["SimpleToolTip","props","React","OverlayTrigger","show","overlay","Tooltip","id","tooltipid","FormattedMessage","children","TestMergeRow","pr","testmergeinfo","repoInfo","finalState","onRemove","onSelectCommit","onError","showDetails","_setShowDetails","useState","setShowDetails","_newVal","prevState","newVal","loadCommits","showModal","setShowModal","selectedCommit","setSelectedCommit","head","comment","setComment","commits","setCommits","extraCommit","setExtraCommit","instanceEditContext","useContext","InstanceEditContext","useCallback","async","force","response","GithubClient","getPRCommits","owner","remoteRepositoryOwner","repo","remoteRepositoryName","wantedCommit","targetCommitSha","code","StatusCode","ERROR","error","commitMap","Map","payload","forEach","commit","set","sha","useEffect","activeCommit","has","get","commitOptions","values","map","name","value","current","latest","disabled","push","canAdd","hasRepoRight","instancePermissionSet","RepositoryRights","MergePullRequest","canReset","Read","UpdateBranch","className","number","Badge","pill","style","backgroundColor","closed","merged","open","state","testmergelabel","variant","conflictlabel","href","link","target","rel","title","author","undefined","Button","onClick","FontAwesomeIcon","icon","fixedWidth","e","shiftKey","val","active","colSpan","Collapse","in","mergedBy","url","substring","Modal","onHide","centered","size","Header","closeButton","Title","Body","SelectSearch","filterOptions","fuzzySearch","search","options","autoComplete","renderOption","option","snapshot","_extends","type","onChange","Loading","text","width","widthUnit","InputField","FieldType","String","newComment","defaultValue","Footer","PRState","ResetType","CredentialsType","Repository","constructor","super","this","errors","repositoryInfo","writableCredentials","credMode","PrivateKey","showCredsModal","loading","cloning","unableToHookClone","gitHubPRs","manualPRs","Set","resetType","Remote","desiredState","showDeleteModal","showRecloneModal","manualPR","lastManualPR","deployAfter","repoBusy","loadingPRs","fetchRepositoryInfo","bind","addError","setState","Array","from","componentDidMount","hasDreamMakerRight","context","DreamMakerRights","Compile","cloneJob","resetDesiredState","reloadDesiredState","RepositoryClient","getRepository","instance","ErrorCode","HTTP_DATA_INEGRITY","originalErrorMessage","errorCode","TGSErrorCode","RepoCloning","JobsController","registerCallback","response2","JobsClient","listActiveJobs","page","pageSize","OK","content","sort","a","b","find","job","description","includes","RepoBusy","reloadPRs","remoteGitProvider","RemoteGitProvider","GitHub","getPRs","wantedPRs","revisionInformation","activeTestMerges","tm","then","prs","catch","InternalError","APP_FAIL","jsError","applyTestmerges","noBranch","editOptions","willReset","None","Local","checkoutSha","originCommitSha","updateFromOrigin","reference","testMergeArray","entries","prDesiredState","length","newTestMerges","editRepository","activeJob","fastmode","exceptionDetails","registerJob","jobId","deployinterval","setInterval","targetJob","jobs","progress","stoppedAt","DreamMakerClient","startCompile","clearInterval","repoinfo","reset","harderReset","newDesiredState","updatingTMs","regularReset","currentDesiredState","gitHubPR","potentialGitHubPR","newHead","render","DebugJsonViewer","obj","renderErrors","origin","renderPreClone","renderRepoInformation","renderSettings","renderTestMerges","renderReclone","renderDelete","err","index","ErrorAlert","key","onClose","prev","newarr","GenericAlert","cloneFields","updateSubmodules","Boolean","renderCredsModal","InputForm","fields","hideDisabled","onSave","repoCloneRequest","result","accessUser","accessToken","cloneRepository","includeAll","alwaysAllowSave","saveMessageId","editFields","originCheckoutSha","tooltip","commitSha","SetSha","SetReference","committerName","ChangeCommitter","committerEmail","pushTestMergeCommits","ChangeTestMergeCommits","createGitHubDeployments","showTestMergeCommitters","autoUpdatesKeepTestMerges","ChangeAutoUpdateSettings","autoUpdatesSynchronize","postTestMergeComment","ChangeSubmoduleUpdate","repoUpdateRequest","renderCredDetails","credModeName","Object","localeId","baseFields","username","regularFields","token","Password","privateKeyFields","clientId","privateKey","TextArea","display","trim","alert","tgsEncodedAppPrivateKey","btoa","canCreds","ChangeCredentials","editButton","Enum","enum","newCredentialsType","hideReadOnly","additionalAppend","forceChanged","canDeploy","canUpdate","testmergedPRs","sortedPRs","filteredPendingActions","desiredPRState","tmInfo","activePR","updated","rename","reapply","added","removed","filter","sortedPendingActions","order","forceReset","some","action","noPendingChanges","Unknown","Card","targetCommit","startsWith","ButtonGroup","placement","configOptions","manualpr","GitLab","Number","min","newPR","Table","striped","hover","slice","canReclone","Reclone","recloneRepository","canDelete","Delete","deleteRepository","contextType"],"sourceRoot":""}